<!doctype html public "-//w3c//dtd html 4.0 transitional//en">
<html><head>
<title>Static Call Graph - [.\Release\Objects\BLE_Beacon.axf]</title></head>
<body><HR>
<H1>Static Call Graph for image .\Release\Objects\BLE_Beacon.axf</H1><HR>
<BR><P>#&#060CALLGRAPH&#062# ARM Linker, 5060422: Last Updated: Mon Aug 24 15:49:36 2020
<BR><P>
<H3>Maximum Stack Usage =        720 bytes + Unknown(Functions without stacksize, Cycles, Untraceable Function Pointers)</H3><H3>
Call chain for Maximum Stack Depth:</H3>
RESET_HANDLER &rArr; main &rArr; BlueNRG_Sleep &rArr; BlueNRG_InternalSleep &rArr; DeviceConfiguration &rArr; BOR_ConfigSave
<P>
<H3>
Functions with no stack information
</H3><UL>
 <LI><a href="#[81]">ATT_fill_error_resp</a>
 <LI><a href="#[88]">Accu_Handles_Requiring_Auth</a>
 <LI><a href="#[89]">Accu_UuidTypes_Requiring_Auth</a>
 <LI><a href="#[c6]">Acl_Init</a>
 <LI><a href="#[8b]">Acl_Rcv_Pkt_Handler</a>
 <LI><a href="#[8e]">Acl_Transmit_Data</a>
 <LI><a href="#[94]">Acl_Tx_Cmpl_Pkt_Handler</a>
 <LI><a href="#[9c]">Att_Check_Perms</a>
 <LI><a href="#[ab]">BTLE_StackTick</a>
 <LI><a href="#[be]">BlueNRG_Stack_Initialization</a>
 <LI><a href="#[bc]">BlueNRG_Stack_Perform_Deep_Sleep_Check</a>
 <LI><a href="#[d5]">Blue_Init_Global</a>
 <LI><a href="#[d6]">Blue_Set_Radio_Config_Data</a>
 <LI><a href="#[d8]">Build_Notif_Or_Ind</a>
 <LI><a href="#[d9]">CheckSecForSignedWrite</a>
 <LI><a href="#[136]">Check_Encry_Key_Size</a>
 <LI><a href="#[da]">Check_For_Service_Change</a>
 <LI><a href="#[9e]">Check_Permission</a>
 <LI><a href="#[ae]">Controller_Process_Q</a>
 <LI><a href="#[e4]">Data_Len_Update_Offline_Processing_ucfg</a>
 <LI><a href="#[298]">Data_Length_Update_Control_ISR_ucfg</a>
 <LI><a href="#[2b5]">Delay_With_NOP_Cycles</a>
 <LI><a href="#[e5]">Disconnection_Offline_Processing</a>
 <LI><a href="#[ce]">Dynamic_allocator</a>
 <LI><a href="#[cf]">Dynamic_allocator_noRet</a>
 <LI><a href="#[af]">Events_Process_Q</a>
 <LI><a href="#[cc]">Events_Process_init</a>
 <LI><a href="#[f6]">Exchg_Mtu_Resp</a>
 <LI><a href="#[f7]">Exec_Write_Resp</a>
 <LI><a href="#[de]">Find_Attr_Index</a>
 <LI><a href="#[ff]">Find_By_Type_Val_Resp</a>
 <LI><a href="#[dd]">Find_Gatt_Client</a>
 <LI><a href="#[102]">Find_Info_Resp</a>
 <LI><a href="#[12d]">Find_Timed_Out_Connection</a>
 <LI><a href="#[103]">Flash_Write_Flagged</a>
 <LI><a href="#[105]">GAP_Connection_Complete_Handler</a>
 <LI><a href="#[201]">GAP_DiscProcTimeoutcb_ucfg</a>
 <LI><a href="#[107]">GAP_Init</a>
 <LI><a href="#[c9]">GAP_Init_Context</a>
 <LI><a href="#[10f]">GAP_LL_Event_Handler_ISR</a>
 <LI><a href="#[111]">GAP_LimDiscTimeoutcb</a>
 <LI><a href="#[114]">GAP_Notify_Add_Charac</a>
 <LI><a href="#[117]">GAP_Privacy1v2</a>
 <LI><a href="#[11f]">GAP_PrivateAddrTimercb</a>
 <LI><a href="#[b2]">GAP_Process_Q</a>
 <LI><a href="#[123]">GAP_Set_Discoverable_Mode</a>
 <LI><a href="#[10a]">GAP_check_and_set_role_ucfg</a>
 <LI><a href="#[122]">GAP_discover_peer_name_ucfg</a>
 <LI><a href="#[10b]">GAP_enable_controller_privacy_ucfg</a>
 <LI><a href="#[125]">GATT_Connection_Complete_Handler</a>
 <LI><a href="#[115]">GATT_Num_Charac_Present</a>
 <LI><a href="#[129]">GATT_Send_Packet</a>
 <LI><a href="#[12c]">GATT_TimeOut_Handler</a>
 <LI><a href="#[2bc]">GapIsPrivacySupported</a>
 <LI><a href="#[131]">Gatt_Add_Charac_Desc</a>
 <LI><a href="#[10d]">Gatt_Add_Characteristic</a>
 <LI><a href="#[134]">Gatt_Add_Descriptor</a>
 <LI><a href="#[10c]">Gatt_Add_Service</a>
 <LI><a href="#[1bb]">Gatt_Find_Srv_From_Handle</a>
 <LI><a href="#[86]">Gatt_Find_Srv_Owner_Of_Handle</a>
 <LI><a href="#[144]">Gatt_Find_Timed_Out_Connection_Index</a>
 <LI><a href="#[b3]">Gatt_Process_Q</a>
 <LI><a href="#[132]">Gatt_Server_Db_Check</a>
 <LI><a href="#[146]">Gatt_Server_Init</a>
 <LI><a href="#[148]">Gatt_Server_L2C_Handler</a>
 <LI><a href="#[14e]">Gatt_Server_L2C_Handler_ISR</a>
 <LI><a href="#[10e]">Gatt_Update_Charac_Value</a>
 <LI><a href="#[151]">Gatt_Update_Charac_Value_Ext</a>
 <LI><a href="#[dc]">Gatt_fetch_handle</a>
 <LI><a href="#[87]">Gatt_search_handle</a>
 <LI><a href="#[128]">Gatt_search_service_handle</a>
 <LI><a href="#[11b]">Generate_Non_Resolvable_Private_Address</a>
 <LI><a href="#[127]">Get_GAP_Handle</a>
 <LI><a href="#[156]">Get_Random_Addr</a>
 <LI><a href="#[109]">Get_StaticRandAddr</a>
 <LI><a href="#[157]">HAL_Flash_Store_Data</a>
 <LI><a href="#[158]">HAL_Generate_Random_Bytes_To</a>
 <LI><a href="#[210]">HAL_Set_TX_Power_Level</a>
 <LI><a href="#[205]">HAL_VTimerAcc_sysT32_ms</a>
 <LI><a href="#[159]">HAL_VTimerGetCurrentTime_sysT32</a>
 <LI><a href="#[202]">HAL_VTimerTimeoutCallback</a>
 <LI><a href="#[ca]">HCI_Init</a>
 <LI><a href="#[153]">Hal_Get_Random_Number</a>
 <LI><a href="#[15b]">Hal_Get_Random_Number32</a>
 <LI><a href="#[108]">IDD_Initialize_Device_IDs</a>
 <LI><a href="#[df]">Ind_Service_Change_Charac</a>
 <LI><a href="#[178]">Is_Address_Initialized</a>
 <LI><a href="#[1b5]">Is_Flash_Write_On_Going</a>
 <LI><a href="#[15d]">L2C_Build_Command_Reject_Pdu</a>
 <LI><a href="#[15f]">L2C_Connection_Complete_Handler</a>
 <LI><a href="#[163]">L2C_Connection_Complete_Signal_Handler</a>
 <LI><a href="#[16b]">L2C_Get_PDU_Len</a>
 <LI><a href="#[c7]">L2C_Init</a>
 <LI><a href="#[16d]">L2C_Rcv_Event_Handler</a>
 <LI><a href="#[16e]">L2C_Rcv_Event_Handler_ISR</a>
 <LI><a href="#[12a]">L2C_Send_Data</a>
 <LI><a href="#[174]">L2C_SigChan_Req_TimeOut_Handler</a>
 <LI><a href="#[165]">L2C_Signal_Channel_Handler</a>
 <LI><a href="#[162]">L2C_Signal_Channel_Handler_ISR</a>
 <LI><a href="#[118]">LL_Allow_Address_Setting</a>
 <LI><a href="#[177]">LL_Check_And_Set_Addresses</a>
 <LI><a href="#[2a0]">LL_Data_Length_Change_Event_ucfg</a>
 <LI><a href="#[112]">LL_Enable_Disable_Adv</a>
 <LI><a href="#[183]">LL_Encrypt_Plain_Data_ucfg</a>
 <LI><a href="#[176]">LL_Get_Address</a>
 <LI><a href="#[119]">LL_Get_AdvAddress</a>
 <LI><a href="#[186]">LL_Get_Adv_Tx_Power_Level</a>
 <LI><a href="#[11a]">LL_Get_ScanAddress</a>
 <LI><a href="#[c4]">LL_Init</a>
 <LI><a href="#[188]">LL_LE_Clear_White_List</a>
 <LI><a href="#[8f]">LL_Send_ACL_Data</a>
 <LI><a href="#[ed]">LL_Send_Disconnection_Req</a>
 <LI><a href="#[2a1]">LL_Send_Length_Resp_ucfg</a>
 <LI><a href="#[18a]">LL_Set_Adv_Data</a>
 <LI><a href="#[180]">LL_Set_Adv_PDU_Format</a>
 <LI><a href="#[18b]">LL_Set_Adv_Params</a>
 <LI><a href="#[17f]">LL_Set_Advertising_Buffers</a>
 <LI><a href="#[18d]">LL_Set_LTK</a>
 <LI><a href="#[17c]">LL_Set_OwnAddress</a>
 <LI><a href="#[28a]">LL_Set_Scan_Resp_Data</a>
 <LI><a href="#[23b]">LL_Sleep_Req</a>
 <LI><a href="#[18e]">LL_Update_Advertising_Buffers</a>
 <LI><a href="#[18f]">LL_Update_Scanning_Initiating_Buffers</a>
 <LI><a href="#[190]">LL_receive_data</a>
 <LI><a href="#[23f]">LL_update_proc</a>
 <LI><a href="#[133]">List_Circular_Get_Size</a>
 <LI><a href="#[138]">List_Circular_Insert_Tail</a>
 <LI><a href="#[192]">List_Circular_Node_Present</a>
 <LI><a href="#[207]">List_Circular_Remove_Head</a>
 <LI><a href="#[137]">List_Circular_Remove_Node</a>
 <LI><a href="#[169]">Mem_Buff_Append</a>
 <LI><a href="#[193]">Mem_Buff_Block_Copy</a>
 <LI><a href="#[195]">Mem_Buff_Block_Write</a>
 <LI><a href="#[196]">Mem_Buff_Clone</a>
 <LI><a href="#[197]">Mem_Buff_Cmp</a>
 <LI><a href="#[198]">Mem_Buff_Compact</a>
 <LI><a href="#[1a1]">Mem_Buff_Get</a>
 <LI><a href="#[19e]">Mem_Buff_Get_Chain_Count</a>
 <LI><a href="#[1a6]">Mem_Buff_Get_Chain_Size</a>
 <LI><a href="#[1a3]">Mem_Buff_Init</a>
 <LI><a href="#[199]">Mem_Buff_Read</a>
 <LI><a href="#[1a4]">Mem_Buff_Release</a>
 <LI><a href="#[1a7]">Mem_Buff_Resize</a>
 <LI><a href="#[19a]">Mem_Buff_Write</a>
 <LI><a href="#[e3]">PKA_Offline_Processing_ucfg</a>
 <LI><a href="#[19d]">PM_Clone_Pckt</a>
 <LI><a href="#[16a]">PM_Compact</a>
 <LI><a href="#[fa]">PM_Copy_Pckt_Data</a>
 <LI><a href="#[1a2]">PM_Eng_Config</a>
 <LI><a href="#[168]">PM_Extract_Pdu_MBuff</a>
 <LI><a href="#[142]">PM_Get_Available_Buffer</a>
 <LI><a href="#[19f]">PM_Get_Mem_Buff_Count</a>
 <LI><a href="#[14c]">PM_Get_Pckt</a>
 <LI><a href="#[c5]">PM_Init</a>
 <LI><a href="#[101]">PM_Pckt_Cmp</a>
 <LI><a href="#[fc]">PM_Release_Acl_Pckt</a>
 <LI><a href="#[1a5]">PM_Resize_Pckt_Pdu_Size</a>
 <LI><a href="#[84]">PM_Write_Pckt_Data</a>
 <LI><a href="#[179]">PRIVWHIT_u8SearchAddrInList</a>
 <LI><a href="#[1a8]">PRIVWHIT_vInit_Struct</a>
 <LI><a href="#[295]">PRIV_SearchAddrInWhiteList</a>
 <LI><a href="#[20d]">PRIV_controller_privacy_csr_ucfg</a>
 <LI><a href="#[294]">PRIV_u32ProcessAdvPacket_ucfg</a>
 <LI><a href="#[e2]">PRIV_u8OfflineProcessing_ucfg</a>
 <LI><a href="#[17a]">PRIV_vGeneratePrivateAddress_ucfg</a>
 <LI><a href="#[29d]">PRIV_vGenerate_hci_le_enhanced_connection_complete_event_ucfg</a>
 <LI><a href="#[1a9]">Prepare_Write_Resp</a>
 <LI><a href="#[13f]">Process_Peer_Client_Data</a>
 <LI><a href="#[13d]">Process_Peer_Server_Data</a>
 <LI><a href="#[d4]">RAL_Isr</a>
 <LI><a href="#[1ad]">Read_Blob_Resp</a>
 <LI><a href="#[1af]">Read_By_Grp_Type_Resp</a>
 <LI><a href="#[1ab]">Read_By_Type_Resp</a>
 <LI><a href="#[1ae]">Read_Multi_Resp</a>
 <LI><a href="#[1ac]">Read_Resp</a>
 <LI><a href="#[29f]">Reclassify_All_Channels_ucfg</a>
 <LI><a href="#[1bd]">SDB_Add_Record</a>
 <LI><a href="#[1c3]">SDB_Find_Matching_LTK</a>
 <LI><a href="#[1c7]">SDB_Find_Record</a>
 <LI><a href="#[116]">SDB_Get_Number_Of_Valid_Records</a>
 <LI><a href="#[150]">SDB_flash_write_client_data</a>
 <LI><a href="#[1c5]">SDB_get_security_data_record</a>
 <LI><a href="#[db]">SDB_read_peer_bonded_data</a>
 <LI><a href="#[1c6]">SMA_Diversify</a>
 <LI><a href="#[1cc]">SMA_Generate_CSRK</a>
 <LI><a href="#[1cd]">SMA_Generate_IRK</a>
 <LI><a href="#[1ce]">SMA_LP_s1_Generate_STK</a>
 <LI><a href="#[1c4]">SMA_generate_EDIV_recovery_DIV</a>
 <LI><a href="#[c8]">SMP_Init</a>
 <LI><a href="#[b4]">SMP_Process_Q</a>
 <LI><a href="#[1da]">SMP_Protocol_Timer_cb</a>
 <LI><a href="#[166]">SMP_acl_data_hndl</a>
 <LI><a href="#[e1]">SMP_check_encryption_key_size</a>
 <LI><a href="#[13c]">SMP_check_is_device_bonded</a>
 <LI><a href="#[13b]">SMP_forget_device_by_conn_handle</a>
 <LI><a href="#[e0]">SMP_get_link_status</a>
 <LI><a href="#[9d]">SMP_get_remote_device_list_item</a>
 <LI><a href="#[16f]">SMP_hci_disconnection_complete_evt_hndl</a>
 <LI><a href="#[171]">SMP_hci_encryption_change_evt_hndl</a>
 <LI><a href="#[160]">SMP_hci_le_connection_complete_evt_hndl</a>
 <LI><a href="#[161]">SMP_hci_le_enhanced_connection_complete_evt_hndl</a>
 <LI><a href="#[170]">SMP_hci_le_long_term_key_request_evt_hndl</a>
 <LI><a href="#[1e0]">SMP_repeated_attacks_timer_cb</a>
 <LI><a href="#[1d4]">SMP_reset_timer</a>
 <LI><a href="#[1e1]">SMP_validate_signed_packet</a>
 <LI><a href="#[11c]">SM_Generate_Resolvable_Private_Address</a>
 <LI><a href="#[1c8]">SM_Resolve_Private_Address</a>
 <LI><a href="#[1f9]">Select_Next_Notification_Client</a>
 <LI><a href="#[14d]">Send_Notif_Or_Ind</a>
 <LI><a href="#[d3]">Set_Host_Timer_value</a>
 <LI><a href="#[14b]">Start_Gatt_Timer</a>
 <LI><a href="#[149]">Stop_Gatt_Timer</a>
 <LI><a href="#[1b4]">Timer_ExpiryCallback</a>
 <LI><a href="#[c3]">Timer_Init</a>
 <LI><a href="#[ac]">Timer_ProcessQ</a>
 <LI><a href="#[11e]">Timer_StartOneShot</a>
 <LI><a href="#[206]">Timer_StartOneShot_sysTime32</a>
 <LI><a href="#[11d]">Timer_StopOneShot</a>
 <LI><a href="#[15a]">Timer_sysTime32_convMachineTime</a>
 <LI><a href="#[230]">WindowWiden1</a>
 <LI><a href="#[234]">WindowWiden2</a>
 <LI><a href="#[1b1]">Write_Cmd</a>
 <LI><a href="#[1b0]">Write_Resp</a>
 <LI><a href="#[c0]">_BlueNRG_Stack_Initialization</a>
 <LI><a href="#[296]">__ARM_common_memcpy1_6</a>
 <LI><a href="#[124]">_gap_set_discoverable_connectable</a>
 <LI><a href="#[240]">aci_att_exchange_mtu_resp_event</a>
 <LI><a href="#[241]">aci_att_exec_write_resp_event</a>
 <LI><a href="#[242]">aci_att_find_by_type_value_resp_event</a>
 <LI><a href="#[243]">aci_att_find_info_resp_event</a>
 <LI><a href="#[244]">aci_att_prepare_write_resp_event</a>
 <LI><a href="#[245]">aci_att_read_blob_resp_event</a>
 <LI><a href="#[246]">aci_att_read_by_group_type_resp_event</a>
 <LI><a href="#[247]">aci_att_read_by_type_resp_event</a>
 <LI><a href="#[248]">aci_att_read_multiple_resp_event</a>
 <LI><a href="#[249]">aci_att_read_resp_event</a>
 <LI><a href="#[24a]">aci_att_write_resp_event</a>
 <LI><a href="#[8d]">aci_event_fifo_push</a>
 <LI><a href="#[8c]">aci_event_fifo_push_header</a>
 <LI><a href="#[24b]">aci_gap_addr_not_resolved_event</a>
 <LI><a href="#[24c]">aci_gap_authorization_req_event</a>
 <LI><a href="#[24d]">aci_gap_bond_lost_event</a>
 <LI><a href="#[24e]">aci_gap_device_found_event</a>
 <LI><a href="#[ec]">aci_gap_init</a>
 <LI><a href="#[24f]">aci_gap_keypress_notification_event</a>
 <LI><a href="#[250]">aci_gap_limited_discoverable_event</a>
 <LI><a href="#[251]">aci_gap_numeric_comparison_value_event</a>
 <LI><a href="#[252]">aci_gap_pairing_complete_event</a>
 <LI><a href="#[253]">aci_gap_pass_key_req_event</a>
 <LI><a href="#[254]">aci_gap_proc_complete_event</a>
 <LI><a href="#[1fc]">aci_gap_set_discoverable</a>
 <LI><a href="#[255]">aci_gap_slave_security_initiated_event</a>
 <LI><a href="#[97]">aci_gatt_add_char</a>
 <LI><a href="#[96]">aci_gatt_add_service</a>
 <LI><a href="#[256]">aci_gatt_disc_read_char_by_uuid_resp_event</a>
 <LI><a href="#[257]">aci_gatt_error_resp_event</a>
 <LI><a href="#[258]">aci_gatt_indication_event</a>
 <LI><a href="#[eb]">aci_gatt_init</a>
 <LI><a href="#[259]">aci_gatt_notification_event</a>
 <LI><a href="#[25a]">aci_gatt_prepare_write_permit_req_event</a>
 <LI><a href="#[25b]">aci_gatt_proc_complete_event</a>
 <LI><a href="#[25c]">aci_gatt_proc_timeout_event</a>
 <LI><a href="#[25d]">aci_gatt_read_multi_permit_req_event</a>
 <LI><a href="#[25e]">aci_gatt_read_permit_req_event</a>
 <LI><a href="#[25f]">aci_gatt_server_confirmation_event</a>
 <LI><a href="#[260]">aci_gatt_tx_pool_available_event</a>
 <LI><a href="#[261]">aci_gatt_write_permit_req_event</a>
 <LI><a href="#[262]">aci_hal_fw_error_event</a>
 <LI><a href="#[263]">aci_hal_scan_req_report_event</a>
 <LI><a href="#[2aa]">aci_hal_set_radio_activity_mask</a>
 <LI><a href="#[ea]">aci_hal_set_tx_power_level</a>
 <LI><a href="#[264]">aci_l2cap_command_reject_event</a>
 <LI><a href="#[265]">aci_l2cap_connection_update_req_event</a>
 <LI><a href="#[266]">aci_l2cap_connection_update_resp_event</a>
 <LI><a href="#[267]">aci_l2cap_proc_timeout_event</a>
 <LI><a href="#[f8]">acl_list_first</a>
 <LI><a href="#[1aa]">acl_list_full_on_packt</a>
 <LI><a href="#[147]">acl_list_init</a>
 <LI><a href="#[141]">acl_list_insert_head</a>
 <LI><a href="#[12b]">acl_list_insert_tail</a>
 <LI><a href="#[13e]">acl_list_is_empty</a>
 <LI><a href="#[f9]">acl_list_remove</a>
 <LI><a href="#[140]">acl_list_remove_head</a>
 <LI><a href="#[21d]">advParamsCheckAndSet</a>
 <LI><a href="#[22e]">advance_slave_timing_MultiSlave</a>
 <LI><a href="#[b1]">advance_transmit</a>
 <LI><a href="#[93]">advance_wakeup_timer</a>
 <LI><a href="#[cb]">ble_HAL_Init</a>
 <LI><a href="#[23e]">cancel_connect_master_ucfg</a>
 <LI><a href="#[23c]">cancel_current_master</a>
 <LI><a href="#[23a]">cancel_master</a>
 <LI><a href="#[237]">cancel_slave</a>
 <LI><a href="#[42]">cb_aci_att_exchange_mtu_resp_event</a>
 <LI><a href="#[4c]">cb_aci_att_exec_write_resp_event</a>
 <LI><a href="#[44]">cb_aci_att_find_by_type_value_resp_event</a>
 <LI><a href="#[43]">cb_aci_att_find_info_resp_event</a>
 <LI><a href="#[4b]">cb_aci_att_prepare_write_resp_event</a>
 <LI><a href="#[47]">cb_aci_att_read_blob_resp_event</a>
 <LI><a href="#[49]">cb_aci_att_read_by_group_type_resp_event</a>
 <LI><a href="#[45]">cb_aci_att_read_by_type_resp_event</a>
 <LI><a href="#[48]">cb_aci_att_read_multiple_resp_event</a>
 <LI><a href="#[46]">cb_aci_att_read_resp_event</a>
 <LI><a href="#[4a]">cb_aci_att_write_resp_event</a>
 <LI><a href="#[38]">cb_aci_gap_addr_not_resolved_event</a>
 <LI><a href="#[33]">cb_aci_gap_authorization_req_event</a>
 <LI><a href="#[35]">cb_aci_gap_bond_lost_event</a>
 <LI><a href="#[36]">cb_aci_gap_device_found_event</a>
 <LI><a href="#[3a]">cb_aci_gap_keypress_notification_event</a>
 <LI><a href="#[30]">cb_aci_gap_limited_discoverable_event</a>
 <LI><a href="#[39]">cb_aci_gap_numeric_comparison_value_event</a>
 <LI><a href="#[31]">cb_aci_gap_pairing_complete_event</a>
 <LI><a href="#[32]">cb_aci_gap_pass_key_req_event</a>
 <LI><a href="#[37]">cb_aci_gap_proc_complete_event</a>
 <LI><a href="#[34]">cb_aci_gap_slave_security_initiated_event</a>
 <LI><a href="#[40]">cb_aci_gatt_attribute_modified_event</a>
 <LI><a href="#[51]">cb_aci_gatt_disc_read_char_by_uuid_resp_event</a>
 <LI><a href="#[50]">cb_aci_gatt_error_resp_event</a>
 <LI><a href="#[4d]">cb_aci_gatt_indication_event</a>
 <LI><a href="#[4e]">cb_aci_gatt_notification_event</a>
 <LI><a href="#[53]">cb_aci_gatt_prepare_write_permit_req_event</a>
 <LI><a href="#[4f]">cb_aci_gatt_proc_complete_event</a>
 <LI><a href="#[41]">cb_aci_gatt_proc_timeout_event</a>
 <LI><a href="#[55]">cb_aci_gatt_read_multi_permit_req_event</a>
 <LI><a href="#[54]">cb_aci_gatt_read_permit_req_event</a>
 <LI><a href="#[57]">cb_aci_gatt_server_confirmation_event</a>
 <LI><a href="#[56]">cb_aci_gatt_tx_pool_available_event</a>
 <LI><a href="#[52]">cb_aci_gatt_write_permit_req_event</a>
 <LI><a href="#[3f]">cb_aci_hal_fw_error_event</a>
 <LI><a href="#[2d]">cb_aci_hal_scan_req_report_event</a>
 <LI><a href="#[3e]">cb_aci_l2cap_command_reject_event</a>
 <LI><a href="#[3d]">cb_aci_l2cap_connection_update_req_event</a>
 <LI><a href="#[3b]">cb_aci_l2cap_connection_update_resp_event</a>
 <LI><a href="#[3c]">cb_aci_l2cap_proc_timeout_event</a>
 <LI><a href="#[29]">cb_hci_data_buffer_overflow_event</a>
 <LI><a href="#[1e]">cb_hci_disconnection_complete_event</a>
 <LI><a href="#[1f]">cb_hci_encryption_change_event</a>
 <LI><a href="#[20]">cb_hci_encryption_key_refresh_complete_event</a>
 <LI><a href="#[23]">cb_hci_le_advertising_report_event</a>
 <LI><a href="#[21]">cb_hci_le_connection_complete_event</a>
 <LI><a href="#[2b]">cb_hci_le_connection_update_complete_event</a>
 <LI><a href="#[24]">cb_hci_le_data_length_change_event</a>
 <LI><a href="#[28]">cb_hci_le_direct_advertising_report_event</a>
 <LI><a href="#[27]">cb_hci_le_enhanced_connection_complete_event</a>
 <LI><a href="#[26]">cb_hci_le_generate_dhkey_complete_event</a>
 <LI><a href="#[22]">cb_hci_le_long_term_key_request_event</a>
 <LI><a href="#[25]">cb_hci_le_read_local_p256_public_key_complete_event</a>
 <LI><a href="#[2c]">cb_hci_le_read_remote_used_features_complete_event</a>
 <LI><a href="#[2e]">cb_hci_number_of_completed_packets_event</a>
 <LI><a href="#[2a]">cb_hci_read_remote_version_information_complete_event</a>
 <LI><a href="#[2f]">cb_hci_rx_acl_data_event</a>
 <LI><a href="#[d7]">char_copy</a>
 <LI><a href="#[2a3]">copy_4_u32</a>
 <LI><a href="#[238]">copy_tx_data_packet</a>
 <LI><a href="#[cd]">data_length_extension_csr_ucfg</a>
 <LI><a href="#[184]">encrypt</a>
 <LI><a href="#[21c]">gapClearAllModeFlags</a>
 <LI><a href="#[27f]">get_adv_addr</a>
 <LI><a href="#[120]">get_advertiser</a>
 <LI><a href="#[90]">get_connection_no</a>
 <LI><a href="#[17e]">get_next_free_slot</a>
 <LI><a href="#[280]">get_scan_addr</a>
 <LI><a href="#[121]">get_scan_connection</a>
 <LI><a href="#[281]">go_to_connect</a>
 <LI><a href="#[f2]">hal_radio_activity_state_callback_check</a>
 <LI><a href="#[f3]">hal_radio_activity_state_init</a>
 <LI><a href="#[283]">hal_read_radio_activity_state</a>
 <LI><a href="#[ad]">hci_acl_Process_Q</a>
 <LI><a href="#[269]">hci_encryption_change_event</a>
 <LI><a href="#[26a]">hci_encryption_key_refresh_complete_event</a>
 <LI><a href="#[26b]">hci_le_advertising_report_event</a>
 <LI><a href="#[26c]">hci_le_connection_complete_event</a>
 <LI><a href="#[26d]">hci_le_connection_update_complete_event</a>
 <LI><a href="#[26e]">hci_le_data_length_change_event</a>
 <LI><a href="#[26f]">hci_le_direct_advertising_report_event</a>
 <LI><a href="#[1cb]">hci_le_encrypt</a>
 <LI><a href="#[270]">hci_le_enhanced_connection_complete_event</a>
 <LI><a href="#[271]">hci_le_generate_dhkey_complete_event</a>
 <LI><a href="#[272]">hci_le_long_term_key_request_event</a>
 <LI><a href="#[1d5]">hci_le_long_term_key_request_reply</a>
 <LI><a href="#[1d2]">hci_le_long_term_key_requested_negative_reply</a>
 <LI><a href="#[273]">hci_le_read_local_p256_public_key_complete_event</a>
 <LI><a href="#[274]">hci_le_read_remote_used_features_complete_event</a>
 <LI><a href="#[285]">hci_le_set_advertise_enable</a>
 <LI><a href="#[1fd]">hci_le_set_advertising_data</a>
 <LI><a href="#[1fb]">hci_le_set_scan_response_data</a>
 <LI><a href="#[275]">hci_number_of_completed_packets_event</a>
 <LI><a href="#[276]">hci_read_remote_version_information_complete_event</a>
 <LI><a href="#[28b]">hci_rx_acl_data</a>
 <LI><a href="#[277]">hci_rx_acl_data_event</a>
 <LI><a href="#[28c]">hci_tx_acl_data_done</a>
 <LI><a href="#[59]">int_cb_hci_acl_data_ind_event</a>
 <LI><a href="#[58]">int_cb_hci_acl_data_tx_cmpl_event</a>
 <LI><a href="#[5a]">int_cb_hci_disconnection_complete_event</a>
 <LI><a href="#[5b]">int_cb_hci_encryption_change_event</a>
 <LI><a href="#[5c]">int_cb_hci_encryption_key_refresh_complete_event</a>
 <LI><a href="#[5f]">int_cb_hci_le_advertising_report_event</a>
 <LI><a href="#[5d]">int_cb_hci_le_connection_complete_event</a>
 <LI><a href="#[60]">int_cb_hci_le_data_length_change_event</a>
 <LI><a href="#[64]">int_cb_hci_le_direct_advertising_report_event</a>
 <LI><a href="#[63]">int_cb_hci_le_enhanced_connection_complete_event</a>
 <LI><a href="#[62]">int_cb_hci_le_generate_dhkey_complete_event</a>
 <LI><a href="#[5e]">int_cb_hci_le_long_term_key_request_event</a>
 <LI><a href="#[61]">int_cb_hci_le_read_local_p256_public_key_complete_event</a>
 <LI><a href="#[15c]">is_Buffer_All_Set_To</a>
 <LI><a href="#[91]">is_slave</a>
 <LI><a href="#[191]">isr_Acl_Data_Indication_Queue_Full</a>
 <LI><a href="#[29b]">isr_Acl_Data_TX_Cmpl_Queue_Full</a>
 <LI><a href="#[1b7]">isr_event_handler</a>
 <LI><a href="#[29e]">isr_event_handler_scan_data_ucfg</a>
 <LI><a href="#[1b8]">isr_postproc</a>
 <LI><a href="#[29c]">isr_postproc1</a>
 <LI><a href="#[297]">isr_postproc_encrypt_data</a>
 <LI><a href="#[d2]">machine_time_trans</a>
 <LI><a href="#[20b]">mem_alloc_ctx_init</a>
 <LI><a href="#[239]">microseconds_to_machine_time</a>
 <LI><a href="#[232]">modulo_37</a>
 <LI><a href="#[189]">nsar_init</a>
 <LI><a href="#[1b6]">read_rssi</a>
 <LI><a href="#[181]">schedule_advertise_slot</a>
 <LI><a href="#[20e]">secure_connections_csr_ucfg</a>
 <LI><a href="#[21e]">setGapAdvData</a>
 <LI><a href="#[d1]">set_freq</a>
 <LI><a href="#[22f]">set_sca</a>
 <LI><a href="#[236]">set_string</a>
 <LI><a href="#[92]">slave_advance</a>
 <LI><a href="#[1e3]">sma_CMAC_generate_tag</a>
 <LI><a href="#[2ba]">smp_Execute_Actions_wrt_Current_State_MI_excerpt_ucfg</a>
 <LI><a href="#[2bb]">smp_Execute_Actions_wrt_Current_State_sc_excerpt_phase2as2_ucfg</a>
 <LI><a href="#[2bf]">smp_Execute_Actions_wrt_Current_State_sc_excerpt_phase_1_to_2_ucfg</a>
 <LI><a href="#[2c2]">smp_MI_Start_Encryption_ucfg</a>
 <LI><a href="#[1d9]">smp_Process_Rx_Packet_Exception_Cases_sc_excerpt_ucfg</a>
 <LI><a href="#[2cd]">smp_Process_Rx_Packet_wrt_Current_State_MI_excerpt_ucfg</a>
 <LI><a href="#[2c7]">smp_Process_Rx_Packet_wrt_Current_State_sc_excerpt_ucfg</a>
 <LI><a href="#[2d1]">smp_add_pairing_record_to_bonding_database</a>
 <LI><a href="#[1d3]">smp_find_remote_device_index</a>
 <LI><a href="#[1e2]">smp_get_CSRK</a>
 <LI><a href="#[2c3]">smp_get_local_identity_address</a>
 <LI><a href="#[2c1]">smp_keys_distribution_start</a>
 <LI><a href="#[2c8]">smp_keys_receiving</a>
 <LI><a href="#[2d5]">smp_oob_check_is_remote_data_present</a>
 <LI><a href="#[2d8]">smp_pairing_2octets_packet_send</a>
 <LI><a href="#[2be]">smp_pairing_completed</a>
 <LI><a href="#[1d8]">smp_pairing_failed_receive</a>
 <LI><a href="#[2cc]">smp_pairing_failed_send</a>
 <LI><a href="#[2da]">smp_repeated_attacks_protection</a>
 <LI><a href="#[2cf]">smp_sc_SR_PairingConfirm_Receive_sc_excerpt_ucfg</a>
 <LI><a href="#[2d0]">smp_sc_SR_PairingRandom_Receive_sc_excerpt_ucfg</a>
 <LI><a href="#[2c0]">smp_sc_SR_Pairing_Phase_2AS1_Start_sc_excerpt_ucfg</a>
 <LI><a href="#[1d0]">smp_sc_check_for_ecc_pk_generation_request_ucfg</a>
 <LI><a href="#[2d4]">smp_sc_continue_on_exclusive_sc_pairing_ucfg</a>
 <LI><a href="#[292]">smp_sc_hci_le_generate_dhkey_complete_evt_hndl_ucfg</a>
 <LI><a href="#[293]">smp_sc_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg</a>
 <LI><a href="#[1cf]">smp_sc_init_ucfg</a>
 <LI><a href="#[2db]">smp_sc_update_statistics_on_pairing_complete_ucfg</a>
 <LI><a href="#[2c4]">smp_send_packet</a>
 <LI><a href="#[2b4]">start_timebase</a>
 <LI><a href="#[20c]">state_func_call_init_csr_ucfg</a>
 <LI><a href="#[14f]">store_data</a>
 <LI><a href="#[233]">swap_slaves</a>
 <LI><a href="#[204]">system_time_trans</a>
 <LI><a href="#[203]">system_time_trans_ext</a>
 <LI><a href="#[231]">time_offset1</a>
 <LI><a href="#[235]">time_offset2</a>
 <LI><a href="#[282]">timebase_start_connect</a>
 <LI><a href="#[29a]">unpack_channel_map</a>
 <LI><a href="#[299]">unpack_update_request</a>
 <LI><a href="#[224]">_aci_gap_set_discoverable_param_check</a>
 <LI><a href="#[21f]">_load_uuid</a>
 <LI><a href="#[c1]">BlueNRG_Stack_Initialize_ConfigData</a>
 <LI><a href="#[c2]">BlueNRG_Stack_Initialize_Layers</a>
 <LI><a href="#[bf]">BlueNRG_Stack_Initialize_RAM_check</a>
 <LI><a href="#[b0]">BlueNRG_Stack_Perform_Crystal_Check</a>
 <LI><a href="#[d0]">BlueNRG_Start_Crystal_Measurement</a>
 <LI><a href="#[2]">isr_advertise_state</a>
 <LI><a href="#[3]">isr_connect_slave_state</a>
 <LI><a href="#[5]">isr_test_rx_state</a>
 <LI><a href="#[4]">isr_test_tx_state</a>
 <LI><a href="#[1]">isr_unknown_state</a>
 <LI><a href="#[222]">fifoBuf_getFreeHeader</a>
 <LI><a href="#[f4]">fifoCtrl_init</a>
 <LI><a href="#[110]">_GAP_Parse_Advertising_Report</a>
 <LI><a href="#[113]">aci_gap_limited_discoverable_event_push</a>
 <LI><a href="#[106]">aci_gap_proc_complete_event_push</a>
 <LI><a href="#[126]">GATT_Server_Set_Flag</a>
 <LI><a href="#[139]">Gatt_Flush_Pending_AclPacket_Lists</a>
 <LI><a href="#[13a]">Gatt_Reset_To_Closed_State</a>
 <LI><a href="#[145]">Gatt_Store_Server_Database_And_Reset_CCCD</a>
 <LI><a href="#[152]">Pm_Resize_Host_Acl_Pckt</a>
 <LI><a href="#[1b2]">aci_gatt_indication_event_push</a>
 <LI><a href="#[1b3]">aci_gatt_notification_event_push</a>
 <LI><a href="#[14a]">aci_hal_fw_error_event_push</a>
 <LI><a href="#[200]">TimerCallback</a>
 <LI><a href="#[15e]">L2C_Get_Connection_Info</a>
 <LI><a href="#[173]">L2C_Get_Connection_Info_Index</a>
 <LI><a href="#[164]">L2C_Mux_Acl_Packet</a>
 <LI><a href="#[167]">L2C_Rcv_Data</a>
 <LI><a href="#[172]">L2C_Reset_To_Closed_State</a>
 <LI><a href="#[16c]">L2C_discard_accumulated_acl_data</a>
 <LI><a href="#[175]">aci_l2cap_connection_update_req_event_push</a>
 <LI><a href="#[286]">hci_encryption_change_event_push</a>
 <LI><a href="#[287]">hci_encryption_key_refresh_complete_event_push</a>
 <LI><a href="#[288]">hci_le_connection_complete_event_push</a>
 <LI><a href="#[289]">hci_le_connection_update_complete_event_push</a>
 <LI><a href="#[ee]">Mem_assign</a>
 <LI><a href="#[226]">adapt_slot</a>
 <LI><a href="#[228]">nsar_insertSlotListEntry</a>
 <LI><a href="#[229]">nsar_searchBestFreeSlot</a>
 <LI><a href="#[2ae]">nsar_updateBestFreeSlot</a>
 <LI><a href="#[227]">nsar_updateSlotListEntry</a>
 <LI><a href="#[23d]">swap_u16</a>
 <LI><a href="#[1a0]">PM_Check_And_Set</a>
 <LI><a href="#[2a2]">wait_for_aes_ready</a>
 <LI><a href="#[22a]">addr_u32_from_u8</a>
 <LI><a href="#[22c]">le2ByteToInt16</a>
 <LI><a href="#[22b]">le4ByteToInt32</a>
 <LI><a href="#[17b]">LL_Set_DirectAddress</a>
 <LI><a href="#[18c]">addr_u32_from_u8</a>
 <LI><a href="#[185]">int32ToLe4Byte</a>
 <LI><a href="#[22d]">le4ByteToInt32</a>
 <LI><a href="#[182]">wait_for_prescheduled_slot_cancellation</a>
 <LI><a href="#[187]">convert_power</a>
 <LI><a href="#[2e2]">swap_u16</a>
 <LI><a href="#[2e1]">swap_u32</a>
 <LI><a href="#[2e0]">swap_u8</a>
 <LI><a href="#[ef]">Erase_Sector</a>
 <LI><a href="#[1c9]">Write_Client_Data</a>
 <LI><a href="#[209]">int32ToLe4Byte</a>
 <LI><a href="#[1c0]">sdb_delete</a>
 <LI><a href="#[1ca]">sdb_find_client_data</a>
 <LI><a href="#[208]">sdb_get_gatt_db_start_address</a>
 <LI><a href="#[1c1]">sdb_invalidate_record</a>
 <LI><a href="#[1bf]">sdb_read_record</a>
 <LI><a href="#[1be]">sdb_read_record_validity</a>
 <LI><a href="#[1c2]">sdb_write_record</a>
 <LI><a href="#[2c6]">int32ToLe4Byte</a>
 <LI><a href="#[2d3]">smp_Build_AuthReq_Field</a>
 <LI><a href="#[2d7]">smp_Build_Pairing_ReqResp_Packet</a>
 <LI><a href="#[2d2]">smp_Check_Incoming_Pairing_Parameters</a>
 <LI><a href="#[2b9]">smp_Determine_Key_Association_Method</a>
 <LI><a href="#[1d6]">smp_Execute_Actions_wrt_Current_State</a>
 <LI><a href="#[1d1]">smp_Get_Long_Term_Key</a>
 <LI><a href="#[2d6]">smp_Get_Pairing_Parameters_From_Peer_Packet</a>
 <LI><a href="#[2bd]">smp_Keys_Distribution_Send</a>
 <LI><a href="#[2c5]">smp_LP_SR_Compute_c1_Confirm_Value</a>
 <LI><a href="#[1d7]">smp_Process_Rx_Packet_wrt_Current_State</a>
 <LI><a href="#[2ce]">smp_Set_Key_Association_Method</a>
 <LI><a href="#[2ca]">smp____SR_PairingConfirm_Receive</a>
 <LI><a href="#[2cb]">smp____SR_PairingRandom_Receive</a>
 <LI><a href="#[2c9]">smp____SR_PairingRequest_Receive</a>
 <LI><a href="#[1de]">SMP_connection_complete_handler</a>
 <LI><a href="#[223]">aci_gap_authorization_req_event_push</a>
 <LI><a href="#[1db]">aci_gap_pairing_complete_event_push</a>
 <LI><a href="#[1dd]">smp_Keys_Distribution_Complete</a>
 <LI><a href="#[1df]">smp_flush_rx_queues</a>
 <LI><a href="#[2d9]">smp_pairing_process_abort</a>
 <LI><a href="#[1dc]">smp_update_statistics_on_pairing_complete</a>
 <LI><a href="#[83]">ATT_fill_type_val_entry</a>
 <LI><a href="#[85]">ATT_validate_prepare_req</a>
 <LI><a href="#[100]">Pm_Resize_Host_Acl_Pckt</a>
 <LI><a href="#[fb]">aci_gatt_attribute_modified_event_push</a>
 <LI><a href="#[1bc]">aci_gatt_read_multi_permit_req_event_push</a>
 <LI><a href="#[1ba]">aci_gatt_read_permit_req_event_push</a>
 <LI><a href="#[20a]">aci_gatt_write_permit_req_event_push</a>
 <LI><a href="#[1e4]">sma_Calculate_Hash</a>
 <LI><a href="#[2b7]">sma_generate_subkeys</a>
 <LI><a href="#[2b8]">sma_left_shift</a>
</UL>
</UL>
<P>
<H3>
Mutually Recursive functions
</H3> <LI><a href="#[8]">HardFault_Handler</a>&nbsp;&nbsp;&nbsp;&rArr;&nbsp;&nbsp;&nbsp;<a href="#[8]">HardFault_Handler</a><BR>
</UL>
<P>
<H3>
Function Pointers
</H3><UL>
 <LI><a href="#[12]">ADC_Handler</a> from system_bluenrg1.o(i.ADC_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[10]">Blue_Handler</a> from bluenrg1_it.o(i.Blue_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[1b]">DMA_Handler</a> from system_bluenrg1.o(i.DMA_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[c]">GPIO_Handler</a> from bluenrg1_it.o(i.GPIO_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[8]">HardFault_Handler</a> from bluenrg1_it.o(i.HardFault_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[14]">I2C1_Handler</a> from system_bluenrg1.o(i.I2C1_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[13]">I2C2_Handler</a> from system_bluenrg1.o(i.I2C2_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[15]">MFT1A_Handler</a> from system_bluenrg1.o(i.MFT1A_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[16]">MFT1B_Handler</a> from system_bluenrg1.o(i.MFT1B_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[17]">MFT2A_Handler</a> from system_bluenrg1.o(i.MFT2A_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[18]">MFT2B_Handler</a> from system_bluenrg1.o(i.MFT2B_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[7]">NMI_Handler</a> from bluenrg1_it.o(i.NMI_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[d]">NVM_Handler</a> from system_bluenrg1.o(i.NVM_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[1a]">PKA_Handler</a> from system_bluenrg1.o(i.PKA_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[a]">PendSV_Handler</a> from system_bluenrg1.o(i.PendSV_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[6]">RESET_HANDLER</a> from system_bluenrg1.o(i.RESET_HANDLER) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[19]">RTC_Handler</a> from system_bluenrg1.o(i.RTC_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[f]">SPI_Handler</a> from system_bluenrg1.o(i.SPI_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[9]">SVC_Handler</a> from bluenrg1_it.o(i.SVC_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[b]">SysTick_Handler</a> from bluenrg1_it.o(i.SysTick_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[e]">UART_Handler</a> from bluenrg1_it.o(i.UART_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[11]">WDG_Handler</a> from system_bluenrg1.o(i.WDG_Handler) referenced from system_bluenrg1.o(.intvec)
 <LI><a href="#[42]">cb_aci_att_exchange_mtu_resp_event</a> from aci_events.o(i.cb_aci_att_exchange_mtu_resp_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[4c]">cb_aci_att_exec_write_resp_event</a> from aci_events.o(i.cb_aci_att_exec_write_resp_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[44]">cb_aci_att_find_by_type_value_resp_event</a> from aci_events.o(i.cb_aci_att_find_by_type_value_resp_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[43]">cb_aci_att_find_info_resp_event</a> from aci_events.o(i.cb_aci_att_find_info_resp_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[4b]">cb_aci_att_prepare_write_resp_event</a> from aci_events.o(i.cb_aci_att_prepare_write_resp_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[47]">cb_aci_att_read_blob_resp_event</a> from aci_events.o(i.cb_aci_att_read_blob_resp_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[49]">cb_aci_att_read_by_group_type_resp_event</a> from aci_events.o(i.cb_aci_att_read_by_group_type_resp_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[45]">cb_aci_att_read_by_type_resp_event</a> from aci_events.o(i.cb_aci_att_read_by_type_resp_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[48]">cb_aci_att_read_multiple_resp_event</a> from aci_events.o(i.cb_aci_att_read_multiple_resp_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[46]">cb_aci_att_read_resp_event</a> from aci_events.o(i.cb_aci_att_read_resp_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[4a]">cb_aci_att_write_resp_event</a> from aci_events.o(i.cb_aci_att_write_resp_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[38]">cb_aci_gap_addr_not_resolved_event</a> from aci_events.o(i.cb_aci_gap_addr_not_resolved_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[33]">cb_aci_gap_authorization_req_event</a> from aci_events.o(i.cb_aci_gap_authorization_req_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[35]">cb_aci_gap_bond_lost_event</a> from aci_events.o(i.cb_aci_gap_bond_lost_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[36]">cb_aci_gap_device_found_event</a> from aci_events.o(i.cb_aci_gap_device_found_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[3a]">cb_aci_gap_keypress_notification_event</a> from aci_events.o(i.cb_aci_gap_keypress_notification_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[30]">cb_aci_gap_limited_discoverable_event</a> from aci_events.o(i.cb_aci_gap_limited_discoverable_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[39]">cb_aci_gap_numeric_comparison_value_event</a> from aci_events.o(i.cb_aci_gap_numeric_comparison_value_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[31]">cb_aci_gap_pairing_complete_event</a> from aci_events.o(i.cb_aci_gap_pairing_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[32]">cb_aci_gap_pass_key_req_event</a> from aci_events.o(i.cb_aci_gap_pass_key_req_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[37]">cb_aci_gap_proc_complete_event</a> from aci_events.o(i.cb_aci_gap_proc_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[34]">cb_aci_gap_slave_security_initiated_event</a> from aci_events.o(i.cb_aci_gap_slave_security_initiated_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[40]">cb_aci_gatt_attribute_modified_event</a> from aci_events.o(i.cb_aci_gatt_attribute_modified_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[51]">cb_aci_gatt_disc_read_char_by_uuid_resp_event</a> from aci_events.o(i.cb_aci_gatt_disc_read_char_by_uuid_resp_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[50]">cb_aci_gatt_error_resp_event</a> from aci_events.o(i.cb_aci_gatt_error_resp_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[4d]">cb_aci_gatt_indication_event</a> from aci_events.o(i.cb_aci_gatt_indication_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[4e]">cb_aci_gatt_notification_event</a> from aci_events.o(i.cb_aci_gatt_notification_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[53]">cb_aci_gatt_prepare_write_permit_req_event</a> from aci_events.o(i.cb_aci_gatt_prepare_write_permit_req_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[4f]">cb_aci_gatt_proc_complete_event</a> from aci_events.o(i.cb_aci_gatt_proc_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[41]">cb_aci_gatt_proc_timeout_event</a> from aci_events.o(i.cb_aci_gatt_proc_timeout_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[55]">cb_aci_gatt_read_multi_permit_req_event</a> from aci_events.o(i.cb_aci_gatt_read_multi_permit_req_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[54]">cb_aci_gatt_read_permit_req_event</a> from aci_events.o(i.cb_aci_gatt_read_permit_req_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[57]">cb_aci_gatt_server_confirmation_event</a> from aci_events.o(i.cb_aci_gatt_server_confirmation_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[56]">cb_aci_gatt_tx_pool_available_event</a> from aci_events.o(i.cb_aci_gatt_tx_pool_available_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[52]">cb_aci_gatt_write_permit_req_event</a> from aci_events.o(i.cb_aci_gatt_write_permit_req_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[3f]">cb_aci_hal_fw_error_event</a> from aci_events.o(i.cb_aci_hal_fw_error_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[2d]">cb_aci_hal_scan_req_report_event</a> from aci_events.o(i.cb_aci_hal_scan_req_report_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[3e]">cb_aci_l2cap_command_reject_event</a> from aci_events.o(i.cb_aci_l2cap_command_reject_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[3d]">cb_aci_l2cap_connection_update_req_event</a> from aci_events.o(i.cb_aci_l2cap_connection_update_req_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[3b]">cb_aci_l2cap_connection_update_resp_event</a> from aci_events.o(i.cb_aci_l2cap_connection_update_resp_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[3c]">cb_aci_l2cap_proc_timeout_event</a> from aci_events.o(i.cb_aci_l2cap_proc_timeout_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[29]">cb_hci_data_buffer_overflow_event</a> from aci_events.o(i.cb_hci_data_buffer_overflow_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[1e]">cb_hci_disconnection_complete_event</a> from aci_events.o(i.cb_hci_disconnection_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[1f]">cb_hci_encryption_change_event</a> from aci_events.o(i.cb_hci_encryption_change_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[20]">cb_hci_encryption_key_refresh_complete_event</a> from aci_events.o(i.cb_hci_encryption_key_refresh_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[23]">cb_hci_le_advertising_report_event</a> from aci_events.o(i.cb_hci_le_advertising_report_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[21]">cb_hci_le_connection_complete_event</a> from aci_events.o(i.cb_hci_le_connection_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[2b]">cb_hci_le_connection_update_complete_event</a> from aci_events.o(i.cb_hci_le_connection_update_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[24]">cb_hci_le_data_length_change_event</a> from aci_events.o(i.cb_hci_le_data_length_change_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[28]">cb_hci_le_direct_advertising_report_event</a> from aci_events.o(i.cb_hci_le_direct_advertising_report_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[27]">cb_hci_le_enhanced_connection_complete_event</a> from aci_events.o(i.cb_hci_le_enhanced_connection_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[26]">cb_hci_le_generate_dhkey_complete_event</a> from aci_events.o(i.cb_hci_le_generate_dhkey_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[22]">cb_hci_le_long_term_key_request_event</a> from aci_events.o(i.cb_hci_le_long_term_key_request_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[25]">cb_hci_le_read_local_p256_public_key_complete_event</a> from aci_events.o(i.cb_hci_le_read_local_p256_public_key_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[2c]">cb_hci_le_read_remote_used_features_complete_event</a> from aci_events.o(i.cb_hci_le_read_remote_used_features_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[2e]">cb_hci_number_of_completed_packets_event</a> from aci_events.o(i.cb_hci_number_of_completed_packets_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[2a]">cb_hci_read_remote_version_information_complete_event</a> from aci_events.o(i.cb_hci_read_remote_version_information_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[2f]">cb_hci_rx_acl_data_event</a> from aci_events.o(i.cb_hci_rx_acl_data_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[1d]">fputc</a> from sdk_eval_com.o(i.fputc) referenced from printf8.o(i.__0printf$8)
 <LI><a href="#[59]">int_cb_hci_acl_data_ind_event</a> from acl.o(i.int_cb_hci_acl_data_ind_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[58]">int_cb_hci_acl_data_tx_cmpl_event</a> from acl.o(i.int_cb_hci_acl_data_tx_cmpl_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[5a]">int_cb_hci_disconnection_complete_event</a> from aci_events.o(i.int_cb_hci_disconnection_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[5b]">int_cb_hci_encryption_change_event</a> from aci_events.o(i.int_cb_hci_encryption_change_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[5c]">int_cb_hci_encryption_key_refresh_complete_event</a> from aci_events.o(i.int_cb_hci_encryption_key_refresh_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[5f]">int_cb_hci_le_advertising_report_event</a> from aci_events.o(i.int_cb_hci_le_advertising_report_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[5d]">int_cb_hci_le_connection_complete_event</a> from aci_events.o(i.int_cb_hci_le_connection_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[60]">int_cb_hci_le_data_length_change_event</a> from aci_events.o(i.int_cb_hci_le_data_length_change_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[64]">int_cb_hci_le_direct_advertising_report_event</a> from aci_events.o(i.int_cb_hci_le_direct_advertising_report_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[63]">int_cb_hci_le_enhanced_connection_complete_event</a> from aci_events.o(i.int_cb_hci_le_enhanced_connection_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[62]">int_cb_hci_le_generate_dhkey_complete_event</a> from aci_events.o(i.int_cb_hci_le_generate_dhkey_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[5e]">int_cb_hci_le_long_term_key_request_event</a> from aci_events.o(i.int_cb_hci_le_long_term_key_request_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[61]">int_cb_hci_le_read_local_p256_public_key_complete_event</a> from aci_events.o(i.int_cb_hci_le_read_local_p256_public_key_complete_event) referenced from aci_events.o(.constdata)
 <LI><a href="#[2]">isr_advertise_state</a> from ll_isr.o(i.isr_advertise_state) referenced 2 times from ll_isr.o(.data)
 <LI><a href="#[3]">isr_connect_slave_state</a> from ll_isr.o(i.isr_connect_slave_state) referenced 2 times from ll_isr.o(.data)
 <LI><a href="#[5]">isr_test_rx_state</a> from ll_isr.o(i.isr_test_rx_state) referenced 2 times from ll_isr.o(.data)
 <LI><a href="#[4]">isr_test_tx_state</a> from ll_isr.o(i.isr_test_tx_state) referenced 2 times from ll_isr.o(.data)
 <LI><a href="#[1]">isr_unknown_state</a> from ll_isr.o(i.isr_unknown_state) referenced 8 times from ll_isr.o(.data)
 <LI><a href="#[1c]">main</a> from ble_beacon_main.o(i.main) referenced from entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P>
<H3>
Global Symbols
</H3>
<P><STRONG><a name="[b8]"></a>CS_contextSave</STRONG> (Thumb, 82 bytes, Stack size 0 bytes, context_switch.o(. text))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_InternalSleep
</UL>

<P><STRONG><a name="[214]"></a>CS_contextRestore</STRONG> (Thumb, 42 bytes, Stack size 0 bytes, context_switch.o(. text))
<BR><BR>[Called By]<UL><LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__low_level_init
</UL>

<P><STRONG><a name="[65]"></a>__main</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry.o(.ARM.Collect$$$$00000000))
<BR><BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_HANDLER
</UL>

<P><STRONG><a name="[2e4]"></a>_main_stk</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry3.o(.ARM.Collect$$$$00000002))

<P><STRONG><a name="[66]"></a>_main_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Calls]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[7f]"></a>__main_after_scatterload</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry5.o(.ARM.Collect$$$$00000004))
<BR><BR>[Called By]<UL><LI><a href="#[67]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__scatterload
</UL>

<P><STRONG><a name="[2e5]"></a>_main_clock</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry7b.o(.ARM.Collect$$$$00000008))

<P><STRONG><a name="[2e6]"></a>_main_cpp_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry8b.o(.ARM.Collect$$$$0000000A))

<P><STRONG><a name="[2e7]"></a>_main_init</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry9a.o(.ARM.Collect$$$$0000000B))

<P><STRONG><a name="[2e8]"></a>__rt_final_cpp</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry10a.o(.ARM.Collect$$$$0000000D))

<P><STRONG><a name="[2e9]"></a>__rt_final_exit</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, entry11a.o(.ARM.Collect$$$$0000000F))

<P><STRONG><a name="[2ea]"></a>__aeabi_uidiv</STRONG> (Thumb, 0 bytes, Stack size 12 bytes, uidiv.o(.text), UNUSED)

<P><STRONG><a name="[143]"></a>__aeabi_uidivmod</STRONG> (Thumb, 44 bytes, Stack size 12 bytes, uidiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = __aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBaudrate
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
<LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adapt_slot
</UL>

<P><STRONG><a name="[2eb]"></a>____aeabi_memcpy8$ret$move</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[2ec]"></a>___aeabi_memmove$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[2ed]"></a>___aeabi_memmove8$ret</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[135]"></a>__aeabi_memcpy</STRONG> (Thumb, 66 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[e6]"></a>__aeabi_memcpy4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceConfiguration
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Beaconing
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_add_pairing_record_to_bonding_database
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Determine_Key_Association_Method
</UL>

<P><STRONG><a name="[194]"></a>__aeabi_memmove4</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Block_Copy
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Block_Write
</UL>

<P><STRONG><a name="[19c]"></a>memcpy</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>

<P><STRONG><a name="[2ee]"></a>memmove</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, memmove.o(.text), UNUSED)

<P><STRONG><a name="[69]"></a>__aeabi_memset</STRONG> (Thumb, 14 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>

<P><STRONG><a name="[2ef]"></a>__aeabi_memset4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[2f0]"></a>__aeabi_memset8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[68]"></a>__aeabi_memclr</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
</UL>

<P><STRONG><a name="[21b]"></a>__aeabi_memclr4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
</UL>

<P><STRONG><a name="[2f1]"></a>__aeabi_memclr8</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, memseta.o(.text), UNUSED)

<P><STRONG><a name="[6a]"></a>memset</STRONG> (Thumb, 18 bytes, Stack size 8 bytes, memseta.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = memset
</UL>
<BR>[Calls]<UL><LI><a href="#[69]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memset
</UL>
<BR>[Called By]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>

<P><STRONG><a name="[a1]"></a>strcmp</STRONG> (Thumb, 28 bytes, Stack size 8 bytes, strcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = strcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
</UL>

<P><STRONG><a name="[19b]"></a>memcmp</STRONG> (Thumb, 26 bytes, Stack size 12 bytes, memcmp.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
</UL>

<P><STRONG><a name="[17d]"></a>__aeabi_uread4</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, uread4.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Check_And_Set_Addresses
</UL>

<P><STRONG><a name="[2f2]"></a>__rt_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[2f3]"></a>_uread4</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, uread4.o(.text), UNUSED)

<P><STRONG><a name="[6b]"></a>__aeabi_fadd</STRONG> (Thumb, 162 bytes, Stack size 24 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
<LI><a href="#[6c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[6f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_frsub
</UL>

<P><STRONG><a name="[6e]"></a>__aeabi_fsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_no
</UL>

<P><STRONG><a name="[6f]"></a>__aeabi_frsub</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, fadd.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[278]"></a>__aeabi_fmul</STRONG> (Thumb, 122 bytes, Stack size 16 bytes, fmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __aeabi_fmul
</UL>
<BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_no
</UL>

<P><STRONG><a name="[70]"></a>__aeabi_dadd</STRONG> (Thumb, 328 bytes, Stack size 48 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 104<LI>Call Chain = __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[72]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_lasr
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
</UL>

<P><STRONG><a name="[75]"></a>__aeabi_dsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_dsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[76]"></a>__aeabi_drsub</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, dadd.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __aeabi_drsub &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[77]"></a>__aeabi_dmul</STRONG> (Thumb, 202 bytes, Stack size 72 bytes, dmul.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 128<LI>Call Chain = __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
</UL>

<P><STRONG><a name="[78]"></a>__aeabi_ddiv</STRONG> (Thumb, 234 bytes, Stack size 40 bytes, ddiv.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>

<P><STRONG><a name="[219]"></a>__ARM_scalbn</STRONG> (Thumb, 44 bytes, Stack size 16 bytes, dscalb.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = __ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
</UL>

<P><STRONG><a name="[2f4]"></a>scalbn</STRONG> (Thumb, 0 bytes, Stack size 16 bytes, dscalb.o(.text), UNUSED)

<P><STRONG><a name="[79]"></a>__aeabi_i2d</STRONG> (Thumb, 34 bytes, Stack size 16 bytes, dflti.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_i2d &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[7a]"></a>__aeabi_ui2d</STRONG> (Thumb, 24 bytes, Stack size 16 bytes, dfltui.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 72<LI>Call Chain = __aeabi_ui2d &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
</UL>

<P><STRONG><a name="[279]"></a>__aeabi_f2uiz</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, ffixui.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_no
</UL>

<P><STRONG><a name="[a5]"></a>__aeabi_f2d</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, f2d.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
</UL>

<P><STRONG><a name="[7b]"></a>__aeabi_d2f</STRONG> (Thumb, 56 bytes, Stack size 8 bytes, d2f.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_d2f
</UL>
<BR>[Calls]<UL><LI><a href="#[6d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_float_round
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
</UL>

<P><STRONG><a name="[7c]"></a>__aeabi_uldivmod</STRONG> (Thumb, 96 bytes, Stack size 48 bytes, uldiv.o(.text), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[71]"></a>__aeabi_llsl</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, llshl.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsl
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[2f5]"></a>_ll_shift_l</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llshl.o(.text), UNUSED)

<P><STRONG><a name="[72]"></a>__aeabi_lasr</STRONG> (Thumb, 38 bytes, Stack size 8 bytes, llsshr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_lasr
</UL>
<BR>[Called By]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>

<P><STRONG><a name="[2f6]"></a>_ll_sshift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llsshr.o(.text), UNUSED)

<P><STRONG><a name="[2f7]"></a>__I$use$fp</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, iusefp.o(.text), UNUSED)

<P><STRONG><a name="[6d]"></a>_float_round</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, fepilogue.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
</UL>

<P><STRONG><a name="[6c]"></a>_float_epilogue</STRONG> (Thumb, 114 bytes, Stack size 12 bytes, fepilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = _float_epilogue
</UL>
<BR>[Called By]<UL><LI><a href="#[6b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fadd
</UL>

<P><STRONG><a name="[74]"></a>_double_round</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = _double_round
</UL>
<BR>[Called By]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[73]"></a>_double_epilogue</STRONG> (Thumb, 164 bytes, Stack size 48 bytes, depilogue.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[7e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_clz
<LI><a href="#[71]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsl
<LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
</UL>

<P><STRONG><a name="[2b1]"></a>__aeabi_cdrcmple</STRONG> (Thumb, 38 bytes, Stack size 0 bytes, cdrcmple.o(.text))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[67]"></a>__scatterload</STRONG> (Thumb, 28 bytes, Stack size 0 bytes, init.o(.text))
<BR><BR>[Calls]<UL><LI><a href="#[7f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main_after_scatterload
</UL>
<BR>[Called By]<UL><LI><a href="#[66]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_main_scatterload
</UL>

<P><STRONG><a name="[2f8]"></a>__scatterload_rt2</STRONG> (Thumb, 0 bytes, Stack size 0 bytes, init.o(.text), UNUSED)

<P><STRONG><a name="[7d]"></a>__aeabi_llsr</STRONG> (Thumb, 34 bytes, Stack size 8 bytes, llushr.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
<LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[2f9]"></a>_ll_ushift_r</STRONG> (Thumb, 0 bytes, Stack size 8 bytes, llushr.o(.text), UNUSED)

<P><STRONG><a name="[80]"></a>_dsqrt</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, dsqrt.o(.text))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[74]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_round
<LI><a href="#[7d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_llsr
</UL>
<BR>[Called By]<UL><LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[2fa]"></a>__decompress</STRONG> (Thumb, 0 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[2fb]"></a>__decompress1</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, __dczerorl2.o(.text), UNUSED)

<P><STRONG><a name="[12]"></a>ADC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.ADC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[81]"></a>ATT_fill_error_resp</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, att.o(i.ATT_fill_error_resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ATT_fill_error_resp &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Grp_Type_Resp
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Info_Resp
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchg_Mtu_Resp
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
</UL>

<P><STRONG><a name="[88]"></a>Accu_Handles_Requiring_Auth</STRONG> (Thumb, 110 bytes, Stack size unknown bytes, rom_att.o(i.Accu_Handles_Requiring_Auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Accu_Handles_Requiring_Auth &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_search_handle
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
</UL>

<P><STRONG><a name="[89]"></a>Accu_UuidTypes_Requiring_Auth</STRONG> (Thumb, 234 bytes, Stack size unknown bytes, rom_att.o(i.Accu_UuidTypes_Requiring_Auth))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = Accu_UuidTypes_Requiring_Auth &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
</UL>

<P><STRONG><a name="[c6]"></a>Acl_Init</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, acl.o(i.Acl_Init))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[8b]"></a>Acl_Rcv_Pkt_Handler</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, acl.o(i.Acl_Rcv_Pkt_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
</UL>

<P><STRONG><a name="[8e]"></a>Acl_Transmit_Data</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, acl.o(i.Acl_Transmit_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_slave
<LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_advance
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_no
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_Process_Q
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Data
</UL>

<P><STRONG><a name="[94]"></a>Acl_Tx_Cmpl_Pkt_Handler</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, acl.o(i.Acl_Tx_Cmpl_Pkt_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
</UL>

<P><STRONG><a name="[95]"></a>Add_Service</STRONG> (Thumb, 176 bytes, Stack size 96 bytes, gatt_db.o(i.Add_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 120 + Unknown Stack Size
<LI>Call Chain = Add_Service &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[99]"></a>App_SleepMode_Check</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, ble_beacon_main.o(i.App_SleepMode_Check))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = App_SleepMode_Check &rArr; SdkEvalComUARTBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComUARTBusy
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComIOTxFifoNotEmpty
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Sleep
</UL>

<P><STRONG><a name="[9c]"></a>Att_Check_Perms</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, att.o(i.Att_Check_Perms))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_remote_device_list_item
<LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Permission
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value_Ext
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSecForSignedWrite
</UL>

<P><STRONG><a name="[9f]"></a>Attribute_Modified_CB</STRONG> (Thumb, 588 bytes, Stack size 48 bytes, gatt_db.o(i.Attribute_Modified_CB))
<BR><BR>[Stack]<UL><LI>Max Depth = 328<LI>Call Chain = Attribute_Modified_CB &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2d
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[7b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_d2f
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FromHex
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteRegister
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setChannel
<LI><a href="#[a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ch_no
<LI><a href="#[7a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ui2d
<LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;malloc
<LI><a href="#[a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;free
<LI><a href="#[a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;strcmp
<LI><a href="#[68]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr
</UL>
<BR>[Called By]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_attribute_modified_event
</UL>

<P><STRONG><a name="[a9]"></a>BLEPLAT_get_part_info</STRONG> (Thumb, 32 bytes, Stack size 28 bytes, miscutil.o(i.BLEPLAT_get_part_info))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = BLEPLAT_get_part_info &rArr; HAL_GetPartInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetPartInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_ConfigData
</UL>

<P><STRONG><a name="[e7]"></a>BOR_ConfigSave</STRONG> (Thumb, 54 bytes, Stack size 16 bytes, system_bluenrg1.o(i.BOR_ConfigSave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = BOR_ConfigSave
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceConfiguration
</UL>

<P><STRONG><a name="[ab]"></a>BTLE_StackTick</STRONG> (Thumb, 124 bytes, Stack size unknown bytes, bluenrg_main_func.o(i.BTLE_StackTick))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = BTLE_StackTick &rArr; Timer_ProcessQ &rArr; TimerCallback &rArr; SMP_repeated_attacks_timer_cb &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_Process_Q
<LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_transmit
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ProcessQ
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
<LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Process_Q
<LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_Q
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Process_Q
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Perform_Crystal_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bb]"></a>BlueNRG_Sleep</STRONG> (Thumb, 110 bytes, Stack size 32 bytes, sleep.o(i.BlueNRG_Sleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = BlueNRG_Sleep &rArr; BlueNRG_InternalSleep &rArr; DeviceConfiguration &rArr; BOR_ConfigSave
</UL>
<BR>[Calls]<UL><LI><a href="#[bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTIMER_TimerSleepCheck
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_InternalSleep
<LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SleepMode_Check
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Perform_Deep_Sleep_Check
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[be]"></a>BlueNRG_Stack_Initialization</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, bluenrg_main_func.o(i.BlueNRG_Stack_Initialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = BlueNRG_Stack_Initialization &rArr; _BlueNRG_Stack_Initialization &rArr; BlueNRG_Stack_Initialize_ConfigData &rArr; BLEPLAT_get_part_info &rArr; HAL_GetPartInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_RAM_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[bc]"></a>BlueNRG_Stack_Perform_Deep_Sleep_Check</STRONG> (Thumb, 166 bytes, Stack size unknown bytes, bluenrg_main_func_speed.o(i.BlueNRG_Stack_Perform_Deep_Sleep_Check))
<BR><BR>[Calls]<UL><LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Host_Timer_value
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Sleep
</UL>

<P><STRONG><a name="[10]"></a>Blue_Handler</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, bluenrg1_it.o(i.Blue_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 24 + Unknown Stack Size
<LI>Call Chain = Blue_Handler &rArr; RAL_Isr &rArr; isr_event_handler &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[d5]"></a>Blue_Init_Global</STRONG> (Thumb, 144 bytes, Stack size unknown bytes, routines_support.o(i.Blue_Init_Global))
<BR><BR>[Calls]<UL><LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_Set_Radio_Config_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
</UL>

<P><STRONG><a name="[d6]"></a>Blue_Set_Radio_Config_Data</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, rom_ll_routines_support.o(i.Blue_Set_Radio_Config_Data))
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_Init_Global
</UL>

<P><STRONG><a name="[d8]"></a>Build_Notif_Or_Ind</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, gatt_server.o(i.Build_Notif_Or_Ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Build_Notif_Or_Ind &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value_Ext
</UL>

<P><STRONG><a name="[d9]"></a>CheckSecForSignedWrite</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, att.o(i.CheckSecForSignedWrite))
<BR><BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Check_Perms
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_remote_device_list_item
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
</UL>

<P><STRONG><a name="[136]"></a>Check_Encry_Key_Size</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, rom_gatt_server.o(i.Check_Encry_Key_Size))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Descriptor
</UL>

<P><STRONG><a name="[da]"></a>Check_For_Service_Change</STRONG> (Thumb, 826 bytes, Stack size unknown bytes, gatt_server.o(i.Check_For_Service_Change))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = Check_For_Service_Change &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_read_peer_bonded_data
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ind_Service_Change_Charac
<LI><a href="#[dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_fetch_handle
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Gatt_Client
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
</UL>

<P><STRONG><a name="[9e]"></a>Check_Permission</STRONG> (Thumb, 160 bytes, Stack size unknown bytes, att.o(i.Check_Permission))
<BR><BR>[Calls]<UL><LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_link_status
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_check_encryption_key_size
</UL>
<BR>[Called By]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Check_Perms
</UL>

<P><STRONG><a name="[2a7]"></a>Clock_Init</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, clock.o(i.Clock_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Clock_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ae]"></a>Controller_Process_Q</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, hci.o(i.Controller_Process_Q))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
<LI><a href="#[e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_Offline_Processing_ucfg
<LI><a href="#[e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_u8OfflineProcessing_ucfg
<LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disconnection_Offline_Processing
<LI><a href="#[e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Len_Update_Offline_Processing_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
</UL>

<P><STRONG><a name="[1b]"></a>DMA_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.DMA_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[e4]"></a>Data_Len_Update_Offline_Processing_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_routines.o(i.Data_Len_Update_Offline_Processing_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Process_Q
</UL>

<P><STRONG><a name="[298]"></a>Data_Length_Update_Control_ISR_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_isr.o(i.Data_Length_Update_Control_ISR_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_slave_state
</UL>

<P><STRONG><a name="[2b5]"></a>Delay_With_NOP_Cycles</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, utils.o(i.Delay_With_NOP_Cycles))
<BR><BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_write_record
</UL>

<P><STRONG><a name="[b9]"></a>DeviceConfiguration</STRONG> (Thumb, 298 bytes, Stack size 72 bytes, system_bluenrg1.o(i.DeviceConfiguration))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = DeviceConfiguration &rArr; BOR_ConfigSave
</UL>
<BR>[Calls]<UL><LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetPartInfo
<LI><a href="#[e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_RF_FrontEnd
<LI><a href="#[e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BOR_ConfigSave
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_InternalSleep
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[e9]"></a>Device_Init</STRONG> (Thumb, 88 bytes, Stack size 24 bytes, ble_beacon_main.o(i.Device_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 48 + Unknown Stack Size
<LI>Call Chain = Device_Init &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
<LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_init
<LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[e5]"></a>Disconnection_Offline_Processing</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, ll_routines.o(i.Disconnection_Offline_Processing))
<BR><BR>[Calls]<UL><LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_Disconnection_Req
</UL>
<BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Process_Q
</UL>

<P><STRONG><a name="[ce]"></a>Dynamic_allocator</STRONG> (Thumb, 598 bytes, Stack size unknown bytes, mem_alloc.o(i.Dynamic_allocator))
<BR><BR>[Calls]<UL><LI><a href="#[ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_assign
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_RAM_check
</UL>

<P><STRONG><a name="[cf]"></a>Dynamic_allocator_noRet</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, mem_alloc.o(i.Dynamic_allocator_noRet))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_RAM_check
</UL>

<P><STRONG><a name="[af]"></a>Events_Process_Q</STRONG> (Thumb, 258 bytes, Stack size unknown bytes, aci_events.o(i.Events_Process_Q))
<BR><BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_radio_activity_state_callback_check
<LI><a href="#[f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_hardware_error_event
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
</UL>

<P><STRONG><a name="[cc]"></a>Events_Process_init</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, aci_events.o(i.Events_Process_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Events_Process_init &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_radio_activity_state_init
<LI><a href="#[f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifoCtrl_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[f6]"></a>Exchg_Mtu_Resp</STRONG> (Thumb, 172 bytes, Stack size unknown bytes, att.o(i.Exchg_Mtu_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Exchg_Mtu_Resp &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_fill_error_resp
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[f7]"></a>Exec_Write_Resp</STRONG> (Thumb, 438 bytes, Stack size unknown bytes, att.o(i.Exec_Write_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Exec_Write_Resp &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_fill_error_resp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_search_handle
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_first
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_attribute_modified_event_push
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_validate_prepare_req
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[f0]"></a>FLASH_ErasePage</STRONG> (Thumb, 34 bytes, Stack size 4 bytes, bluenrg1_flash.o(i.FLASH_ErasePage))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_ErasePage
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitCmdDone
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnection_complete_event
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_delete
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Erase_Sector
</UL>

<P><STRONG><a name="[2e3]"></a>FLASH_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bluenrg1_flash.o(i.FLASH_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
</UL>

<P><STRONG><a name="[fe]"></a>FLASH_ProgramWord</STRONG> (Thumb, 38 bytes, Stack size 4 bytes, bluenrg1_flash.o(i.FLASH_ProgramWord))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = FLASH_ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_WaitCmdDone
</UL>
<BR>[Called By]<UL><LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Flash_Store_Data
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
<LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnection_complete_event
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDD_Initialize_Device_IDs
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_invalidate_record
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Flagged
</UL>

<P><STRONG><a name="[27e]"></a>FLASH_ReadByte</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bluenrg1_flash.o(i.FLASH_ReadByte))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_data_read
</UL>

<P><STRONG><a name="[27b]"></a>FLASH_ReadWord</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, bluenrg1_flash.o(i.FLASH_ReadWord))
<BR><BR>[Called By]<UL><LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_data_read
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check
</UL>

<P><STRONG><a name="[fd]"></a>FLASH_WaitCmdDone</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bluenrg1_flash.o(i.FLASH_WaitCmdDone))
<BR><BR>[Called By]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>

<P><STRONG><a name="[de]"></a>Find_Attr_Index</STRONG> (Thumb, 70 bytes, Stack size unknown bytes, gatt_server.o(i.Find_Attr_Index))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_For_Service_Change
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Store_Server_Database_And_Reset_CCCD
</UL>

<P><STRONG><a name="[ff]"></a>Find_By_Type_Val_Resp</STRONG> (Thumb, 482 bytes, Stack size unknown bytes, att.o(i.Find_By_Type_Val_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = Find_By_Type_Val_Resp &rArr; PM_Pckt_Cmp &rArr; Mem_Buff_Cmp &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Check_Perms
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_fill_error_resp
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
<LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Pckt_Cmp
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pm_Resize_Host_Acl_Pckt
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_fill_type_val_entry
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[dd]"></a>Find_Gatt_Client</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, gatt_client.o(i.Find_Gatt_Client))
<BR><BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler_ISR
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_For_Service_Change
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Store_Server_Database_And_Reset_CCCD
</UL>

<P><STRONG><a name="[102]"></a>Find_Info_Resp</STRONG> (Thumb, 488 bytes, Stack size unknown bytes, att.o(i.Find_Info_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Find_Info_Resp &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_fill_error_resp
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pm_Resize_Host_Acl_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[12d]"></a>Find_Timed_Out_Connection</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, gatt_server.o(i.Find_Timed_Out_Connection))
<BR><BR>[Called By]<UL><LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_TimeOut_Handler
</UL>

<P><STRONG><a name="[103]"></a>Flash_Write_Flagged</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, nvm.o(i.Flash_Write_Flagged))
<BR><BR>[Stack]<UL><LI>Max Depth = 4 + Unknown Stack Size
<LI>Call Chain = Flash_Write_Flagged &rArr; FLASH_ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
</UL>
<BR>[Called By]<UL><LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_write_record
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
</UL>

<P><STRONG><a name="[a2]"></a>FromHex</STRONG> (Thumb, 146 bytes, Stack size 4 bytes, gatt_db.o(i.FromHex))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = FromHex &rArr; __ARM_common_switch8
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
</UL>

<P><STRONG><a name="[105]"></a>GAP_Connection_Complete_Handler</STRONG> (Thumb, 100 bytes, Stack size unknown bytes, gap.o(i.GAP_Connection_Complete_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAP_Connection_Complete_Handler &rArr; aci_gap_proc_complete_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LL_Event_Handler_ISR
</UL>

<P><STRONG><a name="[201]"></a>GAP_DiscProcTimeoutcb_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, gap.o(i.GAP_DiscProcTimeoutcb_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[107]"></a>GAP_Init</STRONG> (Thumb, 488 bytes, Stack size unknown bytes, gap.o(i.GAP_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAP_Init &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[10b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_enable_controller_privacy_ucfg
<LI><a href="#[10a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_check_and_set_role_ucfg
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDD_Initialize_Device_IDs
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_StaticRandAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_init
</UL>

<P><STRONG><a name="[c9]"></a>GAP_Init_Context</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, gap.o(i.GAP_Init_Context))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[10f]"></a>GAP_LL_Event_Handler_ISR</STRONG> (Thumb, 98 bytes, Stack size unknown bytes, gap.o(i.GAP_LL_Event_Handler_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAP_LL_Event_Handler_ISR &rArr; GAP_Connection_Complete_Handler &rArr; aci_gap_proc_complete_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Connection_Complete_Handler
<LI><a href="#[110]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_GAP_Parse_Advertising_Report
</UL>
<BR>[Called By]<UL><LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_cb_hci_le_enhanced_connection_complete_event
<LI><a href="#[64]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_cb_hci_le_direct_advertising_report_event
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_cb_hci_le_connection_complete_event
<LI><a href="#[5f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_cb_hci_le_advertising_report_event
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_cb_hci_disconnection_complete_event
</UL>

<P><STRONG><a name="[111]"></a>GAP_LimDiscTimeoutcb</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, gap.o(i.GAP_LimDiscTimeoutcb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GAP_LimDiscTimeoutcb &rArr; LL_Enable_Disable_Adv &rArr; wait_for_prescheduled_slot_cancellation &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_limited_discoverable_event_push
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Adv
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[114]"></a>GAP_Notify_Add_Charac</STRONG> (Thumb, 106 bytes, Stack size unknown bytes, rom_gap_rom.o(i.GAP_Notify_Add_Charac))
<BR><BR>[Calls]<UL><LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Get_Number_Of_Valid_Records
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Num_Charac_Present
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
</UL>

<P><STRONG><a name="[117]"></a>GAP_Privacy1v2</STRONG> (Thumb, 466 bytes, Stack size unknown bytes, rom_gap.o(i.GAP_Privacy1v2))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = GAP_Privacy1v2 &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Generate_Resolvable_Private_Address
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_ScanAddress
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_AdvAddress
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Allow_Address_Setting
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generate_Non_Resolvable_Private_Address
</UL>
<BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
</UL>

<P><STRONG><a name="[11f]"></a>GAP_PrivateAddrTimercb</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, rom_gap.o(i.GAP_PrivateAddrTimercb))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = GAP_PrivateAddrTimercb &rArr; GAP_Privacy1v2 &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_advertiser
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy1v2
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[b2]"></a>GAP_Process_Q</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, gap.o(i.GAP_Process_Q))
<BR><BR>[Calls]<UL><LI><a href="#[122]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_discover_peer_name_ucfg
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_limited_discoverable_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
</UL>

<P><STRONG><a name="[123]"></a>GAP_Set_Discoverable_Mode</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, gap.o(i.GAP_Set_Discoverable_Mode))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = GAP_Set_Discoverable_Mode &rArr; _gap_set_discoverable_connectable &rArr; GAP_Privacy1v2 &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
</UL>
<BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
</UL>

<P><STRONG><a name="[10a]"></a>GAP_check_and_set_role_ucfg</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, gap.o(i.GAP_check_and_set_role_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[122]"></a>GAP_discover_peer_name_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, gap.o(i.GAP_discover_peer_name_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Process_Q
</UL>

<P><STRONG><a name="[10b]"></a>GAP_enable_controller_privacy_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, gap.o(i.GAP_enable_controller_privacy_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[125]"></a>GATT_Connection_Complete_Handler</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, gatt_server.o(i.GATT_Connection_Complete_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Server_Set_Flag
</UL>
<BR>[Called By]<UL><LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler_ISR
</UL>

<P><STRONG><a name="[115]"></a>GATT_Num_Charac_Present</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, rom_gatt_server.o(i.GATT_Num_Charac_Present))
<BR><BR>[Calls]<UL><LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GAP_Handle
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_search_service_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Notify_Add_Charac
</UL>

<P><STRONG><a name="[129]"></a>GATT_Send_Packet</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, gatt_server.o(i.GATT_Send_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = GATT_Send_Packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Data
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_insert_tail
</UL>
<BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Notif_Or_Ind
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
</UL>

<P><STRONG><a name="[12c]"></a>GATT_TimeOut_Handler</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, gatt_server.o(i.GATT_TimeOut_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[12d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Timed_Out_Connection
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[130]"></a>GPIO_ClearITPendingBit</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bluenrg1_gpio.o(i.GPIO_ClearITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Handler
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_GPIO
</UL>

<P><STRONG><a name="[291]"></a>GPIO_EXTICmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bluenrg1_gpio.o(i.GPIO_EXTICmd))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_GPIO
</UL>

<P><STRONG><a name="[290]"></a>GPIO_EXTIConfig</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, bluenrg1_gpio.o(i.GPIO_EXTIConfig))
<BR><BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_GPIO
</UL>

<P><STRONG><a name="[12e]"></a>GPIO_GetITPendingBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bluenrg1_gpio.o(i.GPIO_GetITPendingBit))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Handler
</UL>

<P><STRONG><a name="[c]"></a>GPIO_Handler</STRONG> (Thumb, 154 bytes, Stack size 8 bytes, bluenrg1_it.o(i.GPIO_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = GPIO_Handler &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[12f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ReadBit
<LI><a href="#[12e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_GetITPendingBit
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearITPendingBit
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[1ec]"></a>GPIO_Init</STRONG> (Thumb, 206 bytes, Stack size 20 bytes, bluenrg1_gpio.o(i.GPIO_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = GPIO_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiInit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComUartInit
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_init
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_GPIO
</UL>

<P><STRONG><a name="[12f]"></a>GPIO_ReadBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bluenrg1_gpio.o(i.GPIO_ReadBit))
<BR><BR>[Called By]<UL><LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Handler
</UL>

<P><STRONG><a name="[2dc]"></a>GPIO_ResetBits</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bluenrg1_gpio.o(i.GPIO_ResetBits))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstWrite
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteRegister
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadRegister
</UL>

<P><STRONG><a name="[1f2]"></a>GPIO_SetBits</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, bluenrg1_gpio.o(i.GPIO_SetBits))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiInit
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstWrite
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteRegister
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadRegister
</UL>

<P><STRONG><a name="[1f1]"></a>GPIO_StructInit</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, bluenrg1_gpio.o(i.GPIO_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiInit
</UL>

<P><STRONG><a name="[28e]"></a>GPIO_WriteBit</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bluenrg1_gpio.o(i.GPIO_WriteBit))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setModeIDLE
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_init
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_GPIO
</UL>

<P><STRONG><a name="[2bc]"></a>GapIsPrivacySupported</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, rom_gap.o(i.GapIsPrivacySupported))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[131]"></a>Gatt_Add_Charac_Desc</STRONG> (Thumb, 346 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Add_Charac_Desc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Gatt_Add_Charac_Desc &rArr; Ind_Service_Change_Charac &rArr; Gatt_Update_Charac_Value_Ext &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Get_Size
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ind_Service_Change_Charac
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_search_service_handle
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_search_handle
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Db_Check
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Descriptor
</UL>
<BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
</UL>

<P><STRONG><a name="[10d]"></a>Gatt_Add_Characteristic</STRONG> (Thumb, 810 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Add_Characteristic))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Gatt_Add_Characteristic &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Charac_Desc
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Node
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Get_Size
<LI><a href="#[127]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_GAP_Handle
<LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Notify_Add_Charac
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Encry_Key_Size
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ind_Service_Change_Charac
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_search_service_handle
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Db_Check
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
</UL>

<P><STRONG><a name="[134]"></a>Gatt_Add_Descriptor</STRONG> (Thumb, 330 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Add_Descriptor))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Gatt_Add_Descriptor &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Node
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
<LI><a href="#[136]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Encry_Key_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Charac_Desc
</UL>

<P><STRONG><a name="[10c]"></a>Gatt_Add_Service</STRONG> (Thumb, 336 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Add_Service))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Gatt_Add_Service &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Node
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
<LI><a href="#[133]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Get_Size
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ind_Service_Change_Charac
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Db_Check
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
<LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
</UL>

<P><STRONG><a name="[1bb]"></a>Gatt_Find_Srv_From_Handle</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Find_Srv_From_Handle))
<BR><BR>[Called By]<UL><LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Grp_Type_Resp
</UL>

<P><STRONG><a name="[86]"></a>Gatt_Find_Srv_Owner_Of_Handle</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Find_Srv_Owner_Of_Handle))
<BR><BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Info_Resp
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accu_UuidTypes_Requiring_Auth
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accu_Handles_Requiring_Auth
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_validate_prepare_req
</UL>

<P><STRONG><a name="[144]"></a>Gatt_Find_Timed_Out_Connection_Index</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Find_Timed_Out_Connection_Index))
<BR><BR>[Called By]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Gatt_Timer
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Gatt_Timer
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
</UL>

<P><STRONG><a name="[b3]"></a>Gatt_Process_Q</STRONG> (Thumb, 402 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Process_Q))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = Gatt_Process_Q &rArr; SMP_check_is_device_bonded &rArr; SDB_Find_Record &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_forget_device_by_conn_handle
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_check_is_device_bonded
<LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Available_Buffer
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Data
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_For_Service_Change
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove_head
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_insert_head
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_is_empty
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
</UL>

<P><STRONG><a name="[132]"></a>Gatt_Server_Db_Check</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Server_Db_Check))
<BR><BR>[Calls]<UL><LI><a href="#[142]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Available_Buffer
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Charac_Desc
</UL>

<P><STRONG><a name="[146]"></a>Gatt_Server_Init</STRONG> (Thumb, 382 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Server_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Gatt_Server_Init &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Server_Set_Flag
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_init
</UL>

<P><STRONG><a name="[148]"></a>Gatt_Server_L2C_Handler</STRONG> (Thumb, 532 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Server_L2C_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Gatt_Server_L2C_Handler &rArr; Start_Gatt_Timer &rArr; Timer_StartOneShot &rArr; Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Gatt_Timer
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Gatt_Timer
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_fill_error_resp
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Notif_Or_Ind
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_push
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Send_Packet
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Gatt_Client
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_insert_tail
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Mux_Acl_Packet
</UL>

<P><STRONG><a name="[14e]"></a>Gatt_Server_L2C_Handler_ISR</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Server_L2C_Handler_ISR))
<BR><BR>[Calls]<UL><LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Connection_Complete_Handler
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Gatt_Client
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Connection_Complete_Handler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
</UL>

<P><STRONG><a name="[10e]"></a>Gatt_Update_Charac_Value</STRONG> (Thumb, 98 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Update_Charac_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Gatt_Update_Charac_Value &rArr; Gatt_Update_Charac_Value_Ext &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value_Ext
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_search_service_handle
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_search_handle
</UL>
<BR>[Called By]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Init
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[151]"></a>Gatt_Update_Charac_Value_Ext</STRONG> (Thumb, 898 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Update_Charac_Value_Ext))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Gatt_Update_Charac_Value_Ext &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Check_Perms
<LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Notif_Or_Ind
<LI><a href="#[128]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_search_service_handle
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_search_handle
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_Notif_Or_Ind
<LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pm_Resize_Host_Acl_Pckt
<LI><a href="#[126]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Server_Set_Flag
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value
<LI><a href="#[df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Ind_Service_Change_Charac
</UL>

<P><STRONG><a name="[dc]"></a>Gatt_fetch_handle</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_fetch_handle))
<BR><BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_For_Service_Change
</UL>

<P><STRONG><a name="[87]"></a>Gatt_search_handle</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_search_handle))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value_Ext
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Charac_Desc
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accu_Handles_Requiring_Auth
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_validate_prepare_req
</UL>

<P><STRONG><a name="[128]"></a>Gatt_search_service_handle</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_search_service_handle))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value_Ext
<LI><a href="#[10e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Charac_Desc
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Num_Charac_Present
</UL>

<P><STRONG><a name="[11b]"></a>Generate_Non_Resolvable_Private_Address</STRONG> (Thumb, 130 bytes, Stack size unknown bytes, rom_gap.o(i.Generate_Non_Resolvable_Private_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = Generate_Non_Resolvable_Private_Address &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy1v2
</UL>

<P><STRONG><a name="[127]"></a>Get_GAP_Handle</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, rom_gap_rom.o(i.Get_GAP_Handle))
<BR><BR>[Called By]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[115]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Num_Charac_Present
</UL>

<P><STRONG><a name="[154]"></a>Get_LedGpioPin</STRONG> (Thumb, 64 bytes, Stack size 8 bytes, sdk_eval_led.o(i.Get_LedGpioPin))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = Get_LedGpioPin
</UL>
<BR>[Calls]<UL><LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalGetVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_GPIO
</UL>

<P><STRONG><a name="[156]"></a>Get_Random_Addr</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, hci.o(i.Get_Random_Addr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Get_Random_Addr &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_advertise_enable
</UL>

<P><STRONG><a name="[109]"></a>Get_StaticRandAddr</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, rom_gap_rom.o(i.Get_StaticRandAddr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Get_StaticRandAddr &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_local_identity_address
</UL>

<P><STRONG><a name="[157]"></a>HAL_Flash_Store_Data</STRONG> (Thumb, 78 bytes, Stack size unknown bytes, hal.o(i.HAL_Flash_Store_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 4 + Unknown Stack Size
<LI>Call Chain = HAL_Flash_Store_Data &rArr; FLASH_ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDD_Initialize_Device_IDs
</UL>

<P><STRONG><a name="[158]"></a>HAL_Generate_Random_Bytes_To</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, hal.o(i.HAL_Generate_Random_Bytes_To))
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number
</UL>
<BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDD_Initialize_Device_IDs
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[aa]"></a>HAL_GetPartInfo</STRONG> (Thumb, 76 bytes, Stack size 12 bytes, miscutil.o(i.HAL_GetPartInfo))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = HAL_GetPartInfo
</UL>
<BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceConfiguration
<LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_InternalSleep
<LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_get_part_info
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__low_level_init
</UL>

<P><STRONG><a name="[210]"></a>HAL_Set_TX_Power_Level</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, hal.o(i.HAL_Set_TX_Power_Level))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_tx_power_level
</UL>

<P><STRONG><a name="[bd]"></a>HAL_VTIMER_TimerSleepCheck</STRONG> (Thumb, 4 bytes, Stack size 0 bytes, sleep.o(i.HAL_VTIMER_TimerSleepCheck))
<BR><BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Sleep
</UL>

<P><STRONG><a name="[205]"></a>HAL_VTimerAcc_sysT32_ms</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, host_timer.o(i.HAL_VTimerAcc_sysT32_ms))
<BR><BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot
</UL>

<P><STRONG><a name="[159]"></a>HAL_VTimerGetCurrentTime_sysT32</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, host_timer.o(i.HAL_VTimerGetCurrentTime_sysT32))
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_sysTime32_convMachineTime
</UL>
<BR>[Called By]<UL><LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIVWHIT_vInit_Struct
</UL>

<P><STRONG><a name="[202]"></a>HAL_VTimerTimeoutCallback</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, host_timer.o(i.HAL_VTimerTimeoutCallback))
<BR><BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[ca]"></a>HCI_Init</STRONG> (Thumb, 114 bytes, Stack size unknown bytes, hci.o(i.HCI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = HCI_Init &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
<LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[153]"></a>Hal_Get_Random_Number</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, hal.o(i.Hal_Get_Random_Number))
<BR><BR>[Called By]<UL><LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number32
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Generate_Random_Bytes_To
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Generate_Resolvable_Private_Address
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generate_Non_Resolvable_Private_Address
</UL>

<P><STRONG><a name="[15b]"></a>Hal_Get_Random_Number32</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, hal.o(i.Hal_Get_Random_Number32))
<BR><BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number
</UL>
<BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc
</UL>

<P><STRONG><a name="[8]"></a>HardFault_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bluenrg1_it.o(i.HardFault_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Called By]<UL><LI><a href="#[8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HardFault_Handler
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[14]"></a>I2C1_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.I2C1_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[13]"></a>I2C2_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.I2C2_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[108]"></a>IDD_Initialize_Device_IDs</STRONG> (Thumb, 278 bytes, Stack size unknown bytes, device_id_data.o(i.IDD_Initialize_Device_IDs))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = IDD_Initialize_Device_IDs &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Generate_Random_Bytes_To
<LI><a href="#[157]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Flash_Store_Data
<LI><a href="#[15c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_Buffer_All_Set_To
</UL>
<BR>[Called By]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>

<P><STRONG><a name="[df]"></a>Ind_Service_Change_Charac</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, gatt_server.o(i.Ind_Service_Change_Charac))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Ind_Service_Change_Charac &rArr; Gatt_Update_Charac_Value_Ext &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value_Ext
</UL>
<BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Charac_Desc
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_For_Service_Change
</UL>

<P><STRONG><a name="[178]"></a>Is_Address_Initialized</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.Is_Address_Initialized))
<BR><BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_advertise_enable
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_le_enhanced_connection_complete_evt_hndl
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Adv_Params
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Check_And_Set_Addresses
</UL>

<P><STRONG><a name="[1b5]"></a>Is_Flash_Write_On_Going</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, nvm.o(i.Is_Flash_Write_On_Going))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>

<P><STRONG><a name="[15d]"></a>L2C_Build_Command_Reject_Pdu</STRONG> (Thumb, 124 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Build_Command_Reject_Pdu))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = L2C_Build_Command_Reject_Pdu &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Get_Connection_Info
<LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Data
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
</UL>

<P><STRONG><a name="[15f]"></a>L2C_Connection_Complete_Handler</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Connection_Complete_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = L2C_Connection_Complete_Handler &rArr; SMP_hci_le_enhanced_connection_complete_evt_hndl &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_le_enhanced_connection_complete_evt_hndl
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_le_connection_complete_evt_hndl
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler_ISR
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
</UL>

<P><STRONG><a name="[163]"></a>L2C_Connection_Complete_Signal_Handler</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Connection_Complete_Signal_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Get_Connection_Info
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler_ISR
</UL>

<P><STRONG><a name="[16b]"></a>L2C_Get_PDU_Len</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Get_PDU_Len))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Data
</UL>

<P><STRONG><a name="[c7]"></a>L2C_Init</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Init))
<BR><BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[16d]"></a>L2C_Rcv_Event_Handler</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Rcv_Event_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = L2C_Rcv_Event_Handler &rArr; L2C_Rcv_Data &rArr; L2C_Mux_Acl_Packet &rArr; SMP_acl_data_hndl &rArr; smp_Keys_Distribution_Complete &rArr; smp_pairing_completed &rArr; smp_add_pairing_record_to_bonding_database &rArr; SDB_Add_Record &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Data
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Mux_Acl_Packet
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_cb_hci_acl_data_tx_cmpl_event
<LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_cb_hci_acl_data_ind_event
</UL>

<P><STRONG><a name="[16e]"></a>L2C_Rcv_Event_Handler_ISR</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Rcv_Event_Handler_ISR))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = L2C_Rcv_Event_Handler_ISR &rArr; SMP_hci_le_long_term_key_request_evt_hndl &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_le_long_term_key_request_evt_hndl
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_encryption_change_evt_hndl
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_disconnection_complete_evt_hndl
<LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler_ISR
<LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Connection_Complete_Handler
<LI><a href="#[14e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler_ISR
</UL>
<BR>[Called By]<UL><LI><a href="#[5e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_cb_hci_le_long_term_key_request_event
<LI><a href="#[63]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_cb_hci_le_enhanced_connection_complete_event
<LI><a href="#[5d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_cb_hci_le_connection_complete_event
<LI><a href="#[5c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_cb_hci_encryption_key_refresh_complete_event
<LI><a href="#[5b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_cb_hci_encryption_change_event
<LI><a href="#[5a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_cb_hci_disconnection_complete_event
</UL>

<P><STRONG><a name="[12a]"></a>L2C_Send_Data</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Transmit_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Build_Command_Reject_Pdu
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Send_Packet
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_2octets_packet_send
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_send_packet
</UL>

<P><STRONG><a name="[174]"></a>L2C_SigChan_Req_TimeOut_Handler</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, l2cap.o(i.L2C_SigChan_Req_TimeOut_Handler))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[165]"></a>L2C_Signal_Channel_Handler</STRONG> (Thumb, 422 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Signal_Channel_Handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = L2C_Signal_Channel_Handler &rArr; L2C_Build_Command_Reject_Pdu &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Build_Command_Reject_Pdu
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_update_req_event_push
<LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Get_Connection_Info_Index
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Mux_Acl_Packet
</UL>

<P><STRONG><a name="[162]"></a>L2C_Signal_Channel_Handler_ISR</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Signal_Channel_Handler_ISR))
<BR><BR>[Calls]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Connection_Complete_Signal_Handler
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Reset_To_Closed_State
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Connection_Complete_Handler
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
</UL>

<P><STRONG><a name="[118]"></a>LL_Allow_Address_Setting</STRONG> (Thumb, 66 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Allow_Address_Setting))
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_advertiser
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_connection
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Address
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy1v2
</UL>

<P><STRONG><a name="[177]"></a>LL_Check_And_Set_Addresses</STRONG> (Thumb, 494 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Check_And_Set_Addresses))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = LL_Check_And_Set_Addresses &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Address_Initialized
<LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_OwnAddress
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_DirectAddress
<LI><a href="#[17a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_vGeneratePrivateAddress_ucfg
<LI><a href="#[179]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIVWHIT_u8SearchAddrInList
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Adv_Params
</UL>

<P><STRONG><a name="[2a0]"></a>LL_Data_Length_Change_Event_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_routines.o(i.LL_Data_Length_Change_Event_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc
</UL>

<P><STRONG><a name="[112]"></a>LL_Enable_Disable_Adv</STRONG> (Thumb, 520 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Enable_Disable_Adv))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = LL_Enable_Disable_Adv &rArr; wait_for_prescheduled_slot_cancellation &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_advertiser
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Advertising_Buffers
<LI><a href="#[180]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Adv_PDU_Format
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_prescheduled_slot_cancellation
<LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_advertise_slot
<LI><a href="#[17e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_next_free_slot
</UL>
<BR>[Called By]<UL><LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_advertise_enable
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LimDiscTimeoutcb
</UL>

<P><STRONG><a name="[183]"></a>LL_Encrypt_Plain_Data_ucfg</STRONG> (Thumb, 144 bytes, Stack size unknown bytes, ll_routines_support.o(i.LL_Encrypt_Plain_Data_ucfg))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = LL_Encrypt_Plain_Data_ucfg &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_encrypt
</UL>

<P><STRONG><a name="[176]"></a>LL_Get_Address</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Get_Address))
<BR><BR>[Calls]<UL><LI><a href="#[185]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32ToLe4Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_le_enhanced_connection_complete_evt_hndl
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_le_connection_complete_evt_hndl
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_LP_SR_Compute_c1_Confirm_Value
<LI><a href="#[17f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Advertising_Buffers
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Allow_Address_Setting
</UL>

<P><STRONG><a name="[119]"></a>LL_Get_AdvAddress</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Get_AdvAddress))
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_advertiser
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy1v2
</UL>

<P><STRONG><a name="[186]"></a>LL_Get_Adv_Tx_Power_Level</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, rom_ll_routines_support.o(i.LL_Get_Adv_Tx_Power_Level))
<BR><BR>[Calls]<UL><LI><a href="#[187]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;convert_power
</UL>
<BR>[Called By]<UL><LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGapAdvData
</UL>

<P><STRONG><a name="[11a]"></a>LL_Get_ScanAddress</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Get_ScanAddress))
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_connection
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy1v2
</UL>

<P><STRONG><a name="[c4]"></a>LL_Init</STRONG> (Thumb, 376 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = LL_Init &rArr; LL_LE_Clear_White_List &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Clear_White_List
<LI><a href="#[d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_Init_Global
<LI><a href="#[189]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nsar_init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[188]"></a>LL_LE_Clear_White_List</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, ll_privacy.o(i.LL_LE_Clear_White_List))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = LL_LE_Clear_White_List &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
</UL>

<P><STRONG><a name="[8f]"></a>LL_Send_ACL_Data</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Send_ACL_Data))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_no
</UL>
<BR>[Called By]<UL><LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Transmit_Data
</UL>

<P><STRONG><a name="[ed]"></a>LL_Send_Disconnection_Req</STRONG> (Thumb, 154 bytes, Stack size unknown bytes, ll_routines.o(i.LL_Send_Disconnection_Req))
<BR><BR>[Calls]<UL><LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_slave
</UL>
<BR>[Called By]<UL><LI><a href="#[e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Disconnection_Offline_Processing
</UL>

<P><STRONG><a name="[2a1]"></a>LL_Send_Length_Resp_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_routines.o(i.LL_Send_Length_Resp_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc
</UL>

<P><STRONG><a name="[18a]"></a>LL_Set_Adv_Data</STRONG> (Thumb, 114 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Set_Adv_Data))
<BR><BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_advertiser
</UL>
<BR>[Called By]<UL><LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_advertising_data
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGapAdvData
</UL>

<P><STRONG><a name="[180]"></a>LL_Set_Adv_PDU_Format</STRONG> (Thumb, 200 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Set_Adv_PDU_Format))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Adv
</UL>

<P><STRONG><a name="[18b]"></a>LL_Set_Adv_Params</STRONG> (Thumb, 326 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Set_Adv_Params))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = LL_Set_Adv_Params &rArr; LL_Check_And_Set_Addresses &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[120]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_advertiser
<LI><a href="#[121]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_connection
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Address_Initialized
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Check_And_Set_Addresses
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
</UL>

<P><STRONG><a name="[17f]"></a>LL_Set_Advertising_Buffers</STRONG> (Thumb, 130 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Set_Advertising_Buffers))
<BR><BR>[Calls]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Address
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Adv
</UL>

<P><STRONG><a name="[18d]"></a>LL_Set_LTK</STRONG> (Thumb, 140 bytes, Stack size unknown bytes, ll_routines_support.o(i.LL_Set_LTK))
<BR><BR>[Calls]<UL><LI><a href="#[90]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_connection_no
</UL>
<BR>[Called By]<UL><LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_long_term_key_requested_negative_reply
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_long_term_key_request_reply
</UL>

<P><STRONG><a name="[17c]"></a>LL_Set_OwnAddress</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Set_OwnAddress))
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_u32_from_u8
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Check_And_Set_Addresses
</UL>

<P><STRONG><a name="[28a]"></a>LL_Set_Scan_Resp_Data</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Set_Scan_Resp_Data))
<BR><BR>[Called By]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_response_data
</UL>

<P><STRONG><a name="[23b]"></a>LL_Sleep_Req</STRONG> (Thumb, 78 bytes, Stack size unknown bytes, bluenrg_main_func_speed.o(i.LL_Sleep_Req))
<BR><BR>[Called By]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_advance
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
</UL>

<P><STRONG><a name="[18e]"></a>LL_Update_Advertising_Buffers</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Update_Advertising_Buffers))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = LL_Update_Advertising_Buffers &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
</UL>

<P><STRONG><a name="[18f]"></a>LL_Update_Scanning_Initiating_Buffers</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Update_Scanning_Initiating_Buffers))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = LL_Update_Scanning_Initiating_Buffers &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
</UL>

<P><STRONG><a name="[190]"></a>LL_receive_data</STRONG> (Thumb, 142 bytes, Stack size unknown bytes, isr_routines.o(i.LL_receive_data))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
<LI><a href="#[191]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_Acl_Data_Indication_Queue_Full
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_slave_state
</UL>

<P><STRONG><a name="[23f]"></a>LL_update_proc</STRONG> (Thumb, 146 bytes, Stack size unknown bytes, rom_ll_isr_routines.o(i.LL_update_proc))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_slave
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_slave_state
</UL>

<P><STRONG><a name="[133]"></a>List_Circular_Get_Size</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, rom_list.o(i.List_Circular_Get_Size))
<BR><BR>[Called By]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Charac_Desc
</UL>

<P><STRONG><a name="[138]"></a>List_Circular_Insert_Tail</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, rom_list.o(i.List_Circular_Insert_Tail))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ProcessQ
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Init
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot_sysTime32
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Descriptor
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
</UL>

<P><STRONG><a name="[192]"></a>List_Circular_Node_Present</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, rom_list.o(i.List_Circular_Node_Present))
<BR><BR>[Called By]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Node
</UL>

<P><STRONG><a name="[207]"></a>List_Circular_Remove_Head</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, rom_list.o(i.List_Circular_Remove_Head))
<BR><BR>[Called By]<UL><LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot_sysTime32
</UL>

<P><STRONG><a name="[137]"></a>List_Circular_Remove_Node</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, rom_list.o(i.List_Circular_Remove_Node))
<BR><BR>[Calls]<UL><LI><a href="#[192]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Node_Present
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ProcessQ
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Descriptor
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
</UL>

<P><STRONG><a name="[15]"></a>MFT1A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.MFT1A_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[16]"></a>MFT1B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.MFT1B_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[17]"></a>MFT2A_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.MFT2A_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[18]"></a>MFT2B_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.MFT2B_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[169]"></a>Mem_Buff_Append</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_Append))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Data
</UL>

<P><STRONG><a name="[193]"></a>Mem_Buff_Block_Copy</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_Block_Copy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Mem_Buff_Block_Copy &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_tx_data_packet
</UL>

<P><STRONG><a name="[195]"></a>Mem_Buff_Block_Write</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_Block_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = Mem_Buff_Block_Write &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[194]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memmove4
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
</UL>

<P><STRONG><a name="[196]"></a>Mem_Buff_Clone</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_Clone))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Mem_Buff_Clone &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Clone_Pckt
</UL>

<P><STRONG><a name="[197]"></a>Mem_Buff_Cmp</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_Cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = Mem_Buff_Cmp &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Pckt_Cmp
</UL>

<P><STRONG><a name="[198]"></a>Mem_Buff_Compact</STRONG> (Thumb, 186 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_Compact))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Mem_Buff_Compact &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Compact
</UL>

<P><STRONG><a name="[1a1]"></a>Mem_Buff_Get</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_Get))
<BR><BR>[Called By]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
</UL>

<P><STRONG><a name="[19e]"></a>Mem_Buff_Get_Chain_Count</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_Get_Chain_Count))
<BR><BR>[Called By]<UL><LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Compact
<LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Mem_Buff_Count
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
</UL>

<P><STRONG><a name="[1a6]"></a>Mem_Buff_Get_Chain_Size</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_Get_Chain_Size))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Resize_Pckt_Pdu_Size
</UL>

<P><STRONG><a name="[1a3]"></a>Mem_Buff_Init</STRONG> (Thumb, 106 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_Init))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Init
</UL>

<P><STRONG><a name="[199]"></a>Mem_Buff_Read</STRONG> (Thumb, 98 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_Read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Mem_Buff_Read &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>

<P><STRONG><a name="[1a4]"></a>Mem_Buff_Release</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_Release))
<BR><BR>[Called By]<UL><LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
</UL>

<P><STRONG><a name="[1a7]"></a>Mem_Buff_Resize</STRONG> (Thumb, 142 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_Resize))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Resize_Pckt_Pdu_Size
</UL>

<P><STRONG><a name="[19a]"></a>Mem_Buff_Write</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, mem_buff.o(i.Mem_Buff_Write))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Mem_Buff_Write &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
</UL>

<P><STRONG><a name="[7]"></a>NMI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bluenrg1_it.o(i.NMI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[28f]"></a>NVIC_Init</STRONG> (Thumb, 124 bytes, Stack size 16 bytes, misc.o(i.NVIC_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = NVIC_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_GPIO
</UL>

<P><STRONG><a name="[d]"></a>NVM_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.NVM_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[8a]"></a>Osal_MemCmp</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, osal.o(i.Osal_MemCmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[19b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcmp
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_repeated_attacks_timer_cb
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_For_Service_Change
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy1v2
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accu_UuidTypes_Requiring_Auth
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_repeated_attacks_protection
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_validate_signed_packet
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_oob_check_is_remote_data_present
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Get_Long_Term_Key
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Resolve_Private_Address
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Add_Record
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_find_client_data
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
<LI><a href="#[11b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Generate_Non_Resolvable_Private_Address
<LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Cmp
</UL>

<P><STRONG><a name="[82]"></a>Osal_MemCpy</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, osal.o(i.Osal_MemCpy))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[19c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value_Ext
<LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_uuid
<LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialization
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Service
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_le_long_term_key_request_evt_hndl
<LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_le_enhanced_connection_complete_evt_hndl
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_discard_accumulated_acl_data
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot_sysTime32
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_flash_write_client_data
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Grp_Type_Resp
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Info_Resp
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchg_Mtu_Resp
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_fill_error_resp
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_data
<LI><a href="#[134]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Descriptor
<LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_For_Service_Change
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_Notif_Or_Ind
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_push
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_notification_event_push
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_indication_event_push
<LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDD_Initialize_Device_IDs
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_StaticRandAddr
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy1v2
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGapAdvData
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advParamsCheckAndSet
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event_push
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Update_Scanning_Initiating_Buffers
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Update_Advertising_Buffers
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt_Plain_Data_ucfg
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Random_Addr
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_Calculate_Hash
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accu_UuidTypes_Requiring_Auth
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accu_Handles_Requiring_Auth
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_multi_permit_req_event_push
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_attribute_modified_event_push
<LI><a href="#[85]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_validate_prepare_req
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_CMAC_generate_tag
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_repeated_attacks_protection
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_CSRK
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_connection_complete_handler
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_local_identity_address
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_add_pairing_record_to_bonding_database
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_LP_s1_Generate_STK
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_LP_SR_Compute_c1_Confirm_Value
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Get_Long_Term_Key
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_generate_EDIV_recovery_DIV
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_get_security_data_record
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Add_Record
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Generate_Resolvable_Private_Address
<LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Write
<LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Read
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Compact
<LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Clone
<LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Check_And_Set_Addresses
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_push
</UL>

<P><STRONG><a name="[f5]"></a>Osal_MemSet</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, osal.o(i.Osal_MemSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[6a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;memset
</UL>
<BR>[Called By]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_HAL_Init
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIVWHIT_vInit_Struct
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Init
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_init
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Init
<LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Protocol_Timer_cb
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Store_Server_Database_And_Reset_CCCD
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
<LI><a href="#[188]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_LE_Clear_White_List
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_Calculate_Hash
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_CMAC_generate_tag
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_process_abort
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_connection_complete_handler
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_completed
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_add_pairing_record_to_bonding_database
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_LP_SR_Compute_c1_Confirm_Value
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Get_Long_Term_Key
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_generate_EDIV_recovery_DIV
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
</UL>

<P><STRONG><a name="[1a]"></a>PKA_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.PKA_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[e3]"></a>PKA_Offline_Processing_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, hci.o(i.PKA_Offline_Processing_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Process_Q
</UL>

<P><STRONG><a name="[20f]"></a>PKA_Reset</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bluenrg1_pka.o(i.PKA_Reset))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[19d]"></a>PM_Clone_Pckt</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, pm.o(i.PM_Clone_Pckt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = PM_Clone_Pckt &rArr; Mem_Buff_Clone &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[196]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Clone
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
</UL>

<P><STRONG><a name="[16a]"></a>PM_Compact</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, pm.o(i.PM_Compact))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = PM_Compact &rArr; Mem_Buff_Compact &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Get_Chain_Count
<LI><a href="#[198]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Compact
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Data
</UL>

<P><STRONG><a name="[fa]"></a>PM_Copy_Pckt_Data</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, pm.o(i.PM_Copy_Pckt_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = PM_Copy_Pckt_Data &rArr; Mem_Buff_Read &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[199]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Read
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Grp_Type_Resp
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_notification_event_push
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_indication_event_push
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_permit_req_event_push
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_CMAC_generate_tag
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_validate_signed_packet
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_keys_receiving
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingConfirm_Receive
</UL>

<P><STRONG><a name="[1a2]"></a>PM_Eng_Config</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, pm.o(i.PM_Eng_Config))
<BR><BR>[Called By]<UL><LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Init
</UL>

<P><STRONG><a name="[168]"></a>PM_Extract_Pdu_MBuff</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, pm.o(i.PM_Extract_Pdu_MBuff))
<BR><BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Data
</UL>

<P><STRONG><a name="[142]"></a>PM_Get_Available_Buffer</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, pm.o(i.PM_Get_Available_Buffer))
<BR><BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
<LI><a href="#[132]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Db_Check
</UL>

<P><STRONG><a name="[19f]"></a>PM_Get_Mem_Buff_Count</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, pm.o(i.PM_Get_Mem_Buff_Count))
<BR><BR>[Calls]<UL><LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Get_Chain_Count
</UL>
<BR>[Called By]<UL><LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove_head
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_insert_head
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_full_on_packt
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_insert_tail
</UL>

<P><STRONG><a name="[14c]"></a>PM_Get_Pckt</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, pm.o(i.PM_Get_Pckt))
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Check_And_Set
<LI><a href="#[1a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Get
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value_Ext
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Build_Command_Reject_Pdu
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_receive_data
<LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_2octets_packet_send
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingConfirm_Receive
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
</UL>

<P><STRONG><a name="[c5]"></a>PM_Init</STRONG> (Thumb, 94 bytes, Stack size unknown bytes, pm.o(i.PM_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = PM_Init &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[1a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Eng_Config
<LI><a href="#[1a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[101]"></a>PM_Pckt_Cmp</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, pm.o(i.PM_Pckt_Cmp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = PM_Pckt_Cmp &rArr; Mem_Buff_Cmp &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[197]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Cmp
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_keys_receiving
</UL>

<P><STRONG><a name="[fc]"></a>PM_Release_Acl_Pckt</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, pm.o(i.PM_Release_Acl_Pckt))
<BR><BR>[Calls]<UL><LI><a href="#[1a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Release
<LI><a href="#[19e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Get_Chain_Count
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
<LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value_Ext
<LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_acl_data_hndl
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Build_Command_Reject_Pdu
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_discard_accumulated_acl_data
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Reset_To_Closed_State
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Data
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Mux_Acl_Packet
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Flush_Pending_AclPacket_Lists
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_acl_data_done
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_flush_rx_queues
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_send_packet
</UL>

<P><STRONG><a name="[1a5]"></a>PM_Resize_Pckt_Pdu_Size</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, pm.o(i.PM_Resize_Pckt_Pdu_Size))
<BR><BR>[Calls]<UL><LI><a href="#[1a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Check_And_Set
<LI><a href="#[1a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Resize
<LI><a href="#[1a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Get_Chain_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[152]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pm_Resize_Host_Acl_Pckt
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pm_Resize_Host_Acl_Pckt
</UL>

<P><STRONG><a name="[84]"></a>PM_Write_Pckt_Data</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, pm.o(i.PM_Write_Pckt_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = PM_Write_Pckt_Data &rArr; Mem_Buff_Write &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[19a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Write
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Grp_Type_Resp
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Info_Resp
<LI><a href="#[d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Build_Notif_Or_Ind
<LI><a href="#[83]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_fill_type_val_entry
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingConfirm_Receive
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
</UL>

<P><STRONG><a name="[179]"></a>PRIVWHIT_u8SearchAddrInList</STRONG> (Thumb, 118 bytes, Stack size unknown bytes, ll_privacy.o(i.PRIVWHIT_u8SearchAddrInList))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Check_And_Set_Addresses
</UL>

<P><STRONG><a name="[1a8]"></a>PRIVWHIT_vInit_Struct</STRONG> (Thumb, 168 bytes, Stack size unknown bytes, ll_privacy.o(i.PRIVWHIT_vInit_Struct))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = PRIVWHIT_vInit_Struct &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerGetCurrentTime_sysT32
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[295]"></a>PRIV_SearchAddrInWhiteList</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, ll_privacy.o(i.PRIV_SearchAddrInWhiteList))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_advertise_state
</UL>

<P><STRONG><a name="[20d]"></a>PRIV_controller_privacy_csr_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, hci.o(i.PRIV_controller_privacy_csr_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[294]"></a>PRIV_u32ProcessAdvPacket_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_privacy.o(i.PRIV_u32ProcessAdvPacket_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_advertise_state
</UL>

<P><STRONG><a name="[e2]"></a>PRIV_u8OfflineProcessing_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, ll_privacy.o(i.PRIV_u8OfflineProcessing_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Process_Q
</UL>

<P><STRONG><a name="[17a]"></a>PRIV_vGeneratePrivateAddress_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_privacy.o(i.PRIV_vGeneratePrivateAddress_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Check_And_Set_Addresses
</UL>

<P><STRONG><a name="[29d]"></a>PRIV_vGenerate_hci_le_enhanced_connection_complete_event_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_privacy.o(i.PRIV_vGenerate_hci_le_enhanced_connection_complete_event_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
</UL>

<P><STRONG><a name="[a]"></a>PendSV_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.PendSV_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[1a9]"></a>Prepare_Write_Resp</STRONG> (Thumb, 368 bytes, Stack size unknown bytes, att.o(i.Prepare_Write_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Prepare_Write_Resp &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Check_Perms
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_fill_error_resp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_search_handle
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
<LI><a href="#[1aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_full_on_packt
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_insert_tail
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pm_Resize_Host_Acl_Pckt
<LI><a href="#[19d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Clone_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[13f]"></a>Process_Peer_Client_Data</STRONG> (Thumb, 496 bytes, Stack size unknown bytes, gatt_server.o(i.Process_Peer_Client_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = Process_Peer_Client_Data &rArr; Write_Cmd &rArr; SMP_validate_signed_packet &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Grp_Type_Resp
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Info_Resp
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchg_Mtu_Resp
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_fill_error_resp
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Send_Packet
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Gatt_Client
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_first
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
</UL>

<P><STRONG><a name="[13d]"></a>Process_Peer_Server_Data</STRONG> (Thumb, 356 bytes, Stack size unknown bytes, gatt_server.o(i.Process_Peer_Server_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Process_Peer_Server_Data &rArr; Start_Gatt_Timer &rArr; Timer_StartOneShot &rArr; Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Gatt_Timer
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Gatt_Timer
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_push
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_notification_event_push
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_indication_event_push
<LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_first
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
</UL>

<P><STRONG><a name="[d4]"></a>RAL_Isr</STRONG> (Thumb, 500 bytes, Stack size unknown bytes, ll_isr.o(i.RAL_Isr))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = RAL_Isr &rArr; isr_event_handler &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;read_rssi
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
<LI><a href="#[1b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ExpiryCallback
<LI><a href="#[1b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Flash_Write_On_Going
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[10]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_Handler
</UL>

<P><STRONG><a name="[6]"></a>RESET_HANDLER</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, system_bluenrg1.o(i.RESET_HANDLER))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = RESET_HANDLER &rArr; main &rArr; BlueNRG_Sleep &rArr; BlueNRG_InternalSleep &rArr; DeviceConfiguration &rArr; BOR_ConfigSave
</UL>
<BR>[Calls]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__low_level_init
<LI><a href="#[65]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__main
</UL>
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[19]"></a>RTC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.RTC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[1ad]"></a>Read_Blob_Resp</STRONG> (Thumb, 320 bytes, Stack size unknown bytes, att.o(i.Read_Blob_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Read_Blob_Resp &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Check_Perms
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_fill_error_resp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_search_handle
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_permit_req_event_push
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pm_Resize_Host_Acl_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[1af]"></a>Read_By_Grp_Type_Resp</STRONG> (Thumb, 472 bytes, Stack size unknown bytes, att.o(i.Read_By_Grp_Type_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Read_By_Grp_Type_Resp &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_fill_error_resp
<LI><a href="#[1bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_From_Handle
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pm_Resize_Host_Acl_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[1ab]"></a>Read_By_Type_Resp</STRONG> (Thumb, 710 bytes, Stack size unknown bytes, att.o(i.Read_By_Type_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = Read_By_Type_Resp &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Check_Perms
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_fill_error_resp
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[89]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accu_UuidTypes_Requiring_Auth
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_multi_permit_req_event_push
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pm_Resize_Host_Acl_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[1ae]"></a>Read_Multi_Resp</STRONG> (Thumb, 396 bytes, Stack size unknown bytes, att.o(i.Read_Multi_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Read_Multi_Resp &rArr; ATT_fill_error_resp &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Check_Perms
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_fill_error_resp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_search_handle
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[88]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Accu_Handles_Requiring_Auth
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_multi_permit_req_event_push
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pm_Resize_Host_Acl_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[1ac]"></a>Read_Resp</STRONG> (Thumb, 298 bytes, Stack size unknown bytes, att.o(i.Read_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Read_Resp &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Check_Perms
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_fill_error_resp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_search_handle
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_permit_req_event_push
<LI><a href="#[100]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Pm_Resize_Host_Acl_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[29f]"></a>Reclassify_All_Channels_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_routines_master.o(i.Reclassify_All_Channels_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
</UL>

<P><STRONG><a name="[1bd]"></a>SDB_Add_Record</STRONG> (Thumb, 384 bytes, Stack size unknown bytes, sdb.o(i.SDB_Add_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = SDB_Add_Record &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_write_record
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_read_record_validity
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_read_record
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_invalidate_record
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_delete
</UL>
<BR>[Called By]<UL><LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_add_pairing_record_to_bonding_database
</UL>

<P><STRONG><a name="[1c3]"></a>SDB_Find_Matching_LTK</STRONG> (Thumb, 154 bytes, Stack size unknown bytes, sdb.o(i.SDB_Find_Matching_LTK))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = SDB_Find_Matching_LTK &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_generate_EDIV_recovery_DIV
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Diversify
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_get_security_data_record
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_read_record_validity
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Get_Long_Term_Key
</UL>

<P><STRONG><a name="[1c7]"></a>SDB_Find_Record</STRONG> (Thumb, 190 bytes, Stack size unknown bytes, sdb.o(i.SDB_Find_Record))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = SDB_Find_Record &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Resolve_Private_Address
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_read_record_validity
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_read_record
</UL>
<BR>[Called By]<UL><LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_check_is_device_bonded
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_read_peer_bonded_data
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[116]"></a>SDB_Get_Number_Of_Valid_Records</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, sdb.o(i.SDB_Get_Number_Of_Valid_Records))
<BR><BR>[Calls]<UL><LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_read_record_validity
</UL>
<BR>[Called By]<UL><LI><a href="#[114]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Notify_Add_Charac
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[150]"></a>SDB_flash_write_client_data</STRONG> (Thumb, 178 bytes, Stack size unknown bytes, sdb.o(i.SDB_flash_write_client_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = SDB_flash_write_client_data &rArr; SM_Resolve_Private_Address &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_remote_device_list_item
<LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Resolve_Private_Address
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_read_record_validity
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_read_record
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_delete
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Store_Server_Database_And_Reset_CCCD
</UL>

<P><STRONG><a name="[1c5]"></a>SDB_get_security_data_record</STRONG> (Thumb, 216 bytes, Stack size unknown bytes, sdb.o(i.SDB_get_security_data_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SDB_get_security_data_record &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
</UL>

<P><STRONG><a name="[db]"></a>SDB_read_peer_bonded_data</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, sdb.o(i.SDB_read_peer_bonded_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = SDB_read_peer_bonded_data &rArr; SDB_Find_Record &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_remote_device_list_item
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_find_client_data
</UL>
<BR>[Called By]<UL><LI><a href="#[da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_For_Service_Change
</UL>

<P><STRONG><a name="[b6]"></a>SET_BORconfigStatus</STRONG> (Thumb, 54 bytes, Stack size 12 bytes, system_bluenrg1.o(i.SET_BORconfigStatus))
<BR><BR>[Stack]<UL><LI>Max Depth = 12<LI>Call Chain = SET_BORconfigStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_InternalSleep
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__low_level_init
</UL>

<P><STRONG><a name="[1c6]"></a>SMA_Diversify</STRONG> (Thumb, 40 bytes, Stack size unknown bytes, smp_algo_sap.o(i.SMA_Diversify))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SMA_Diversify &rArr; hci_le_encrypt &rArr; LL_Encrypt_Plain_Data_ucfg &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Generate_CSRK
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Get_Long_Term_Key
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_generate_EDIV_recovery_DIV
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Generate_IRK
</UL>

<P><STRONG><a name="[1cc]"></a>SMA_Generate_CSRK</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, smp_algo_sap.o(i.SMA_Generate_CSRK))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SMA_Generate_CSRK &rArr; SMA_Diversify &rArr; hci_le_encrypt &rArr; LL_Encrypt_Plain_Data_ucfg &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Diversify
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
</UL>

<P><STRONG><a name="[1cd]"></a>SMA_Generate_IRK</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, smp_algo_sap.o(i.SMA_Generate_IRK))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SMA_Generate_IRK &rArr; SMA_Diversify &rArr; hci_le_encrypt &rArr; LL_Encrypt_Plain_Data_ucfg &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Diversify
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Generate_Resolvable_Private_Address
</UL>

<P><STRONG><a name="[1ce]"></a>SMA_LP_s1_Generate_STK</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, smp_algo_sap.o(i.SMA_LP_s1_Generate_STK))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SMA_LP_s1_Generate_STK &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
</UL>

<P><STRONG><a name="[1c4]"></a>SMA_generate_EDIV_recovery_DIV</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, smp_algo_sap.o(i.SMA_generate_EDIV_recovery_DIV))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SMA_generate_EDIV_recovery_DIV &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_encrypt
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Diversify
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Get_Long_Term_Key
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
</UL>

<P><STRONG><a name="[c8]"></a>SMP_Init</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, smp_common.o(i.SMP_Init))
<BR><BR>[Calls]<UL><LI><a href="#[147]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_init
<LI><a href="#[1cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sc_init_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[b4]"></a>SMP_Process_Q</STRONG> (Thumb, 398 bytes, Stack size unknown bytes, securitymgr.o(i.SMP_Process_Q))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = SMP_Process_Q &rArr; smp_pairing_failed_receive &rArr; smp_pairing_process_abort &rArr; smp_repeated_attacks_protection &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_remote_device_list_item
<LI><a href="#[140]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove_head
<LI><a href="#[141]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_insert_head
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_is_empty
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[1d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_long_term_key_requested_negative_reply
<LI><a href="#[1d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_long_term_key_request_reply
<LI><a href="#[1d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_Exception_Cases_sc_excerpt_ucfg
<LI><a href="#[1d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sc_check_for_ecc_pk_generation_request_ucfg
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_failed_receive
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_find_remote_device_index
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_reset_timer
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
<LI><a href="#[1d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Get_Long_Term_Key
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
</UL>

<P><STRONG><a name="[1da]"></a>SMP_Protocol_Timer_cb</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, smp_common.o(i.SMP_Protocol_Timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SMP_Protocol_Timer_cb &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_update_statistics_on_pairing_complete
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[166]"></a>SMP_acl_data_hndl</STRONG> (Thumb, 238 bytes, Stack size unknown bytes, smp_common.o(i.SMP_acl_data_hndl))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = SMP_acl_data_hndl &rArr; smp_Keys_Distribution_Complete &rArr; smp_pairing_completed &rArr; smp_add_pairing_record_to_bonding_database &rArr; SDB_Add_Record &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_remote_device_list_item
<LI><a href="#[12b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_insert_tail
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Complete
</UL>
<BR>[Called By]<UL><LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Mux_Acl_Packet
</UL>

<P><STRONG><a name="[e1]"></a>SMP_check_encryption_key_size</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, smp_common.o(i.SMP_check_encryption_key_size))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_remote_device_list_item
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Permission
</UL>

<P><STRONG><a name="[13c]"></a>SMP_check_is_device_bonded</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, smp_common.o(i.SMP_check_is_device_bonded))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = SMP_check_is_device_bonded &rArr; SDB_Find_Record &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_remote_device_list_item
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Store_Server_Database_And_Reset_CCCD
</UL>

<P><STRONG><a name="[13b]"></a>SMP_forget_device_by_conn_handle</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, smp_common.o(i.SMP_forget_device_by_conn_handle))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_remote_device_list_item
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
</UL>

<P><STRONG><a name="[e0]"></a>SMP_get_link_status</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, smp_common.o(i.SMP_get_link_status))
<BR><BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_remote_device_list_item
</UL>
<BR>[Called By]<UL><LI><a href="#[9e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Check_Permission
</UL>

<P><STRONG><a name="[9d]"></a>SMP_get_remote_device_list_item</STRONG> (Thumb, 66 bytes, Stack size unknown bytes, smp_common.o(i.SMP_get_remote_device_list_item))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
<LI><a href="#[170]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_le_long_term_key_request_evt_hndl
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_encryption_change_evt_hndl
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_disconnection_complete_evt_hndl
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_acl_data_hndl
<LI><a href="#[13b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_forget_device_by_conn_handle
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_check_is_device_bonded
<LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_read_peer_bonded_data
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_flash_write_client_data
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Check_Perms
<LI><a href="#[e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_link_status
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSecForSignedWrite
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_validate_signed_packet
<LI><a href="#[e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_check_encryption_key_size
</UL>

<P><STRONG><a name="[16f]"></a>SMP_hci_disconnection_complete_evt_hndl</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, smp_common.o(i.SMP_hci_disconnection_complete_evt_hndl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SMP_hci_disconnection_complete_evt_hndl &rArr; SMP_reset_timer &rArr; Timer_StartOneShot &rArr; Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_remote_device_list_item
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_update_statistics_on_pairing_complete
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_flush_rx_queues
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_find_remote_device_index
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_reset_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
</UL>

<P><STRONG><a name="[171]"></a>SMP_hci_encryption_change_evt_hndl</STRONG> (Thumb, 278 bytes, Stack size unknown bytes, smp_common.o(i.SMP_hci_encryption_change_evt_hndl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SMP_hci_encryption_change_evt_hndl &rArr; SMP_reset_timer &rArr; Timer_StartOneShot &rArr; Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_remote_device_list_item
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event_push
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_find_remote_device_index
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_reset_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
</UL>

<P><STRONG><a name="[160]"></a>SMP_hci_le_connection_complete_evt_hndl</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, smp_common.o(i.SMP_hci_le_connection_complete_evt_hndl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SMP_hci_le_connection_complete_evt_hndl &rArr; SMP_connection_complete_handler &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_connection_complete_handler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Address
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Connection_Complete_Handler
</UL>

<P><STRONG><a name="[161]"></a>SMP_hci_le_enhanced_connection_complete_evt_hndl</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, smp_common.o(i.SMP_hci_le_enhanced_connection_complete_evt_hndl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SMP_hci_le_enhanced_connection_complete_evt_hndl &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Address_Initialized
<LI><a href="#[1de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_connection_complete_handler
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Address
</UL>
<BR>[Called By]<UL><LI><a href="#[15f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Connection_Complete_Handler
</UL>

<P><STRONG><a name="[170]"></a>SMP_hci_le_long_term_key_request_evt_hndl</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, smp_common.o(i.SMP_hci_le_long_term_key_request_evt_hndl))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SMP_hci_le_long_term_key_request_evt_hndl &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_remote_device_list_item
</UL>
<BR>[Called By]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
</UL>

<P><STRONG><a name="[1e0]"></a>SMP_repeated_attacks_timer_cb</STRONG> (Thumb, 110 bytes, Stack size unknown bytes, smp_common.o(i.SMP_repeated_attacks_timer_cb))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = SMP_repeated_attacks_timer_cb &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
</UL>

<P><STRONG><a name="[1d4]"></a>SMP_reset_timer</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, smp_common.o(i.SMP_reset_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SMP_reset_timer &rArr; Timer_StartOneShot &rArr; Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_encryption_change_evt_hndl
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_disconnection_complete_evt_hndl
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_repeated_attacks_protection
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_process_abort
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_completed
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_send_packet
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
</UL>

<P><STRONG><a name="[1e1]"></a>SMP_validate_signed_packet</STRONG> (Thumb, 122 bytes, Stack size unknown bytes, smp_common.o(i.SMP_validate_signed_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = SMP_validate_signed_packet &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[9d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_get_remote_device_list_item
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_CMAC_generate_tag
<LI><a href="#[1e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_CSRK
</UL>
<BR>[Called By]<UL><LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
</UL>

<P><STRONG><a name="[11c]"></a>SM_Generate_Resolvable_Private_Address</STRONG> (Thumb, 78 bytes, Stack size unknown bytes, smp_algo_sap.o(i.SM_Generate_Resolvable_Private_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SM_Generate_Resolvable_Private_Address &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_Calculate_Hash
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Generate_IRK
</UL>
<BR>[Called By]<UL><LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy1v2
</UL>

<P><STRONG><a name="[1c8]"></a>SM_Resolve_Private_Address</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, smp_algo_sap.o(i.SM_Resolve_Private_Address))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = SM_Resolve_Private_Address &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_Calculate_Hash
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_flash_write_client_data
</UL>

<P><STRONG><a name="[1e5]"></a>SPI_ClearRXFIFO</STRONG> (Thumb, 20 bytes, Stack size 4 bytes, bluenrg1_spi.o(i.SPI_ClearRXFIFO))
<BR><BR>[Stack]<UL><LI>Max Depth = 4<LI>Call Chain = SPI_ClearRXFIFO
</UL>
<BR>[Calls]<UL><LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiInit
</UL>

<P><STRONG><a name="[1f5]"></a>SPI_ClearTXFIFO</STRONG> (Thumb, 34 bytes, Stack size 0 bytes, bluenrg1_spi.o(i.SPI_ClearTXFIFO))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiInit
</UL>

<P><STRONG><a name="[1f6]"></a>SPI_Cmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bluenrg1_spi.o(i.SPI_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiInit
</UL>

<P><STRONG><a name="[1e6]"></a>SPI_GetFlagStatus</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, bluenrg1_spi.o(i.SPI_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ClearRXFIFO
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstWrite
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteRegister
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadRegister
</UL>

<P><STRONG><a name="[f]"></a>SPI_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.SPI_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[1e7]"></a>SPI_Init</STRONG> (Thumb, 78 bytes, Stack size 8 bytes, bluenrg1_spi.o(i.SPI_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 36<LI>Call Chain = SPI_Init &rArr; SPI_SetBaudrate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1e8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetBaudrate
</UL>
<BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiInit
</UL>

<P><STRONG><a name="[2df]"></a>SPI_ReceiveData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bluenrg1_spi.o(i.SPI_ReceiveData))
<BR><BR>[Called By]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadRegister
</UL>

<P><STRONG><a name="[2dd]"></a>SPI_SendData</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bluenrg1_spi.o(i.SPI_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstWrite
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteRegister
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadRegister
</UL>

<P><STRONG><a name="[1e8]"></a>SPI_SetBaudrate</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, bluenrg1_spi.o(i.SPI_SetBaudrate))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = SPI_SetBaudrate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
</UL>

<P><STRONG><a name="[1f4]"></a>SPI_SetDummyCharacter</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, bluenrg1_spi.o(i.SPI_SetDummyCharacter))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiInit
</UL>

<P><STRONG><a name="[2de]"></a>SPI_SetMasterCommunicationMode</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bluenrg1_spi.o(i.SPI_SetMasterCommunicationMode))
<BR><BR>[Called By]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteRegister
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadRegister
</UL>

<P><STRONG><a name="[1f3]"></a>SPI_StructInit</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, bluenrg1_spi.o(i.SPI_StructInit))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiInit
</UL>

<P><STRONG><a name="[9]"></a>SVC_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bluenrg1_it.o(i.SVC_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[9a]"></a>SdkEvalComIOTxFifoNotEmpty</STRONG> (Thumb, 20 bytes, Stack size 8 bytes, sdk_eval_com.o(i.SdkEvalComIOTxFifoNotEmpty))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SdkEvalComIOTxFifoNotEmpty
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SleepMode_Check
</UL>

<P><STRONG><a name="[9b]"></a>SdkEvalComUARTBusy</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, sdk_eval_com.o(i.SdkEvalComUARTBusy))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SdkEvalComUARTBusy
</UL>
<BR>[Calls]<UL><LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[99]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;App_SleepMode_Check
</UL>

<P><STRONG><a name="[1ea]"></a>SdkEvalComUartInit</STRONG> (Thumb, 144 bytes, Stack size 32 bytes, sdk_eval_com.o(i.SdkEvalComUartInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 60<LI>Call Chain = SdkEvalComUartInit &rArr; UART_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1ee]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_RxFifoIrqLevelConfig
<LI><a href="#[1ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Init
<LI><a href="#[1ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_Cmd
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_PeripheralClockCmd
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalGetVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[155]"></a>SdkEvalGetVersion</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, sdk_eval_config.o(i.SdkEvalGetVersion))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiInit
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_LedGpioPin
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComUartInit
</UL>

<P><STRONG><a name="[2a4]"></a>SdkEvalIdentification</STRONG> (Thumb, 8 bytes, Stack size 0 bytes, sdk_eval_config.o(i.SdkEvalIdentification))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1f0]"></a>SdkEvalSpiInit</STRONG> (Thumb, 242 bytes, Stack size 32 bytes, sdk_eval_spi.o(i.SdkEvalSpiInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 68<LI>Call Chain = SdkEvalSpiInit &rArr; SPI_Init &rArr; SPI_SetBaudrate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[1f1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_StructInit
<LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_PeripheralClockCmd
<LI><a href="#[1f3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_StructInit
<LI><a href="#[1f4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetDummyCharacter
<LI><a href="#[1e7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Init
<LI><a href="#[1f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_Cmd
<LI><a href="#[1f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ClearTXFIFO
<LI><a href="#[1e5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ClearRXFIFO
<LI><a href="#[155]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalGetVersion
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_init
</UL>

<P><STRONG><a name="[1f9]"></a>Select_Next_Notification_Client</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, gatt_server.o(i.Select_Next_Notification_Client))
<BR><BR>[Called By]<UL><LI><a href="#[14d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Send_Notif_Or_Ind
</UL>

<P><STRONG><a name="[14d]"></a>Send_Notif_Or_Ind</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, gatt_server.o(i.Send_Notif_Or_Ind))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Send_Notif_Or_Ind &rArr; GATT_Send_Packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Select_Next_Notification_Client
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Send_Packet
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value_Ext
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
</UL>

<P><STRONG><a name="[d3]"></a>Set_Host_Timer_value</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, host_timer.o(i.Set_Host_Timer_value))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ProcessQ
<LI><a href="#[bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Perform_Deep_Sleep_Check
</UL>

<P><STRONG><a name="[e8]"></a>Set_RF_FrontEnd</STRONG> (Thumb, 66 bytes, Stack size 0 bytes, system_bluenrg1.o(i.Set_RF_FrontEnd))
<BR><BR>[Called By]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceConfiguration
</UL>

<P><STRONG><a name="[14b]"></a>Start_Gatt_Timer</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, rom_gatt_server.o(i.Start_Gatt_Timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Start_Gatt_Timer &rArr; Timer_StartOneShot &rArr; Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Timed_Out_Connection_Index
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
</UL>

<P><STRONG><a name="[149]"></a>Stop_Gatt_Timer</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, rom_gatt_server.o(i.Stop_Gatt_Timer))
<BR><BR>[Calls]<UL><LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Timed_Out_Connection_Index
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
</UL>

<P><STRONG><a name="[ba]"></a>SysCtrl_GetWakeupResetReason</STRONG> (Thumb, 138 bytes, Stack size 0 bytes, bluenrg1_sysctrl.o(i.SysCtrl_GetWakeupResetReason))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_InternalSleep
<LI><a href="#[1b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__low_level_init
</UL>

<P><STRONG><a name="[1eb]"></a>SysCtrl_PeripheralClockCmd</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bluenrg1_sysctrl.o(i.SysCtrl_PeripheralClockCmd))
<BR><BR>[Called By]<UL><LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiInit
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComUartInit
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_init
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_GPIO
</UL>

<P><STRONG><a name="[b]"></a>SysTick_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bluenrg1_it.o(i.SysTick_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[1fe]"></a>SystemInit</STRONG> (Thumb, 170 bytes, Stack size 8 bytes, system_bluenrg1.o(i.SystemInit))
<BR><BR>[Stack]<UL><LI>Max Depth = 96<LI>Call Chain = SystemInit &rArr; DeviceConfiguration &rArr; BOR_ConfigSave
</UL>
<BR>[Calls]<UL><LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceConfiguration
<LI><a href="#[1ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_SetPriority
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[b7]"></a>SystemSleepCmd</STRONG> (Thumb, 20 bytes, Stack size 0 bytes, misc.o(i.SystemSleepCmd))
<BR><BR>[Called By]<UL><LI><a href="#[b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_InternalSleep
</UL>

<P><STRONG><a name="[1b4]"></a>Timer_ExpiryCallback</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, host_timer.o(i.Timer_ExpiryCallback))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>

<P><STRONG><a name="[c3]"></a>Timer_Init</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, host_timer.o(i.Timer_Init))
<BR><BR>[Calls]<UL><LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[ac]"></a>Timer_ProcessQ</STRONG> (Thumb, 274 bytes, Stack size unknown bytes, host_timer.o(i.Timer_ProcessQ))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = Timer_ProcessQ &rArr; TimerCallback &rArr; SMP_repeated_attacks_timer_cb &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
<LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_trans_ext
<LI><a href="#[d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Set_Host_Timer_value
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
<LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Node
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_trans
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
</UL>

<P><STRONG><a name="[11e]"></a>Timer_StartOneShot</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, host_timer.o(i.Timer_StartOneShot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Timer_StartOneShot &rArr; Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_sysTime32_convMachineTime
<LI><a href="#[206]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot_sysTime32
<LI><a href="#[205]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerAcc_sysT32_ms
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
<LI><a href="#[14b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Gatt_Timer
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy1v2
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_reset_timer
</UL>

<P><STRONG><a name="[206]"></a>Timer_StartOneShot_sysTime32</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, host_timer.o(i.Timer_StartOneShot_sysTime32))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Timer_StartOneShot_sysTime32 &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[207]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Head
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot
</UL>

<P><STRONG><a name="[11d]"></a>Timer_StopOneShot</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, host_timer.o(i.Timer_StopOneShot))
<BR><BR>[Calls]<UL><LI><a href="#[137]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Remove_Node
<LI><a href="#[138]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;List_Circular_Insert_Tail
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Process_Q
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Reset_To_Closed_State
<LI><a href="#[149]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Stop_Gatt_Timer
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy1v2
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_reset_timer
</UL>

<P><STRONG><a name="[15a]"></a>Timer_sysTime32_convMachineTime</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, host_timer.o(i.Timer_sysTime32_convMachineTime))
<BR><BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_trans
</UL>
<BR>[Called By]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_read_radio_activity_state
<LI><a href="#[159]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerGetCurrentTime_sysT32
<LI><a href="#[11e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StartOneShot
</UL>

<P><STRONG><a name="[1ef]"></a>UART_Cmd</STRONG> (Thumb, 22 bytes, Stack size 0 bytes, bluenrg1_uart.o(i.UART_Cmd))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComUartInit
</UL>

<P><STRONG><a name="[1e9]"></a>UART_GetFlagStatus</STRONG> (Thumb, 24 bytes, Stack size 0 bytes, bluenrg1_uart.o(i.UART_GetFlagStatus))
<BR><BR>[Called By]<UL><LI><a href="#[9b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComUARTBusy
<LI><a href="#[9a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComIOTxFifoNotEmpty
<LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalUart_Send_Data
</UL>

<P><STRONG><a name="[e]"></a>UART_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, bluenrg1_it.o(i.UART_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[1ed]"></a>UART_Init</STRONG> (Thumb, 302 bytes, Stack size 16 bytes, bluenrg1_uart.o(i.UART_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 28<LI>Call Chain = UART_Init &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComUartInit
</UL>

<P><STRONG><a name="[1ee]"></a>UART_RxFifoIrqLevelConfig</STRONG> (Thumb, 18 bytes, Stack size 0 bytes, bluenrg1_uart.o(i.UART_RxFifoIrqLevelConfig))
<BR><BR>[Called By]<UL><LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComUartInit
</UL>

<P><STRONG><a name="[1f8]"></a>UART_SendData</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, bluenrg1_uart.o(i.UART_SendData))
<BR><BR>[Called By]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalUart_Send_Data
</UL>

<P><STRONG><a name="[11]"></a>WDG_Handler</STRONG> (Thumb, 2 bytes, Stack size 0 bytes, system_bluenrg1.o(i.WDG_Handler))
<BR>[Address Reference Count : 1]<UL><LI> system_bluenrg1.o(.intvec)
</UL>
<P><STRONG><a name="[230]"></a>WindowWiden1</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, rom_ll_timehandling.o(i.WindowWiden1))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
</UL>

<P><STRONG><a name="[234]"></a>WindowWiden2</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, rom_ll_timehandling.o(i.WindowWiden2))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_slaves
</UL>

<P><STRONG><a name="[1b1]"></a>Write_Cmd</STRONG> (Thumb, 300 bytes, Stack size unknown bytes, att.o(i.Write_Cmd))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = Write_Cmd &rArr; SMP_validate_signed_packet &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_search_handle
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CheckSecForSignedWrite
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_permit_req_event_push
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_attribute_modified_event_push
<LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_validate_signed_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[1b0]"></a>Write_Resp</STRONG> (Thumb, 316 bytes, Stack size unknown bytes, att.o(i.Write_Resp))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = Write_Resp &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[9c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Att_Check_Perms
<LI><a href="#[81]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ATT_fill_error_resp
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_search_handle
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_permit_req_event_push
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_attribute_modified_event_push
</UL>
<BR>[Called By]<UL><LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
</UL>

<P><STRONG><a name="[c0]"></a>_BlueNRG_Stack_Initialization</STRONG> (Thumb, 208 bytes, Stack size unknown bytes, bluenrg_main_func.o(i._BlueNRG_Stack_Initialization))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = _BlueNRG_Stack_Initialization &rArr; BlueNRG_Stack_Initialize_ConfigData &rArr; BLEPLAT_get_part_info &rArr; HAL_GetPartInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[20f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PKA_Reset
<LI><a href="#[20c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;state_func_call_init_csr_ucfg
<LI><a href="#[20b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;mem_alloc_ctx_init
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
<LI><a href="#[20d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_controller_privacy_csr_ucfg
<LI><a href="#[1a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIVWHIT_vInit_Struct
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_allocator_noRet
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_allocator
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Perform_Crystal_Check
<LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
<LI><a href="#[c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_ConfigData
<LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Set_TX_Power_Level
<LI><a href="#[20e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;secure_connections_csr_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[211]"></a>__0printf$8</STRONG> (Thumb, 24 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[2fc]"></a>__1printf$8</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8), UNUSED)

<P><STRONG><a name="[98]"></a>__2printf</STRONG> (Thumb, 0 bytes, Stack size 24 bytes, printf8.o(i.__0printf$8))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Beaconing
<LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setChannel
<LI><a href="#[c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Handler
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printRegisters
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_init
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_GPIO
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Service
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[7e]"></a>__ARM_clz</STRONG> (Thumb, 46 bytes, Stack size 0 bytes, depilogue.o(i.__ARM_clz))
<BR><BR>[Called By]<UL><LI><a href="#[73]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_double_epilogue
</UL>

<P><STRONG><a name="[296]"></a>__ARM_common_memcpy1_6</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, ll_isr.o(i.__ARM_common_memcpy1_6))
<BR><BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_advertise_state
</UL>

<P><STRONG><a name="[104]"></a>__ARM_common_switch8</STRONG> (Thumb, 26 bytes, Stack size 8 bytes, gatt_db.o(i.__ARM_common_switch8))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = __ARM_common_switch8
</UL>
<BR>[Called By]<UL><LI><a href="#[131]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Charac_Desc
<LI><a href="#[a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FromHex
<LI><a href="#[200]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;TimerCallback
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
</UL>

<P><STRONG><a name="[2b2]"></a>__ARM_fpclassify</STRONG> (Thumb, 40 bytes, Stack size 0 bytes, fpclassify.o(i.__ARM_fpclassify))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[a8]"></a>free</STRONG> (Thumb, 80 bytes, Stack size 8 bytes, malloc1.o(i.__free$1region))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = free
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
</UL>

<P><STRONG><a name="[213]"></a>__kernel_poly</STRONG> (Thumb, 172 bytes, Stack size 24 bytes, poly.o(i.__kernel_poly))
<BR><BR>[Stack]<UL><LI>Max Depth = 152<LI>Call Chain = __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[1b9]"></a>__low_level_init</STRONG> (Thumb, 162 bytes, Stack size 32 bytes, system_bluenrg1.o(i.__low_level_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = __low_level_init &rArr; SET_BORconfigStatus
</UL>
<BR>[Calls]<UL><LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_GetWakeupResetReason
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_BORconfigStatus
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetPartInfo
<LI><a href="#[214]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_contextRestore
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_HANDLER
</UL>

<P><STRONG><a name="[a0]"></a>malloc</STRONG> (Thumb, 92 bytes, Stack size 20 bytes, malloc1.o(i.__malloc$1region))
<BR><BR>[Stack]<UL><LI>Max Depth = 20<LI>Call Chain = malloc
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
</UL>

<P><STRONG><a name="[215]"></a>__mathlib_dbl_divzero</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_divzero))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_dbl_divzero &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[216]"></a>__mathlib_dbl_infnan2</STRONG> (Thumb, 8 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_infnan2))
<BR><BR>[Stack]<UL><LI>Max Depth = 112<LI>Call Chain = __mathlib_dbl_infnan2 &rArr; __aeabi_dadd &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[217]"></a>__mathlib_dbl_invalid</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_invalid))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = __mathlib_dbl_invalid &rArr; __aeabi_ddiv &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[218]"></a>__mathlib_dbl_overflow</STRONG> (Thumb, 16 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_overflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_overflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[21a]"></a>__mathlib_dbl_underflow</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, dunder.o(i.__mathlib_dbl_underflow))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = __mathlib_dbl_underflow &rArr; __ARM_scalbn
</UL>
<BR>[Calls]<UL><LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[2fd]"></a>__scatterload_copy</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_copy), UNUSED)

<P><STRONG><a name="[2fe]"></a>__scatterload_null</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_null), UNUSED)

<P><STRONG><a name="[2ff]"></a>__scatterload_zeroinit</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, handlers.o(i.__scatterload_zeroinit), UNUSED)

<P><STRONG><a name="[2af]"></a>__set_errno</STRONG> (Thumb, 6 bytes, Stack size 0 bytes, errno.o(i.__set_errno))
<BR><BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
</UL>

<P><STRONG><a name="[124]"></a>_gap_set_discoverable_connectable</STRONG> (Thumb, 368 bytes, Stack size unknown bytes, gap.o(i._gap_set_discoverable_connectable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = _gap_set_discoverable_connectable &rArr; GAP_Privacy1v2 &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[117]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Privacy1v2
<LI><a href="#[21e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setGapAdvData
<LI><a href="#[21c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;gapClearAllModeFlags
<LI><a href="#[21d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advParamsCheckAndSet
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_limited_discoverable_event_push
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Adv_Params
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Adv
<LI><a href="#[21b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memclr4
</UL>
<BR>[Called By]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Discoverable_Mode
</UL>

<P><STRONG><a name="[240]"></a>aci_att_exchange_mtu_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_exchange_mtu_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[42]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_att_exchange_mtu_resp_event
</UL>

<P><STRONG><a name="[241]"></a>aci_att_exec_write_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_exec_write_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[4c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_att_exec_write_resp_event
</UL>

<P><STRONG><a name="[242]"></a>aci_att_find_by_type_value_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_find_by_type_value_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[44]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_att_find_by_type_value_resp_event
</UL>

<P><STRONG><a name="[243]"></a>aci_att_find_info_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_find_info_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[43]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_att_find_info_resp_event
</UL>

<P><STRONG><a name="[244]"></a>aci_att_prepare_write_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_prepare_write_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[4b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_att_prepare_write_resp_event
</UL>

<P><STRONG><a name="[245]"></a>aci_att_read_blob_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_read_blob_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[47]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_att_read_blob_resp_event
</UL>

<P><STRONG><a name="[246]"></a>aci_att_read_by_group_type_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_read_by_group_type_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[49]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_att_read_by_group_type_resp_event
</UL>

<P><STRONG><a name="[247]"></a>aci_att_read_by_type_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_read_by_type_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[45]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_att_read_by_type_resp_event
</UL>

<P><STRONG><a name="[248]"></a>aci_att_read_multiple_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_read_multiple_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[48]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_att_read_multiple_resp_event
</UL>

<P><STRONG><a name="[249]"></a>aci_att_read_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_read_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[46]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_att_read_resp_event
</UL>

<P><STRONG><a name="[24a]"></a>aci_att_write_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_att_write_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[4a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_att_write_resp_event
</UL>

<P><STRONG><a name="[8d]"></a>aci_event_fifo_push</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, aci_events.o(i.aci_event_fifo_push))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_encryption_change_evt_hndl
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_acl_data_hndl
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_update_req_event_push
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_discard_accumulated_acl_data
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_SigChan_Req_TimeOut_Handler
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchg_Mtu_Resp
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_push
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_notification_event_push
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_indication_event_push
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event_push
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_limited_discoverable_event_push
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Tx_Cmpl_Pkt_Handler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Rcv_Pkt_Handler
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_acl_data_done
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_permit_req_event_push
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_permit_req_event_push
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_multi_permit_req_event_push
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_attribute_modified_event_push
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event_push
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_authorization_req_event_push
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Set_Key_Association_Method
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_update_complete_event_push
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_push
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_key_refresh_complete_event_push
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_change_event_push
</UL>

<P><STRONG><a name="[8c]"></a>aci_event_fifo_push_header</STRONG> (Thumb, 182 bytes, Stack size unknown bytes, aci_events.o(i.aci_event_fifo_push_header))
<BR><BR>[Calls]<UL><LI><a href="#[222]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fifoBuf_getFreeHeader
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_encryption_change_evt_hndl
<LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_acl_data_hndl
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
<LI><a href="#[175]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_update_req_event_push
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_discard_accumulated_acl_data
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_SigChan_Req_TimeOut_Handler
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[f6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exchg_Mtu_Resp
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
<LI><a href="#[14a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event_push
<LI><a href="#[1b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_notification_event_push
<LI><a href="#[1b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_indication_event_push
<LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
<LI><a href="#[106]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event_push
<LI><a href="#[113]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_limited_discoverable_event_push
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Tx_Cmpl_Pkt_Handler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Rcv_Pkt_Handler
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_acl_data_done
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data
<LI><a href="#[20a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_permit_req_event_push
<LI><a href="#[1ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_permit_req_event_push
<LI><a href="#[1bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_multi_permit_req_event_push
<LI><a href="#[fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_attribute_modified_event_push
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event_push
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_authorization_req_event_push
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Set_Key_Association_Method
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_update_complete_event_push
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_push
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_key_refresh_complete_event_push
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_change_event_push
</UL>

<P><STRONG><a name="[24b]"></a>aci_gap_addr_not_resolved_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_addr_not_resolved_event))
<BR><BR>[Called By]<UL><LI><a href="#[38]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gap_addr_not_resolved_event
</UL>

<P><STRONG><a name="[24c]"></a>aci_gap_authorization_req_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_authorization_req_event))
<BR><BR>[Called By]<UL><LI><a href="#[33]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gap_authorization_req_event
</UL>

<P><STRONG><a name="[24d]"></a>aci_gap_bond_lost_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_bond_lost_event))
<BR><BR>[Called By]<UL><LI><a href="#[35]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gap_bond_lost_event
</UL>

<P><STRONG><a name="[24e]"></a>aci_gap_device_found_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_device_found_event))
<BR><BR>[Called By]<UL><LI><a href="#[36]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gap_device_found_event
</UL>

<P><STRONG><a name="[ec]"></a>aci_gap_init</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, bluenrg_gap_aci.o(i.aci_gap_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = aci_gap_init &rArr; GAP_Init &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[107]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[24f]"></a>aci_gap_keypress_notification_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_keypress_notification_event))
<BR><BR>[Called By]<UL><LI><a href="#[3a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gap_keypress_notification_event
</UL>

<P><STRONG><a name="[250]"></a>aci_gap_limited_discoverable_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_limited_discoverable_event))
<BR><BR>[Called By]<UL><LI><a href="#[30]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gap_limited_discoverable_event
</UL>

<P><STRONG><a name="[251]"></a>aci_gap_numeric_comparison_value_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_numeric_comparison_value_event))
<BR><BR>[Called By]<UL><LI><a href="#[39]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gap_numeric_comparison_value_event
</UL>

<P><STRONG><a name="[252]"></a>aci_gap_pairing_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_pairing_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[31]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gap_pairing_complete_event
</UL>

<P><STRONG><a name="[253]"></a>aci_gap_pass_key_req_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_pass_key_req_event))
<BR><BR>[Called By]<UL><LI><a href="#[32]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gap_pass_key_req_event
</UL>

<P><STRONG><a name="[254]"></a>aci_gap_proc_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_proc_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[37]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gap_proc_complete_event
</UL>

<P><STRONG><a name="[1fc]"></a>aci_gap_set_discoverable</STRONG> (Thumb, 66 bytes, Stack size unknown bytes, bluenrg_gap_aci.o(i.aci_gap_set_discoverable))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = aci_gap_set_discoverable &rArr; GAP_Set_Discoverable_Mode &rArr; _gap_set_discoverable_connectable &rArr; GAP_Privacy1v2 &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[123]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Set_Discoverable_Mode
<LI><a href="#[224]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_aci_gap_set_discoverable_param_check
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Beaconing
</UL>

<P><STRONG><a name="[255]"></a>aci_gap_slave_security_initiated_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gap_slave_security_initiated_event))
<BR><BR>[Called By]<UL><LI><a href="#[34]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gap_slave_security_initiated_event
</UL>

<P><STRONG><a name="[97]"></a>aci_gatt_add_char</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, bluenrg_gatt_aci.o(i.aci_gatt_add_char))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = aci_gatt_add_char &rArr; Gatt_Add_Characteristic &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[10d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Characteristic
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_uuid
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Service
</UL>

<P><STRONG><a name="[96]"></a>aci_gatt_add_service</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, bluenrg_gatt_aci.o(i.aci_gatt_add_service))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = aci_gatt_add_service &rArr; Gatt_Add_Service &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Add_Service
<LI><a href="#[21f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_load_uuid
</UL>
<BR>[Called By]<UL><LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Service
</UL>

<P><STRONG><a name="[225]"></a>aci_gatt_attribute_modified_event</STRONG> (Thumb, 14 bytes, Stack size 8 bytes, ble_beacon_main.o(i.aci_gatt_attribute_modified_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 336<LI>Call Chain = aci_gatt_attribute_modified_event &rArr; Attribute_Modified_CB &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
</UL>
<BR>[Called By]<UL><LI><a href="#[40]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gatt_attribute_modified_event
</UL>

<P><STRONG><a name="[256]"></a>aci_gatt_disc_read_char_by_uuid_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_disc_read_char_by_uuid_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[51]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gatt_disc_read_char_by_uuid_resp_event
</UL>

<P><STRONG><a name="[257]"></a>aci_gatt_error_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_error_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[50]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gatt_error_resp_event
</UL>

<P><STRONG><a name="[258]"></a>aci_gatt_indication_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_indication_event))
<BR><BR>[Called By]<UL><LI><a href="#[4d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gatt_indication_event
</UL>

<P><STRONG><a name="[eb]"></a>aci_gatt_init</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, bluenrg_gatt_aci.o(i.aci_gatt_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = aci_gatt_init &rArr; Gatt_Server_Init &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[259]"></a>aci_gatt_notification_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_notification_event))
<BR><BR>[Called By]<UL><LI><a href="#[4e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gatt_notification_event
</UL>

<P><STRONG><a name="[25a]"></a>aci_gatt_prepare_write_permit_req_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_prepare_write_permit_req_event))
<BR><BR>[Called By]<UL><LI><a href="#[53]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gatt_prepare_write_permit_req_event
</UL>

<P><STRONG><a name="[25b]"></a>aci_gatt_proc_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_proc_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[4f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gatt_proc_complete_event
</UL>

<P><STRONG><a name="[25c]"></a>aci_gatt_proc_timeout_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_proc_timeout_event))
<BR><BR>[Called By]<UL><LI><a href="#[41]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gatt_proc_timeout_event
</UL>

<P><STRONG><a name="[25d]"></a>aci_gatt_read_multi_permit_req_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_read_multi_permit_req_event))
<BR><BR>[Called By]<UL><LI><a href="#[55]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gatt_read_multi_permit_req_event
</UL>

<P><STRONG><a name="[25e]"></a>aci_gatt_read_permit_req_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_read_permit_req_event))
<BR><BR>[Called By]<UL><LI><a href="#[54]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gatt_read_permit_req_event
</UL>

<P><STRONG><a name="[25f]"></a>aci_gatt_server_confirmation_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_server_confirmation_event))
<BR><BR>[Called By]<UL><LI><a href="#[57]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gatt_server_confirmation_event
</UL>

<P><STRONG><a name="[260]"></a>aci_gatt_tx_pool_available_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_tx_pool_available_event))
<BR><BR>[Called By]<UL><LI><a href="#[56]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gatt_tx_pool_available_event
</UL>

<P><STRONG><a name="[261]"></a>aci_gatt_write_permit_req_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_gatt_write_permit_req_event))
<BR><BR>[Called By]<UL><LI><a href="#[52]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_gatt_write_permit_req_event
</UL>

<P><STRONG><a name="[284]"></a>aci_hal_end_of_radio_activity_event</STRONG> (Thumb, 10 bytes, Stack size 0 bytes, ble_beacon_main.o(i.aci_hal_end_of_radio_activity_event))
<BR><BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_radio_activity_state_callback_check
</UL>

<P><STRONG><a name="[262]"></a>aci_hal_fw_error_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_hal_fw_error_event))
<BR><BR>[Called By]<UL><LI><a href="#[3f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_hal_fw_error_event
</UL>

<P><STRONG><a name="[263]"></a>aci_hal_scan_req_report_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_hal_scan_req_report_event))
<BR><BR>[Called By]<UL><LI><a href="#[2d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_hal_scan_req_report_event
</UL>

<P><STRONG><a name="[2aa]"></a>aci_hal_set_radio_activity_mask</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, hal.o(i.aci_hal_set_radio_activity_mask))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[ea]"></a>aci_hal_set_tx_power_level</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, bluenrg_hal_aci.o(i.aci_hal_set_tx_power_level))
<BR><BR>[Calls]<UL><LI><a href="#[210]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Set_TX_Power_Level
</UL>
<BR>[Called By]<UL><LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
</UL>

<P><STRONG><a name="[264]"></a>aci_l2cap_command_reject_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_l2cap_command_reject_event))
<BR><BR>[Called By]<UL><LI><a href="#[3e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_l2cap_command_reject_event
</UL>

<P><STRONG><a name="[265]"></a>aci_l2cap_connection_update_req_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_l2cap_connection_update_req_event))
<BR><BR>[Called By]<UL><LI><a href="#[3d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_l2cap_connection_update_req_event
</UL>

<P><STRONG><a name="[266]"></a>aci_l2cap_connection_update_resp_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_l2cap_connection_update_resp_event))
<BR><BR>[Called By]<UL><LI><a href="#[3b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_l2cap_connection_update_resp_event
</UL>

<P><STRONG><a name="[267]"></a>aci_l2cap_proc_timeout_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.aci_l2cap_proc_timeout_event))
<BR><BR>[Called By]<UL><LI><a href="#[3c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_aci_l2cap_proc_timeout_event
</UL>

<P><STRONG><a name="[f8]"></a>acl_list_first</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, acl_list.o(i.acl_list_first))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_Process_Q
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Flush_Pending_AclPacket_Lists
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_flush_rx_queues
</UL>

<P><STRONG><a name="[1aa]"></a>acl_list_full_on_packt</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, acl_list.o(i.acl_list_full_on_packt))
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Mem_Buff_Count
</UL>
<BR>[Called By]<UL><LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
</UL>

<P><STRONG><a name="[147]"></a>acl_list_init</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, acl_list.o(i.acl_list_init))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Init
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Init
</UL>

<P><STRONG><a name="[141]"></a>acl_list_insert_head</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, acl_list.o(i.acl_list_insert_head))
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Mem_Buff_Count
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
</UL>

<P><STRONG><a name="[12b]"></a>acl_list_insert_tail</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, acl_list.o(i.acl_list_insert_tail))
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Mem_Buff_Count
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_acl_data_hndl
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
<LI><a href="#[129]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Send_Packet
</UL>

<P><STRONG><a name="[13e]"></a>acl_list_is_empty</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, acl_list.o(i.acl_list_is_empty))
<BR><BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_Process_Q
<LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
</UL>

<P><STRONG><a name="[f9]"></a>acl_list_remove</STRONG> (Thumb, 68 bytes, Stack size unknown bytes, acl_list.o(i.acl_list_remove))
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Mem_Buff_Count
</UL>
<BR>[Called By]<UL><LI><a href="#[ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_acl_Process_Q
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
<LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[13f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Client_Data
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Flush_Pending_AclPacket_Lists
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_flush_rx_queues
</UL>

<P><STRONG><a name="[140]"></a>acl_list_remove_head</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, acl_list.o(i.acl_list_remove_head))
<BR><BR>[Calls]<UL><LI><a href="#[19f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Mem_Buff_Count
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
<LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
</UL>

<P><STRONG><a name="[21d]"></a>advParamsCheckAndSet</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, gap.o(i.advParamsCheckAndSet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = advParamsCheckAndSet &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
</UL>

<P><STRONG><a name="[22e]"></a>advance_slave_timing_MultiSlave</STRONG> (Thumb, 706 bytes, Stack size unknown bytes, multi_master_time.o(i.advance_slave_timing_MultiSlave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = advance_slave_timing_MultiSlave &rArr; cancel_slave &rArr; isr_event_handler &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_string
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_slave
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulo_37
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_offset2
<LI><a href="#[231]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_offset1
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_slaves
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sca
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WindowWiden2
<LI><a href="#[230]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WindowWiden1
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
</UL>

<P><STRONG><a name="[b1]"></a>advance_transmit</STRONG> (Thumb, 330 bytes, Stack size unknown bytes, routines_support.o(i.advance_transmit))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = advance_transmit &rArr; copy_tx_data_packet &rArr; Mem_Buff_Block_Copy &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_tx_data_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
</UL>

<P><STRONG><a name="[93]"></a>advance_wakeup_timer</STRONG> (Thumb, 1658 bytes, Stack size unknown bytes, advance_wakeup_time.o(i.advance_wakeup_timer))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[153]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
<LI><a href="#[239]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;microseconds_to_machine_time
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_master
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Update_Scanning_Initiating_Buffers
<LI><a href="#[18e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Update_Advertising_Buffers
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Sleep_Req
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_slave
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_trans
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_tx_data_packet
</UL>
<BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect
<LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_unknown_state
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_slave_state
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_advertise_state
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Transmit_Data
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_prescheduled_slot_cancellation
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timebase
</UL>

<P><STRONG><a name="[cb]"></a>ble_HAL_Init</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, hal.o(i.ble_HAL_Init))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ble_HAL_Init &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
</UL>
<BR>[Called By]<UL><LI><a href="#[c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_Layers
</UL>

<P><STRONG><a name="[23e]"></a>cancel_connect_master_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, rom_ll_isr_routines.o(i.cancel_connect_master_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_master
</UL>

<P><STRONG><a name="[23c]"></a>cancel_current_master</STRONG> (Thumb, 416 bytes, Stack size unknown bytes, multi_master_time.o(i.cancel_current_master))
<BR><BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_string
<LI><a href="#[91]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;is_slave
<LI><a href="#[23d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u16
</UL>
<BR>[Called By]<UL><LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_master
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_slave_state
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_advertise_state
</UL>

<P><STRONG><a name="[23a]"></a>cancel_master</STRONG> (Thumb, 116 bytes, Stack size unknown bytes, rom_ll_isr_routines.o(i.cancel_master))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = cancel_master &rArr; isr_event_handler &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_current_master
<LI><a href="#[23e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_connect_master_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
</UL>

<P><STRONG><a name="[237]"></a>cancel_slave</STRONG> (Thumb, 188 bytes, Stack size unknown bytes, isr_routines.o(i.cancel_slave))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = cancel_slave &rArr; isr_event_handler &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_update_proc
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
</UL>

<P><STRONG><a name="[42]"></a>cb_aci_att_exchange_mtu_resp_event</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_att_exchange_mtu_resp_event))
<BR><BR>[Calls]<UL><LI><a href="#[240]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_exchange_mtu_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[4c]"></a>cb_aci_att_exec_write_resp_event</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_att_exec_write_resp_event))
<BR><BR>[Calls]<UL><LI><a href="#[241]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_exec_write_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[44]"></a>cb_aci_att_find_by_type_value_resp_event</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_att_find_by_type_value_resp_event))
<BR><BR>[Calls]<UL><LI><a href="#[242]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_find_by_type_value_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[43]"></a>cb_aci_att_find_info_resp_event</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_att_find_info_resp_event))
<BR><BR>[Calls]<UL><LI><a href="#[243]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_find_info_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[4b]"></a>cb_aci_att_prepare_write_resp_event</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_att_prepare_write_resp_event))
<BR><BR>[Calls]<UL><LI><a href="#[244]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_prepare_write_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[47]"></a>cb_aci_att_read_blob_resp_event</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_att_read_blob_resp_event))
<BR><BR>[Calls]<UL><LI><a href="#[245]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_blob_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[49]"></a>cb_aci_att_read_by_group_type_resp_event</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_att_read_by_group_type_resp_event))
<BR><BR>[Calls]<UL><LI><a href="#[246]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_by_group_type_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[45]"></a>cb_aci_att_read_by_type_resp_event</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_att_read_by_type_resp_event))
<BR><BR>[Calls]<UL><LI><a href="#[247]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_by_type_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[48]"></a>cb_aci_att_read_multiple_resp_event</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_att_read_multiple_resp_event))
<BR><BR>[Calls]<UL><LI><a href="#[248]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_multiple_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[46]"></a>cb_aci_att_read_resp_event</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_att_read_resp_event))
<BR><BR>[Calls]<UL><LI><a href="#[249]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_read_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[4a]"></a>cb_aci_att_write_resp_event</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_att_write_resp_event))
<BR><BR>[Calls]<UL><LI><a href="#[24a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_att_write_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[38]"></a>cb_aci_gap_addr_not_resolved_event</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gap_addr_not_resolved_event))
<BR><BR>[Calls]<UL><LI><a href="#[24b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_addr_not_resolved_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[33]"></a>cb_aci_gap_authorization_req_event</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gap_authorization_req_event))
<BR><BR>[Calls]<UL><LI><a href="#[24c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_authorization_req_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[35]"></a>cb_aci_gap_bond_lost_event</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gap_bond_lost_event))
<BR><BR>[Calls]<UL><LI><a href="#[24d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_bond_lost_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[36]"></a>cb_aci_gap_device_found_event</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gap_device_found_event))
<BR><BR>[Calls]<UL><LI><a href="#[24e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_device_found_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[3a]"></a>cb_aci_gap_keypress_notification_event</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gap_keypress_notification_event))
<BR><BR>[Calls]<UL><LI><a href="#[24f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_keypress_notification_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[30]"></a>cb_aci_gap_limited_discoverable_event</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gap_limited_discoverable_event))
<BR><BR>[Calls]<UL><LI><a href="#[250]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_limited_discoverable_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[39]"></a>cb_aci_gap_numeric_comparison_value_event</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gap_numeric_comparison_value_event))
<BR><BR>[Calls]<UL><LI><a href="#[251]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_numeric_comparison_value_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[31]"></a>cb_aci_gap_pairing_complete_event</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gap_pairing_complete_event))
<BR><BR>[Calls]<UL><LI><a href="#[252]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[32]"></a>cb_aci_gap_pass_key_req_event</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gap_pass_key_req_event))
<BR><BR>[Calls]<UL><LI><a href="#[253]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pass_key_req_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[37]"></a>cb_aci_gap_proc_complete_event</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gap_proc_complete_event))
<BR><BR>[Calls]<UL><LI><a href="#[254]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_proc_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[34]"></a>cb_aci_gap_slave_security_initiated_event</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gap_slave_security_initiated_event))
<BR><BR>[Calls]<UL><LI><a href="#[255]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_slave_security_initiated_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[40]"></a>cb_aci_gatt_attribute_modified_event</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gatt_attribute_modified_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 336 + Unknown Stack Size
<LI>Call Chain = cb_aci_gatt_attribute_modified_event &rArr; aci_gatt_attribute_modified_event &rArr; Attribute_Modified_CB &rArr; pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[225]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_attribute_modified_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[51]"></a>cb_aci_gatt_disc_read_char_by_uuid_resp_event</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gatt_disc_read_char_by_uuid_resp_event))
<BR><BR>[Calls]<UL><LI><a href="#[256]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_disc_read_char_by_uuid_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[50]"></a>cb_aci_gatt_error_resp_event</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gatt_error_resp_event))
<BR><BR>[Calls]<UL><LI><a href="#[257]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_error_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[4d]"></a>cb_aci_gatt_indication_event</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gatt_indication_event))
<BR><BR>[Calls]<UL><LI><a href="#[258]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_indication_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[4e]"></a>cb_aci_gatt_notification_event</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gatt_notification_event))
<BR><BR>[Calls]<UL><LI><a href="#[259]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_notification_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[53]"></a>cb_aci_gatt_prepare_write_permit_req_event</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gatt_prepare_write_permit_req_event))
<BR><BR>[Calls]<UL><LI><a href="#[25a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_prepare_write_permit_req_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[4f]"></a>cb_aci_gatt_proc_complete_event</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gatt_proc_complete_event))
<BR><BR>[Calls]<UL><LI><a href="#[25b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_proc_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[41]"></a>cb_aci_gatt_proc_timeout_event</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gatt_proc_timeout_event))
<BR><BR>[Calls]<UL><LI><a href="#[25c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_proc_timeout_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[55]"></a>cb_aci_gatt_read_multi_permit_req_event</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gatt_read_multi_permit_req_event))
<BR><BR>[Calls]<UL><LI><a href="#[25d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_multi_permit_req_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[54]"></a>cb_aci_gatt_read_permit_req_event</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gatt_read_permit_req_event))
<BR><BR>[Calls]<UL><LI><a href="#[25e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_read_permit_req_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[57]"></a>cb_aci_gatt_server_confirmation_event</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gatt_server_confirmation_event))
<BR><BR>[Calls]<UL><LI><a href="#[25f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_server_confirmation_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[56]"></a>cb_aci_gatt_tx_pool_available_event</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gatt_tx_pool_available_event))
<BR><BR>[Calls]<UL><LI><a href="#[260]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_tx_pool_available_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[52]"></a>cb_aci_gatt_write_permit_req_event</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_gatt_write_permit_req_event))
<BR><BR>[Calls]<UL><LI><a href="#[261]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_write_permit_req_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[3f]"></a>cb_aci_hal_fw_error_event</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_hal_fw_error_event))
<BR><BR>[Calls]<UL><LI><a href="#[262]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_fw_error_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[2d]"></a>cb_aci_hal_scan_req_report_event</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_hal_scan_req_report_event))
<BR><BR>[Calls]<UL><LI><a href="#[263]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_scan_req_report_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[3e]"></a>cb_aci_l2cap_command_reject_event</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_l2cap_command_reject_event))
<BR><BR>[Calls]<UL><LI><a href="#[264]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_command_reject_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[3d]"></a>cb_aci_l2cap_connection_update_req_event</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_l2cap_connection_update_req_event))
<BR><BR>[Calls]<UL><LI><a href="#[265]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_update_req_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[3b]"></a>cb_aci_l2cap_connection_update_resp_event</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_l2cap_connection_update_resp_event))
<BR><BR>[Calls]<UL><LI><a href="#[266]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_connection_update_resp_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[3c]"></a>cb_aci_l2cap_proc_timeout_event</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, aci_events.o(i.cb_aci_l2cap_proc_timeout_event))
<BR><BR>[Calls]<UL><LI><a href="#[267]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_l2cap_proc_timeout_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[29]"></a>cb_hci_data_buffer_overflow_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.cb_hci_data_buffer_overflow_event))
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[1e]"></a>cb_hci_disconnection_complete_event</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, aci_events.o(i.cb_hci_disconnection_complete_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = cb_hci_disconnection_complete_event &rArr; hci_disconnection_complete_event &rArr; write_flash &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnection_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[1f]"></a>cb_hci_encryption_change_event</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, aci_events.o(i.cb_hci_encryption_change_event))
<BR><BR>[Calls]<UL><LI><a href="#[269]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_change_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[20]"></a>cb_hci_encryption_key_refresh_complete_event</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, aci_events.o(i.cb_hci_encryption_key_refresh_complete_event))
<BR><BR>[Calls]<UL><LI><a href="#[26a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_key_refresh_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[23]"></a>cb_hci_le_advertising_report_event</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, aci_events.o(i.cb_hci_le_advertising_report_event))
<BR><BR>[Calls]<UL><LI><a href="#[26b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_advertising_report_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[21]"></a>cb_hci_le_connection_complete_event</STRONG> (Thumb, 62 bytes, Stack size unknown bytes, aci_events.o(i.cb_hci_le_connection_complete_event))
<BR><BR>[Calls]<UL><LI><a href="#[26c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[2b]"></a>cb_hci_le_connection_update_complete_event</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, aci_events.o(i.cb_hci_le_connection_update_complete_event))
<BR><BR>[Calls]<UL><LI><a href="#[26d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_update_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[24]"></a>cb_hci_le_data_length_change_event</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, aci_events.o(i.cb_hci_le_data_length_change_event))
<BR><BR>[Calls]<UL><LI><a href="#[26e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_data_length_change_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[28]"></a>cb_hci_le_direct_advertising_report_event</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, aci_events.o(i.cb_hci_le_direct_advertising_report_event))
<BR><BR>[Calls]<UL><LI><a href="#[26f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_direct_advertising_report_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[27]"></a>cb_hci_le_enhanced_connection_complete_event</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, aci_events.o(i.cb_hci_le_enhanced_connection_complete_event))
<BR><BR>[Calls]<UL><LI><a href="#[270]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_enhanced_connection_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[26]"></a>cb_hci_le_generate_dhkey_complete_event</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, aci_events.o(i.cb_hci_le_generate_dhkey_complete_event))
<BR><BR>[Calls]<UL><LI><a href="#[271]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_generate_dhkey_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[22]"></a>cb_hci_le_long_term_key_request_event</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, aci_events.o(i.cb_hci_le_long_term_key_request_event))
<BR><BR>[Calls]<UL><LI><a href="#[272]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_long_term_key_request_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[25]"></a>cb_hci_le_read_local_p256_public_key_complete_event</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, aci_events.o(i.cb_hci_le_read_local_p256_public_key_complete_event))
<BR><BR>[Calls]<UL><LI><a href="#[273]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_local_p256_public_key_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[2c]"></a>cb_hci_le_read_remote_used_features_complete_event</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, aci_events.o(i.cb_hci_le_read_remote_used_features_complete_event))
<BR><BR>[Calls]<UL><LI><a href="#[274]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_read_remote_used_features_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[2e]"></a>cb_hci_number_of_completed_packets_event</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, aci_events.o(i.cb_hci_number_of_completed_packets_event))
<BR><BR>[Calls]<UL><LI><a href="#[275]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_number_of_completed_packets_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[2a]"></a>cb_hci_read_remote_version_information_complete_event</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, aci_events.o(i.cb_hci_read_remote_version_information_complete_event))
<BR><BR>[Calls]<UL><LI><a href="#[276]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_read_remote_version_information_complete_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[2f]"></a>cb_hci_rx_acl_data_event</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, aci_events.o(i.cb_hci_rx_acl_data_event))
<BR><BR>[Calls]<UL><LI><a href="#[277]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data_event
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[a6]"></a>ch_no</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, _nrf905_.o(i.ch_no))
<BR><BR>[Stack]<UL><LI>Max Depth = 44<LI>Call Chain = ch_no &rArr; __aeabi_fsub &rArr; __aeabi_fadd &rArr; _float_epilogue
</UL>
<BR>[Calls]<UL><LI><a href="#[6e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fsub
<LI><a href="#[278]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_fmul
<LI><a href="#[279]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_f2uiz
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
</UL>

<P><STRONG><a name="[d7]"></a>char_copy</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, hal.o(i.char_copy))
<BR><BR>[Called By]<UL><LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_slave
<LI><a href="#[18f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Update_Scanning_Initiating_Buffers
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc1
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_slave_state
<LI><a href="#[d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Blue_Set_Radio_Config_Data
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_ScanAddress
</UL>

<P><STRONG><a name="[2a3]"></a>copy_4_u32</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, ll_isr.o(i.copy_4_u32))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc1
</UL>

<P><STRONG><a name="[238]"></a>copy_tx_data_packet</STRONG> (Thumb, 126 bytes, Stack size unknown bytes, ll_isr.o(i.copy_tx_data_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = copy_tx_data_packet &rArr; Mem_Buff_Block_Copy &rArr; __aeabi_memmove4
</UL>
<BR>[Calls]<UL><LI><a href="#[193]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Block_Copy
</UL>
<BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_transmit
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_slave_state
</UL>

<P><STRONG><a name="[cd]"></a>data_length_extension_csr_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, hci.o(i.data_length_extension_csr_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_transmit
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Init
<LI><a href="#[ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Controller_Process_Q
<LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialize_RAM_check
<LI><a href="#[1b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc
<LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_receive_data
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_test_tx_state
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_slave_state
</UL>

<P><STRONG><a name="[184]"></a>encrypt</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, ll_isr.o(i.encrypt))
<BR><BR>[Called By]<UL><LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc_encrypt_data
<LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt_Plain_Data_ucfg
</UL>

<P><STRONG><a name="[27a]"></a>flash_check</STRONG> (Thumb, 170 bytes, Stack size 32 bytes, ble_beacon_main.o(i.flash_check))
<BR><BR>[Stack]<UL><LI>Max Depth = 88<LI>Call Chain = flash_check &rArr; write_flash &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadWord
<LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[27d]"></a>flash_data_read</STRONG> (Thumb, 142 bytes, Stack size 16 bytes, ble_beacon_main.o(i.flash_data_read))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = flash_data_read
</UL>
<BR>[Calls]<UL><LI><a href="#[27b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadWord
<LI><a href="#[27e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ReadByte
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1d]"></a>fputc</STRONG> (Thumb, 12 bytes, Stack size 8 bytes, sdk_eval_com.o(i.fputc))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = fputc &rArr; SdkEvalUart_Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[1f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalUart_Send_Data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> printf8.o(i.__0printf$8)
</UL>
<P><STRONG><a name="[21c]"></a>gapClearAllModeFlags</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, gap.o(i.gapClearAllModeFlags))
<BR><BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
</UL>

<P><STRONG><a name="[27f]"></a>get_adv_addr</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, rom_ll_isr_routines.o(i.get_adv_addr))
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_u32_from_u8
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_advertise_state
</UL>

<P><STRONG><a name="[120]"></a>get_advertiser</STRONG> (Thumb, 66 bytes, Stack size unknown bytes, multi_master_time.o(i.get_advertiser))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Adv_Params
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Adv_Data
<LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Adv
<LI><a href="#[119]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_AdvAddress
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Allow_Address_Setting
</UL>

<P><STRONG><a name="[90]"></a>get_connection_no</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, multi_master_time.o(i.get_connection_no))
<BR><BR>[Called By]<UL><LI><a href="#[8f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_ACL_Data
<LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_LTK
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Transmit_Data
</UL>

<P><STRONG><a name="[17e]"></a>get_next_free_slot</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, multi_master_time.o(i.get_next_free_slot))
<BR><BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Adv
</UL>

<P><STRONG><a name="[280]"></a>get_scan_addr</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, rom_ll_isr_routines.o(i.get_scan_addr))
<BR><BR>[Calls]<UL><LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_u32_from_u8
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_advertise_state
</UL>

<P><STRONG><a name="[121]"></a>get_scan_connection</STRONG> (Thumb, 66 bytes, Stack size unknown bytes, multi_master_time.o(i.get_scan_connection))
<BR><BR>[Called By]<UL><LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
<LI><a href="#[18b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Adv_Params
<LI><a href="#[11a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_ScanAddress
<LI><a href="#[118]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Allow_Address_Setting
</UL>

<P><STRONG><a name="[281]"></a>go_to_connect</STRONG> (Thumb, 632 bytes, Stack size unknown bytes, rom_ll_isr_routines.o(i.go_to_connect))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = go_to_connect &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_string
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
<LI><a href="#[282]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;timebase_start_connect
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le4ByteToInt32
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le2ByteToInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_advertise_state
</UL>

<P><STRONG><a name="[f2]"></a>hal_radio_activity_state_callback_check</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, hal.o(i.hal_radio_activity_state_callback_check))
<BR><BR>[Calls]<UL><LI><a href="#[283]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_read_radio_activity_state
<LI><a href="#[284]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_end_of_radio_activity_event
</UL>
<BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_Q
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timebase
</UL>

<P><STRONG><a name="[f3]"></a>hal_radio_activity_state_init</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, hal.o(i.hal_radio_activity_state_init))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_init
</UL>

<P><STRONG><a name="[283]"></a>hal_read_radio_activity_state</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, hal.o(i.hal_read_radio_activity_state))
<BR><BR>[Calls]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_sysTime32_convMachineTime
</UL>
<BR>[Called By]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_radio_activity_state_callback_check
</UL>

<P><STRONG><a name="[ad]"></a>hci_acl_Process_Q</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, hci.o(i.hci_acl_Process_Q))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = hci_acl_Process_Q &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove
<LI><a href="#[13e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_is_empty
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_first
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Transmit_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
</UL>

<P><STRONG><a name="[268]"></a>hci_disconnection_complete_event</STRONG> (Thumb, 94 bytes, Stack size 8 bytes, ble_beacon_main.o(i.hci_disconnection_complete_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 64 + Unknown Stack Size
<LI>Call Chain = hci_disconnection_complete_event &rArr; write_flash &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[27c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;write_flash
<LI><a href="#[285]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_advertise_enable
</UL>
<BR>[Called By]<UL><LI><a href="#[1e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hci_disconnection_complete_event
</UL>

<P><STRONG><a name="[269]"></a>hci_encryption_change_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_encryption_change_event))
<BR><BR>[Called By]<UL><LI><a href="#[1f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hci_encryption_change_event
</UL>

<P><STRONG><a name="[26a]"></a>hci_encryption_key_refresh_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_encryption_key_refresh_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[20]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hci_encryption_key_refresh_complete_event
</UL>

<P><STRONG><a name="[f1]"></a>hci_hardware_error_event</STRONG> (Thumb, 16 bytes, Stack size 0 bytes, ble_beacon_main.o(i.hci_hardware_error_event))
<BR><BR>[Called By]<UL><LI><a href="#[af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_Q
</UL>

<P><STRONG><a name="[26b]"></a>hci_le_advertising_report_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_advertising_report_event))
<BR><BR>[Called By]<UL><LI><a href="#[23]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hci_le_advertising_report_event
</UL>

<P><STRONG><a name="[26c]"></a>hci_le_connection_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_connection_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[21]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hci_le_connection_complete_event
</UL>

<P><STRONG><a name="[26d]"></a>hci_le_connection_update_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_connection_update_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[2b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hci_le_connection_update_complete_event
</UL>

<P><STRONG><a name="[26e]"></a>hci_le_data_length_change_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_data_length_change_event))
<BR><BR>[Called By]<UL><LI><a href="#[24]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hci_le_data_length_change_event
</UL>

<P><STRONG><a name="[26f]"></a>hci_le_direct_advertising_report_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_direct_advertising_report_event))
<BR><BR>[Called By]<UL><LI><a href="#[28]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hci_le_direct_advertising_report_event
</UL>

<P><STRONG><a name="[1cb]"></a>hci_le_encrypt</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, hci.o(i.hci_le_encrypt))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = hci_le_encrypt &rArr; LL_Encrypt_Plain_Data_ucfg &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[183]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Encrypt_Plain_Data_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_generate_subkeys
<LI><a href="#[1e4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_Calculate_Hash
<LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_CMAC_generate_tag
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_LP_s1_Generate_STK
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_LP_SR_Compute_c1_Confirm_Value
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_generate_EDIV_recovery_DIV
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Diversify
</UL>

<P><STRONG><a name="[270]"></a>hci_le_enhanced_connection_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_enhanced_connection_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[27]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hci_le_enhanced_connection_complete_event
</UL>

<P><STRONG><a name="[271]"></a>hci_le_generate_dhkey_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_generate_dhkey_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[26]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hci_le_generate_dhkey_complete_event
</UL>

<P><STRONG><a name="[272]"></a>hci_le_long_term_key_request_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_long_term_key_request_event))
<BR><BR>[Called By]<UL><LI><a href="#[22]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hci_le_long_term_key_request_event
</UL>

<P><STRONG><a name="[1d5]"></a>hci_le_long_term_key_request_reply</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, hci.o(i.hci_le_long_term_key_request_reply))
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_LTK
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
</UL>

<P><STRONG><a name="[1d2]"></a>hci_le_long_term_key_requested_negative_reply</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, hci.o(i.hci_le_long_term_key_requested_negative_reply))
<BR><BR>[Calls]<UL><LI><a href="#[18d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_LTK
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
</UL>

<P><STRONG><a name="[273]"></a>hci_le_read_local_p256_public_key_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_read_local_p256_public_key_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[25]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hci_le_read_local_p256_public_key_complete_event
</UL>

<P><STRONG><a name="[274]"></a>hci_le_read_remote_used_features_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_le_read_remote_used_features_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[2c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hci_le_read_remote_used_features_complete_event
</UL>

<P><STRONG><a name="[285]"></a>hci_le_set_advertise_enable</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, hci.o(i.hci_le_set_advertise_enable))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = hci_le_set_advertise_enable &rArr; LL_Enable_Disable_Adv &rArr; wait_for_prescheduled_slot_cancellation &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Adv
<LI><a href="#[178]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Is_Address_Initialized
<LI><a href="#[156]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_Random_Addr
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnection_complete_event
</UL>

<P><STRONG><a name="[1fd]"></a>hci_le_set_advertising_data</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, hci.o(i.hci_le_set_advertising_data))
<BR><BR>[Calls]<UL><LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Adv_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Beaconing
</UL>

<P><STRONG><a name="[1fb]"></a>hci_le_set_scan_response_data</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, hci.o(i.hci_le_set_scan_response_data))
<BR><BR>[Calls]<UL><LI><a href="#[28a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Scan_Resp_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Beaconing
</UL>

<P><STRONG><a name="[275]"></a>hci_number_of_completed_packets_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_number_of_completed_packets_event))
<BR><BR>[Called By]<UL><LI><a href="#[2e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hci_number_of_completed_packets_event
</UL>

<P><STRONG><a name="[276]"></a>hci_read_remote_version_information_complete_event</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, aci_events.o(i.hci_read_remote_version_information_complete_event))
<BR><BR>[Called By]<UL><LI><a href="#[2a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hci_read_remote_version_information_complete_event
</UL>

<P><STRONG><a name="[28b]"></a>hci_rx_acl_data</STRONG> (Thumb, 102 bytes, Stack size unknown bytes, hci.o(i.hci_rx_acl_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = hci_rx_acl_data &rArr; PM_Copy_Pckt_Data &rArr; Mem_Buff_Read &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[59]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_cb_hci_acl_data_ind_event
</UL>

<P><STRONG><a name="[277]"></a>hci_rx_acl_data_event</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, aci_events.o(i.hci_rx_acl_data_event))
<BR><BR>[Called By]<UL><LI><a href="#[2f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cb_hci_rx_acl_data_event
</UL>

<P><STRONG><a name="[28c]"></a>hci_tx_acl_data_done</STRONG> (Thumb, 64 bytes, Stack size unknown bytes, hci.o(i.hci_tx_acl_data_done))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[58]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_cb_hci_acl_data_tx_cmpl_event
</UL>

<P><STRONG><a name="[28d]"></a>init_GPIO</STRONG> (Thumb, 188 bytes, Stack size 40 bytes, gpio_init.o(i.init_GPIO))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = init_GPIO &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[290]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTIConfig
<LI><a href="#[291]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_EXTICmd
<LI><a href="#[130]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ClearITPendingBit
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_PeripheralClockCmd
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_LedGpioPin
<LI><a href="#[28f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;NVIC_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[59]"></a>int_cb_hci_acl_data_ind_event</STRONG> (Thumb, 60 bytes, Stack size unknown bytes, acl.o(i.int_cb_hci_acl_data_ind_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = int_cb_hci_acl_data_ind_event &rArr; L2C_Rcv_Event_Handler &rArr; L2C_Rcv_Data &rArr; L2C_Mux_Acl_Packet &rArr; SMP_acl_data_hndl &rArr; smp_Keys_Distribution_Complete &rArr; smp_pairing_completed &rArr; smp_add_pairing_record_to_bonding_database &rArr; SDB_Add_Record &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler
<LI><a href="#[28b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_rx_acl_data
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[58]"></a>int_cb_hci_acl_data_tx_cmpl_event</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, acl.o(i.int_cb_hci_acl_data_tx_cmpl_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = int_cb_hci_acl_data_tx_cmpl_event &rArr; L2C_Rcv_Event_Handler &rArr; L2C_Rcv_Data &rArr; L2C_Mux_Acl_Packet &rArr; SMP_acl_data_hndl &rArr; smp_Keys_Distribution_Complete &rArr; smp_pairing_completed &rArr; smp_add_pairing_record_to_bonding_database &rArr; SDB_Add_Record &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler
<LI><a href="#[28c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_tx_acl_data_done
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[5a]"></a>int_cb_hci_disconnection_complete_event</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, aci_events.o(i.int_cb_hci_disconnection_complete_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = int_cb_hci_disconnection_complete_event &rArr; L2C_Rcv_Event_Handler_ISR &rArr; SMP_hci_le_long_term_key_request_evt_hndl &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LL_Event_Handler_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[5b]"></a>int_cb_hci_encryption_change_event</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, aci_events.o(i.int_cb_hci_encryption_change_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = int_cb_hci_encryption_change_event &rArr; L2C_Rcv_Event_Handler_ISR &rArr; SMP_hci_le_long_term_key_request_evt_hndl &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[5c]"></a>int_cb_hci_encryption_key_refresh_complete_event</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, aci_events.o(i.int_cb_hci_encryption_key_refresh_complete_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = int_cb_hci_encryption_key_refresh_complete_event &rArr; L2C_Rcv_Event_Handler_ISR &rArr; SMP_hci_le_long_term_key_request_evt_hndl &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[5f]"></a>int_cb_hci_le_advertising_report_event</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, aci_events.o(i.int_cb_hci_le_advertising_report_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = int_cb_hci_le_advertising_report_event &rArr; GAP_LL_Event_Handler_ISR &rArr; GAP_Connection_Complete_Handler &rArr; aci_gap_proc_complete_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LL_Event_Handler_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[5d]"></a>int_cb_hci_le_connection_complete_event</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, aci_events.o(i.int_cb_hci_le_connection_complete_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = int_cb_hci_le_connection_complete_event &rArr; L2C_Rcv_Event_Handler_ISR &rArr; SMP_hci_le_long_term_key_request_evt_hndl &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LL_Event_Handler_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[60]"></a>int_cb_hci_le_data_length_change_event</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, aci_events.o(i.int_cb_hci_le_data_length_change_event))
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[64]"></a>int_cb_hci_le_direct_advertising_report_event</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, aci_events.o(i.int_cb_hci_le_direct_advertising_report_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = int_cb_hci_le_direct_advertising_report_event &rArr; GAP_LL_Event_Handler_ISR &rArr; GAP_Connection_Complete_Handler &rArr; aci_gap_proc_complete_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LL_Event_Handler_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[63]"></a>int_cb_hci_le_enhanced_connection_complete_event</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, aci_events.o(i.int_cb_hci_le_enhanced_connection_complete_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = int_cb_hci_le_enhanced_connection_complete_event &rArr; L2C_Rcv_Event_Handler_ISR &rArr; SMP_hci_le_long_term_key_request_evt_hndl &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
<LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LL_Event_Handler_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[62]"></a>int_cb_hci_le_generate_dhkey_complete_event</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, aci_events.o(i.int_cb_hci_le_generate_dhkey_complete_event))
<BR><BR>[Calls]<UL><LI><a href="#[292]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sc_hci_le_generate_dhkey_complete_evt_hndl_ucfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[5e]"></a>int_cb_hci_le_long_term_key_request_event</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, aci_events.o(i.int_cb_hci_le_long_term_key_request_event))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = int_cb_hci_le_long_term_key_request_event &rArr; L2C_Rcv_Event_Handler_ISR &rArr; SMP_hci_le_long_term_key_request_evt_hndl &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[16e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler_ISR
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[61]"></a>int_cb_hci_le_read_local_p256_public_key_complete_event</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, aci_events.o(i.int_cb_hci_le_read_local_p256_public_key_complete_event))
<BR><BR>[Calls]<UL><LI><a href="#[293]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sc_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> aci_events.o(.constdata)
</UL>
<P><STRONG><a name="[15c]"></a>is_Buffer_All_Set_To</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, utils.o(i.is_Buffer_All_Set_To))
<BR><BR>[Called By]<UL><LI><a href="#[108]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;IDD_Initialize_Device_IDs
</UL>

<P><STRONG><a name="[91]"></a>is_slave</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, multi_master_time.o(i.is_slave))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_current_master
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Transmit_Data
<LI><a href="#[ed]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_Disconnection_Req
</UL>

<P><STRONG><a name="[191]"></a>isr_Acl_Data_Indication_Queue_Full</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, acl.o(i.isr_Acl_Data_Indication_Queue_Full))
<BR><BR>[Called By]<UL><LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_receive_data
</UL>

<P><STRONG><a name="[29b]"></a>isr_Acl_Data_TX_Cmpl_Queue_Full</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, acl.o(i.isr_Acl_Data_TX_Cmpl_Queue_Full))
<BR><BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_slave_state
</UL>

<P><STRONG><a name="[1b7]"></a>isr_event_handler</STRONG> (Thumb, 1524 bytes, Stack size unknown bytes, ll_routines_master.o(i.isr_event_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = isr_event_handler &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
<LI><a href="#[94]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Tx_Cmpl_Pkt_Handler
<LI><a href="#[8b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Rcv_Pkt_Handler
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_addr
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[29e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler_scan_data_ucfg
<LI><a href="#[29f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Reclassify_All_Channels_ucfg
<LI><a href="#[195]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Block_Write
<LI><a href="#[289]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_update_complete_event_push
<LI><a href="#[288]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_connection_complete_event_push
<LI><a href="#[287]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_key_refresh_complete_event_push
<LI><a href="#[286]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_encryption_change_event_push
<LI><a href="#[29d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_vGenerate_hci_le_enhanced_connection_complete_event_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
<LI><a href="#[237]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_slave
<LI><a href="#[23a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_master
</UL>

<P><STRONG><a name="[29e]"></a>isr_event_handler_scan_data_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_routines_master.o(i.isr_event_handler_scan_data_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
</UL>

<P><STRONG><a name="[1b8]"></a>isr_postproc</STRONG> (Thumb, 468 bytes, Stack size unknown bytes, isr_postproc.o(i.isr_postproc))
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[15b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Hal_Get_Random_Number32
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
<LI><a href="#[2a1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Send_Length_Resp_ucfg
<LI><a href="#[2a0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Data_Length_Change_Event_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>

<P><STRONG><a name="[29c]"></a>isr_postproc1</STRONG> (Thumb, 262 bytes, Stack size unknown bytes, rom_ll_isr_postproc.o(i.isr_postproc1))
<BR><BR>[Calls]<UL><LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc_encrypt_data
<LI><a href="#[2a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_4_u32
<LI><a href="#[2a2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_aes_ready
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_slave_state
</UL>

<P><STRONG><a name="[297]"></a>isr_postproc_encrypt_data</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, rom_ll_isr_postproc.o(i.isr_postproc_encrypt_data))
<BR><BR>[Calls]<UL><LI><a href="#[184]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc1
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_advertise_state
</UL>

<P><STRONG><a name="[d2]"></a>machine_time_trans</STRONG> (Thumb, 28 bytes, Stack size unknown bytes, rom_ll_timehandling.o(i.machine_time_trans))
<BR><BR>[Called By]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_freq
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ProcessQ
<LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Perform_Crystal_Check
<LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_advance
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_test_tx_state
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_slave_state
<LI><a href="#[182]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;wait_for_prescheduled_slot_cancellation
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timebase
</UL>

<P><STRONG><a name="[1c]"></a>main</STRONG> (Thumb, 178 bytes, Stack size 0 bytes, ble_beacon_main.o(i.main))
<BR><BR>[Stack]<UL><LI>Max Depth = 720 + Unknown Stack Size
<LI>Call Chain = main &rArr; BlueNRG_Sleep &rArr; BlueNRG_InternalSleep &rArr; DeviceConfiguration &rArr; BOR_ConfigSave
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Sleep
<LI><a href="#[2a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Clock_Init
<LI><a href="#[1fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Start_Beaconing
<LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
<LI><a href="#[154]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_LedGpioPin
<LI><a href="#[2a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalIdentification
<LI><a href="#[1ea]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalComUartInit
<LI><a href="#[2a6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;tran_int
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setModeIDLE
<LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printRegisters
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_init
<LI><a href="#[28d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;init_GPIO
<LI><a href="#[2aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_hal_set_radio_activity_mask
<LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialization
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
<LI><a href="#[95]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Add_Service
<LI><a href="#[27d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_data_read
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check
<LI><a href="#[e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Device_Init
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RESET_HANDLER
</UL>
<BR>[Address Reference Count : 1]<UL><LI> entry9a.o(.ARM.Collect$$$$0000000B)
</UL>
<P><STRONG><a name="[20b]"></a>mem_alloc_ctx_init</STRONG> (Thumb, 158 bytes, Stack size unknown bytes, mem_alloc.o(i.mem_alloc_ctx_init))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[239]"></a>microseconds_to_machine_time</STRONG> (Thumb, 8 bytes, Stack size unknown bytes, routines_support.o(i.microseconds_to_machine_time))
<BR><BR>[Called By]<UL><LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
</UL>

<P><STRONG><a name="[232]"></a>modulo_37</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, rom_ll_routines_support.o(i.modulo_37))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_slave_state
</UL>

<P><STRONG><a name="[2a5]"></a>nrf_init</STRONG> (Thumb, 166 bytes, Stack size 16 bytes, _nrf905_.o(i.nrf_init))
<BR><BR>[Stack]<UL><LI>Max Depth = 84<LI>Call Chain = nrf_init &rArr; SdkEvalSpiInit &rArr; SPI_Init &rArr; SPI_SetBaudrate &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[1ec]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_Init
<LI><a href="#[1eb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_PeripheralClockCmd
<LI><a href="#[1f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SdkEvalSpiInit
<LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteRegister
<LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRF
<LI><a href="#[2ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setPromiscuous
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setChannel
<LI><a href="#[2ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setModeIDLE
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[189]"></a>nsar_init</STRONG> (Thumb, 20 bytes, Stack size unknown bytes, multi_master_time.o(i.nsar_init))
<BR><BR>[Called By]<UL><LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
</UL>

<P><STRONG><a name="[a4]"></a>pow</STRONG> (Thumb, 2548 bytes, Stack size 128 bytes, pow.o(i.pow))
<BR><BR>[Stack]<UL><LI>Max Depth = 280<LI>Call Chain = pow &rArr; __kernel_poly &rArr; __aeabi_dmul &rArr; _double_epilogue &rArr; __aeabi_llsl
</UL>
<BR>[Calls]<UL><LI><a href="#[75]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dsub
<LI><a href="#[76]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_drsub
<LI><a href="#[77]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dmul
<LI><a href="#[78]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_ddiv
<LI><a href="#[70]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_dadd
<LI><a href="#[219]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_scalbn
<LI><a href="#[79]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_i2d
<LI><a href="#[2b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_cdrcmple
<LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[2b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sqrt
<LI><a href="#[213]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__kernel_poly
<LI><a href="#[2b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_fpclassify
<LI><a href="#[21a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_underflow
<LI><a href="#[218]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_overflow
<LI><a href="#[217]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_invalid
<LI><a href="#[216]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_infnan2
<LI><a href="#[215]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__mathlib_dbl_divzero
</UL>
<BR>[Called By]<UL><LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
</UL>

<P><STRONG><a name="[2a8]"></a>printRegisters</STRONG> (Thumb, 40 bytes, Stack size 24 bytes, _nrf905_.o(i.printRegisters))
<BR><BR>[Stack]<UL><LI>Max Depth = 48<LI>Call Chain = printRegisters &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadRegister
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[1b6]"></a>read_rssi</STRONG> (Thumb, 114 bytes, Stack size unknown bytes, ll_routines.o(i.read_rssi))
<BR><BR>[Called By]<UL><LI><a href="#[d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;RAL_Isr
</UL>

<P><STRONG><a name="[181]"></a>schedule_advertise_slot</STRONG> (Thumb, 168 bytes, Stack size unknown bytes, multi_master_time.o(i.schedule_advertise_slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = schedule_advertise_slot &rArr; start_timebase &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adapt_slot
<LI><a href="#[2b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;start_timebase
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Adv
</UL>

<P><STRONG><a name="[20e]"></a>secure_connections_csr_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, smp_scv42_sap.o(i.secure_connections_csr_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[2a9]"></a>send_data</STRONG> (Thumb, 110 bytes, Stack size 16 bytes, _nrf905_.o(i.send_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 32<LI>Call Chain = send_data &rArr; spiBurstWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
<LI><a href="#[2b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiBurstWrite
<LI><a href="#[135]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[a7]"></a>setChannel</STRONG> (Thumb, 58 bytes, Stack size 16 bytes, _nrf905_.o(i.setChannel))
<BR><BR>[Stack]<UL><LI>Max Depth = 40<LI>Call Chain = setChannel &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteRegister
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadRegister
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
</UL>

<P><STRONG><a name="[21e]"></a>setGapAdvData</STRONG> (Thumb, 254 bytes, Stack size unknown bytes, gap.o(i.setGapAdvData))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = setGapAdvData &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[18a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_Adv_Data
<LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Adv_Tx_Power_Level
</UL>
<BR>[Called By]<UL><LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
</UL>

<P><STRONG><a name="[2ab]"></a>setModeIDLE</STRONG> (Thumb, 32 bytes, Stack size 8 bytes, _nrf905_.o(i.setModeIDLE))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = setModeIDLE
</UL>
<BR>[Calls]<UL><LI><a href="#[28e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_WriteBit
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_init
</UL>

<P><STRONG><a name="[2ad]"></a>setPromiscuous</STRONG> (Thumb, 12 bytes, Stack size 0 bytes, _nrf905_.o(i.setPromiscuous))
<BR><BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_init
</UL>

<P><STRONG><a name="[2ac]"></a>setRF</STRONG> (Thumb, 30 bytes, Stack size 8 bytes, _nrf905_.o(i.setRF))
<BR><BR>[Stack]<UL><LI>Max Depth = 24<LI>Call Chain = setRF &rArr; spiWriteRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[a3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiWriteRegister
<LI><a href="#[2b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;spiReadRegister
</UL>
<BR>[Called By]<UL><LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_init
</UL>

<P><STRONG><a name="[d1]"></a>set_freq</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, rom_ll_timehandling.o(i.set_freq))
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
</UL>
<BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Perform_Crystal_Check
</UL>

<P><STRONG><a name="[22f]"></a>set_sca</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, rom_ll_timehandling.o(i.set_sca))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_slaves
</UL>

<P><STRONG><a name="[236]"></a>set_string</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, hal.o(i.set_string))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_current_master
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_slave_state
</UL>

<P><STRONG><a name="[92]"></a>slave_advance</STRONG> (Thumb, 504 bytes, Stack size unknown bytes, routines_support.o(i.slave_advance))
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
<LI><a href="#[23b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Sleep_Req
</UL>
<BR>[Called By]<UL><LI><a href="#[1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_unknown_state
<LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_slave_state
<LI><a href="#[2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_advertise_state
<LI><a href="#[8e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Transmit_Data
</UL>

<P><STRONG><a name="[1e3]"></a>sma_CMAC_generate_tag</STRONG> (Thumb, 198 bytes, Stack size unknown bytes, smp_algo_sap.o(i.sma_CMAC_generate_tag))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = sma_CMAC_generate_tag &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_encrypt
<LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_generate_subkeys
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_validate_signed_packet
</UL>

<P><STRONG><a name="[2ba]"></a>smp_Execute_Actions_wrt_Current_State_MI_excerpt_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Execute_Actions_wrt_Current_State_MI_excerpt_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[2bb]"></a>smp_Execute_Actions_wrt_Current_State_sc_excerpt_phase2as2_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Execute_Actions_wrt_Current_State_sc_excerpt_phase2as2_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[2bf]"></a>smp_Execute_Actions_wrt_Current_State_sc_excerpt_phase_1_to_2_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Execute_Actions_wrt_Current_State_sc_excerpt_phase_1_to_2_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[2c2]"></a>smp_MI_Start_Encryption_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, securitymgr.o(i.smp_MI_Start_Encryption_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Complete
</UL>

<P><STRONG><a name="[1d9]"></a>smp_Process_Rx_Packet_Exception_Cases_sc_excerpt_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Process_Rx_Packet_Exception_Cases_sc_excerpt_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
</UL>

<P><STRONG><a name="[2cd]"></a>smp_Process_Rx_Packet_wrt_Current_State_MI_excerpt_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Process_Rx_Packet_wrt_Current_State_MI_excerpt_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
</UL>

<P><STRONG><a name="[2c7]"></a>smp_Process_Rx_Packet_wrt_Current_State_sc_excerpt_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Process_Rx_Packet_wrt_Current_State_sc_excerpt_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
</UL>

<P><STRONG><a name="[2d1]"></a>smp_add_pairing_record_to_bonding_database</STRONG> (Thumb, 324 bytes, Stack size unknown bytes, smp_common.o(i.smp_add_pairing_record_to_bonding_database))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = smp_add_pairing_record_to_bonding_database &rArr; SDB_Add_Record &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Add_Record
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_completed
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
</UL>

<P><STRONG><a name="[1d3]"></a>smp_find_remote_device_index</STRONG> (Thumb, 58 bytes, Stack size unknown bytes, smp_common.o(i.smp_find_remote_device_index))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
<LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_encryption_change_evt_hndl
<LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_disconnection_complete_evt_hndl
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_process_abort
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_completed
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_send_packet
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
</UL>

<P><STRONG><a name="[1e2]"></a>smp_get_CSRK</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, smp_common.o(i.smp_get_CSRK))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = smp_get_CSRK &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[1e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_validate_signed_packet
</UL>

<P><STRONG><a name="[2c3]"></a>smp_get_local_identity_address</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, smp_common.o(i.smp_get_local_identity_address))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = smp_get_local_identity_address &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[109]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Get_StaticRandAddr
</UL>
<BR>[Called By]<UL><LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
</UL>

<P><STRONG><a name="[2c1]"></a>smp_keys_distribution_start</STRONG> (Thumb, 56 bytes, Stack size unknown bytes, smp_common.o(i.smp_keys_distribution_start))
<BR><BR>[Called By]<UL><LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_keys_receiving
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[2c8]"></a>smp_keys_receiving</STRONG> (Thumb, 214 bytes, Stack size unknown bytes, smp_common.o(i.smp_keys_receiving))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = smp_keys_receiving &rArr; PM_Pckt_Cmp &rArr; Mem_Buff_Cmp &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[101]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Pckt_Cmp
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_completed
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_keys_distribution_start
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
</UL>

<P><STRONG><a name="[2d5]"></a>smp_oob_check_is_remote_data_present</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, smp_common.o(i.smp_oob_check_is_remote_data_present))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = smp_oob_check_is_remote_data_present &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
</UL>

<P><STRONG><a name="[2d8]"></a>smp_pairing_2octets_packet_send</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, smp_common.o(i.smp_pairing_2octets_packet_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = smp_pairing_2octets_packet_send &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Data
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_failed_send
</UL>

<P><STRONG><a name="[2be]"></a>smp_pairing_completed</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, smp_common.o(i.smp_pairing_completed))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = smp_pairing_completed &rArr; smp_add_pairing_record_to_bonding_database &rArr; SDB_Add_Record &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_update_statistics_on_pairing_complete
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event_push
<LI><a href="#[223]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_authorization_req_event_push
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_find_remote_device_index
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_add_pairing_record_to_bonding_database
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_reset_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[1dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Complete
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_keys_receiving
<LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[1d8]"></a>smp_pairing_failed_receive</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, smp_common.o(i.smp_pairing_failed_receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = smp_pairing_failed_receive &rArr; smp_pairing_process_abort &rArr; smp_repeated_attacks_protection &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_process_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
</UL>

<P><STRONG><a name="[2cc]"></a>smp_pairing_failed_send</STRONG> (Thumb, 42 bytes, Stack size unknown bytes, smp_common.o(i.smp_pairing_failed_send))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = smp_pairing_failed_send &rArr; smp_pairing_process_abort &rArr; smp_repeated_attacks_protection &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_2octets_packet_send
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_process_abort
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
</UL>

<P><STRONG><a name="[2da]"></a>smp_repeated_attacks_protection</STRONG> (Thumb, 218 bytes, Stack size unknown bytes, smp_common.o(i.smp_repeated_attacks_protection))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = smp_repeated_attacks_protection &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_reset_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_process_abort
</UL>

<P><STRONG><a name="[2cf]"></a>smp_sc_SR_PairingConfirm_Receive_sc_excerpt_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, securitymgr.o(i.smp_sc_SR_PairingConfirm_Receive_sc_excerpt_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingConfirm_Receive
</UL>

<P><STRONG><a name="[2d0]"></a>smp_sc_SR_PairingRandom_Receive_sc_excerpt_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, securitymgr.o(i.smp_sc_SR_PairingRandom_Receive_sc_excerpt_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
</UL>

<P><STRONG><a name="[2c0]"></a>smp_sc_SR_Pairing_Phase_2AS1_Start_sc_excerpt_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, securitymgr.o(i.smp_sc_SR_Pairing_Phase_2AS1_Start_sc_excerpt_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[1d0]"></a>smp_sc_check_for_ecc_pk_generation_request_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, smp_scv42_caf.o(i.smp_sc_check_for_ecc_pk_generation_request_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
</UL>

<P><STRONG><a name="[2d4]"></a>smp_sc_continue_on_exclusive_sc_pairing_ucfg</STRONG> (Thumb, 4 bytes, Stack size unknown bytes, smp_scv42_caf.o(i.smp_sc_continue_on_exclusive_sc_pairing_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
</UL>

<P><STRONG><a name="[292]"></a>smp_sc_hci_le_generate_dhkey_complete_evt_hndl_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, smp_scv42_sap.o(i.smp_sc_hci_le_generate_dhkey_complete_evt_hndl_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[62]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_cb_hci_le_generate_dhkey_complete_event
</UL>

<P><STRONG><a name="[293]"></a>smp_sc_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, smp_scv42_sap.o(i.smp_sc_hci_le_read_local_p256_public_key_complete_evt_hndl_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[61]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int_cb_hci_le_read_local_p256_public_key_complete_event
</UL>

<P><STRONG><a name="[1cf]"></a>smp_sc_init_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, smp_scv42_caf.o(i.smp_sc_init_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Init
</UL>

<P><STRONG><a name="[2db]"></a>smp_sc_update_statistics_on_pairing_complete_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, smp_scv42_caf.o(i.smp_sc_update_statistics_on_pairing_complete_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_update_statistics_on_pairing_complete
</UL>

<P><STRONG><a name="[2c4]"></a>smp_send_packet</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, securitymgr.o(i.smp_send_packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = smp_send_packet &rArr; L2C_Send_Data &rArr; Acl_Transmit_Data &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[12a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Send_Data
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_find_remote_device_index
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_reset_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingConfirm_Receive
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
</UL>

<P><STRONG><a name="[2b6]"></a>spiBurstWrite</STRONG> (Thumb, 76 bytes, Stack size 16 bytes, spi_init.o(i.spiBurstWrite))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spiBurstWrite
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;send_data
</UL>

<P><STRONG><a name="[2b3]"></a>spiReadRegister</STRONG> (Thumb, 112 bytes, Stack size 16 bytes, _nrf905_.o(i.spiReadRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spiReadRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetMasterCommunicationMode
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
<LI><a href="#[2df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_ReceiveData
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRF
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setChannel
<LI><a href="#[2a8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;printRegisters
</UL>

<P><STRONG><a name="[a3]"></a>spiWriteRegister</STRONG> (Thumb, 70 bytes, Stack size 16 bytes, _nrf905_.o(i.spiWriteRegister))
<BR><BR>[Stack]<UL><LI>Max Depth = 16<LI>Call Chain = spiWriteRegister
</UL>
<BR>[Calls]<UL><LI><a href="#[1f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_SetBits
<LI><a href="#[2dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GPIO_ResetBits
<LI><a href="#[2de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SetMasterCommunicationMode
<LI><a href="#[2dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_SendData
<LI><a href="#[1e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SPI_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[2ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setRF
<LI><a href="#[a7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;setChannel
<LI><a href="#[2a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nrf_init
<LI><a href="#[9f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Attribute_Modified_CB
</UL>

<P><STRONG><a name="[2b0]"></a>sqrt</STRONG> (Thumb, 66 bytes, Stack size 24 bytes, sqrt.o(i.sqrt))
<BR><BR>[Stack]<UL><LI>Max Depth = 64<LI>Call Chain = sqrt &rArr; _dsqrt &rArr; _double_round
</UL>
<BR>[Calls]<UL><LI><a href="#[2af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__set_errno
<LI><a href="#[80]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_dsqrt
</UL>
<BR>[Called By]<UL><LI><a href="#[a4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;pow
</UL>

<P><STRONG><a name="[2b4]"></a>start_timebase</STRONG> (Thumb, 194 bytes, Stack size unknown bytes, multi_master_time.o(i.start_timebase))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = start_timebase &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[f2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hal_radio_activity_state_callback_check
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_advertise_slot
</UL>

<P><STRONG><a name="[20c]"></a>state_func_call_init_csr_ucfg</STRONG> (Thumb, 2 bytes, Stack size unknown bytes, ll_isr.o(i.state_func_call_init_csr_ucfg))
<BR><BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[14f]"></a>store_data</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, gatt_server.o(i.store_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = store_data &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Store_Server_Database_And_Reset_CCCD
</UL>

<P><STRONG><a name="[233]"></a>swap_slaves</STRONG> (Thumb, 306 bytes, Stack size unknown bytes, routines_support.o(i.swap_slaves))
<BR><BR>[Calls]<UL><LI><a href="#[2e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u8
<LI><a href="#[2e1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u32
<LI><a href="#[2e2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_u16
<LI><a href="#[235]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;time_offset2
<LI><a href="#[22f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_sca
<LI><a href="#[234]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;WindowWiden2
</UL>
<BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
</UL>

<P><STRONG><a name="[204]"></a>system_time_trans</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, rom_ll_timehandling.o(i.system_time_trans))
<BR><BR>[Calls]<UL><LI><a href="#[203]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_trans_ext
</UL>
<BR>[Called By]<UL><LI><a href="#[15a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_sysTime32_convMachineTime
<LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ProcessQ
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_write_record
</UL>

<P><STRONG><a name="[203]"></a>system_time_trans_ext</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, rom_ll_timehandling.o(i.system_time_trans_ext))
<BR><BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ProcessQ
<LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_trans
</UL>

<P><STRONG><a name="[231]"></a>time_offset1</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, rom_ll_timehandling.o(i.time_offset1))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
</UL>

<P><STRONG><a name="[235]"></a>time_offset2</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, rom_ll_timehandling.o(i.time_offset2))
<BR><BR>[Called By]<UL><LI><a href="#[22e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_slave_timing_MultiSlave
<LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_slaves
</UL>

<P><STRONG><a name="[282]"></a>timebase_start_connect</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, multi_master_time.o(i.timebase_start_connect))
<BR><BR>[Called By]<UL><LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect
</UL>

<P><STRONG><a name="[2a6]"></a>tran_int</STRONG> (Thumb, 26 bytes, Stack size 0 bytes, _nrf905_.o(i.tran_int))
<BR><BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[29a]"></a>unpack_channel_map</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, rom_ll_isr_routines.o(i.unpack_channel_map))
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le4ByteToInt32
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le2ByteToInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_slave_state
</UL>

<P><STRONG><a name="[299]"></a>unpack_update_request</STRONG> (Thumb, 72 bytes, Stack size unknown bytes, rom_ll_isr_routines.o(i.unpack_update_request))
<BR><BR>[Calls]<UL><LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le2ByteToInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_connect_slave_state
</UL>

<P><STRONG><a name="[27c]"></a>write_flash</STRONG> (Thumb, 76 bytes, Stack size 32 bytes, flash_wr.o(i.write_flash))
<BR><BR>[Stack]<UL><LI>Max Depth = 56<LI>Call Chain = write_flash &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
<LI><a href="#[2e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_GetFlagStatus
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
</UL>
<BR>[Called By]<UL><LI><a href="#[268]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_disconnection_complete_event
<LI><a href="#[27a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;flash_check
</UL>
<P>
<H3>
Local Symbols
</H3>
<P><STRONG><a name="[b5]"></a>BlueNRG_InternalSleep</STRONG> (Thumb, 1758 bytes, Stack size 600 bytes, sleep.o(i.BlueNRG_InternalSleep))
<BR><BR>[Stack]<UL><LI>Max Depth = 688<LI>Call Chain = BlueNRG_InternalSleep &rArr; DeviceConfiguration &rArr; BOR_ConfigSave
</UL>
<BR>[Calls]<UL><LI><a href="#[b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemSleepCmd
<LI><a href="#[ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SysCtrl_GetWakeupResetReason
<LI><a href="#[b6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SET_BORconfigStatus
<LI><a href="#[b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;DeviceConfiguration
<LI><a href="#[aa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_GetPartInfo
<LI><a href="#[b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;CS_contextSave
</UL>
<BR>[Called By]<UL><LI><a href="#[bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Sleep
</UL>

<P><STRONG><a name="[1f7]"></a>SdkEvalUart_Send_Data</STRONG> (Thumb, 22 bytes, Stack size 8 bytes, sdk_eval_com.o(i.SdkEvalUart_Send_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 8<LI>Call Chain = SdkEvalUart_Send_Data
</UL>
<BR>[Calls]<UL><LI><a href="#[1f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_SendData
<LI><a href="#[1e9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;UART_GetFlagStatus
</UL>
<BR>[Called By]<UL><LI><a href="#[1d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;fputc
</UL>

<P><STRONG><a name="[1ff]"></a>NVIC_SetPriority</STRONG> (Thumb, 60 bytes, Stack size 0 bytes, system_bluenrg1.o(i.NVIC_SetPriority))
<BR><BR>[Called By]<UL><LI><a href="#[1fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SystemInit
</UL>

<P><STRONG><a name="[1fa]"></a>Start_Beaconing</STRONG> (Thumb, 108 bytes, Stack size 64 bytes, ble_beacon_main.o(i.Start_Beaconing))
<BR><BR>[Stack]<UL><LI>Max Depth = 88 + Unknown Stack Size
<LI>Call Chain = Start_Beaconing &rArr; __2printf
</UL>
<BR>[Calls]<UL><LI><a href="#[1fb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_scan_response_data
<LI><a href="#[1fd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_set_advertising_data
<LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
<LI><a href="#[98]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__2printf
<LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[1c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;main
</UL>

<P><STRONG><a name="[224]"></a>_aci_gap_set_discoverable_param_check</STRONG> (Thumb, 82 bytes, Stack size unknown bytes, bluenrg_gap_aci.o(i._aci_gap_set_discoverable_param_check))
<BR><BR>[Called By]<UL><LI><a href="#[1fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_set_discoverable
</UL>

<P><STRONG><a name="[21f]"></a>_load_uuid</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, bluenrg_gatt_aci.o(i._load_uuid))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = _load_uuid &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[96]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_service
<LI><a href="#[97]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gatt_add_char
</UL>

<P><STRONG><a name="[c1]"></a>BlueNRG_Stack_Initialize_ConfigData</STRONG> (Thumb, 90 bytes, Stack size unknown bytes, bluenrg_main_func.o(i.BlueNRG_Stack_Initialize_ConfigData))
<BR><BR>[Stack]<UL><LI>Max Depth = 40 + Unknown Stack Size
<LI>Call Chain = BlueNRG_Stack_Initialize_ConfigData &rArr; BLEPLAT_get_part_info &rArr; HAL_GetPartInfo
</UL>
<BR>[Calls]<UL><LI><a href="#[a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BLEPLAT_get_part_info
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[c2]"></a>BlueNRG_Stack_Initialize_Layers</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, bluenrg_main_func.o(i.BlueNRG_Stack_Initialize_Layers))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = BlueNRG_Stack_Initialize_Layers &rArr; ble_HAL_Init &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;ble_HAL_Init
<LI><a href="#[c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_Init
<LI><a href="#[c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Init
<LI><a href="#[c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Init
<LI><a href="#[c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Init
<LI><a href="#[c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Init
<LI><a href="#[ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HCI_Init
<LI><a href="#[c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Init_Context
<LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_init
<LI><a href="#[c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Acl_Init
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[bf]"></a>BlueNRG_Stack_Initialize_RAM_check</STRONG> (Thumb, 116 bytes, Stack size unknown bytes, bluenrg_main_func.o(i.BlueNRG_Stack_Initialize_RAM_check))
<BR><BR>[Calls]<UL><LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
<LI><a href="#[cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_allocator_noRet
<LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_allocator
</UL>
<BR>[Called By]<UL><LI><a href="#[be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Initialization
</UL>

<P><STRONG><a name="[b0]"></a>BlueNRG_Stack_Perform_Crystal_Check</STRONG> (Thumb, 178 bytes, Stack size unknown bytes, bluenrg_main_func.o(i.BlueNRG_Stack_Perform_Crystal_Check))
<BR><BR>[Calls]<UL><LI><a href="#[d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_freq
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
<LI><a href="#[d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Start_Crystal_Measurement
</UL>
<BR>[Called By]<UL><LI><a href="#[c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_BlueNRG_Stack_Initialization
<LI><a href="#[ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BTLE_StackTick
</UL>

<P><STRONG><a name="[d0]"></a>BlueNRG_Start_Crystal_Measurement</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, bluenrg_main_func.o(i.BlueNRG_Start_Crystal_Measurement))
<BR><BR>[Called By]<UL><LI><a href="#[b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;BlueNRG_Stack_Perform_Crystal_Check
</UL>

<P><STRONG><a name="[2]"></a>isr_advertise_state</STRONG> (Thumb, 908 bytes, Stack size unknown bytes, ll_isr.o(i.isr_advertise_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = isr_advertise_state &rArr; go_to_connect &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_advance
<LI><a href="#[297]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc_encrypt_data
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect
<LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_addr
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adv_addr
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_current_master
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[294]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_u32ProcessAdvPacket_ucfg
<LI><a href="#[295]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PRIV_SearchAddrInWhiteList
<LI><a href="#[296]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_memcpy1_6
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_isr.o(.data)
</UL>
<P><STRONG><a name="[3]"></a>isr_connect_slave_state</STRONG> (Thumb, 1988 bytes, Stack size unknown bytes, ll_isr.o(i.isr_connect_slave_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = isr_connect_slave_state &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[236]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;set_string
<LI><a href="#[d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;char_copy
<LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
<LI><a href="#[298]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Data_Length_Update_Control_ISR_ucfg
<LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_update_request
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_channel_map
<LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_advance
<LI><a href="#[232]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;modulo_37
<LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc1
<LI><a href="#[29b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_Acl_Data_TX_Cmpl_Queue_Full
<LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_current_master
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
<LI><a href="#[23f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_update_proc
<LI><a href="#[190]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_receive_data
<LI><a href="#[238]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;copy_tx_data_packet
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_isr.o(.data)
</UL>
<P><STRONG><a name="[5]"></a>isr_test_rx_state</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, ll_isr.o(i.isr_test_rx_state))
<BR>[Address Reference Count : 1]<UL><LI> ll_isr.o(.data)
</UL>
<P><STRONG><a name="[4]"></a>isr_test_tx_state</STRONG> (Thumb, 92 bytes, Stack size unknown bytes, ll_isr.o(i.isr_test_tx_state))
<BR><BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
<LI><a href="#[cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;data_length_extension_csr_ucfg
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_isr.o(.data)
</UL>
<P><STRONG><a name="[1]"></a>isr_unknown_state</STRONG> (Thumb, 38 bytes, Stack size unknown bytes, ll_isr.o(i.isr_unknown_state))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = isr_unknown_state &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[92]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;slave_advance
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
</UL>
<BR>[Address Reference Count : 1]<UL><LI> ll_isr.o(.data)
</UL>
<P><STRONG><a name="[222]"></a>fifoBuf_getFreeHeader</STRONG> (Thumb, 108 bytes, Stack size unknown bytes, aci_events.o(i.fifoBuf_getFreeHeader))
<BR><BR>[Called By]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
</UL>

<P><STRONG><a name="[f4]"></a>fifoCtrl_init</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, aci_events.o(i.fifoCtrl_init))
<BR><BR>[Called By]<UL><LI><a href="#[cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Events_Process_init
</UL>

<P><STRONG><a name="[110]"></a>_GAP_Parse_Advertising_Report</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, gap.o(i._GAP_Parse_Advertising_Report))
<BR><BR>[Called By]<UL><LI><a href="#[10f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LL_Event_Handler_ISR
</UL>

<P><STRONG><a name="[113]"></a>aci_gap_limited_discoverable_event_push</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, gap.o(i.aci_gap_limited_discoverable_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[b2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Process_Q
<LI><a href="#[124]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_gap_set_discoverable_connectable
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LimDiscTimeoutcb
</UL>

<P><STRONG><a name="[106]"></a>aci_gap_proc_complete_event_push</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, gap.o(i.aci_gap_proc_complete_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = aci_gap_proc_complete_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[105]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_Connection_Complete_Handler
</UL>

<P><STRONG><a name="[126]"></a>GATT_Server_Set_Flag</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, gatt_server.o(i.GATT_Server_Set_Flag))
<BR><BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value_Ext
<LI><a href="#[146]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_Init
<LI><a href="#[125]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_Connection_Complete_Handler
</UL>

<P><STRONG><a name="[139]"></a>Gatt_Flush_Pending_AclPacket_Lists</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Flush_Pending_AclPacket_Lists))
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_first
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
</UL>

<P><STRONG><a name="[13a]"></a>Gatt_Reset_To_Closed_State</STRONG> (Thumb, 244 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Reset_To_Closed_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = Gatt_Reset_To_Closed_State &rArr; Gatt_Store_Server_Database_And_Reset_CCCD &rArr; SMP_check_is_device_bonded &rArr; SDB_Find_Record &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[144]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Timed_Out_Connection_Index
<LI><a href="#[145]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Store_Server_Database_And_Reset_CCCD
<LI><a href="#[139]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Flush_Pending_AclPacket_Lists
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[b3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Process_Q
</UL>

<P><STRONG><a name="[145]"></a>Gatt_Store_Server_Database_And_Reset_CCCD</STRONG> (Thumb, 350 bytes, Stack size unknown bytes, gatt_server.o(i.Gatt_Store_Server_Database_And_Reset_CCCD))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = Gatt_Store_Server_Database_And_Reset_CCCD &rArr; SMP_check_is_device_bonded &rArr; SDB_Find_Record &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[13c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_check_is_device_bonded
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_flash_write_client_data
<LI><a href="#[14f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;store_data
<LI><a href="#[de]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Attr_Index
<LI><a href="#[dd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Gatt_Client
</UL>
<BR>[Called By]<UL><LI><a href="#[13a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Reset_To_Closed_State
</UL>

<P><STRONG><a name="[152]"></a>Pm_Resize_Host_Acl_Pckt</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, gatt_server.o(i.Pm_Resize_Host_Acl_Pckt))
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Resize_Pckt_Pdu_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[151]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Update_Charac_Value_Ext
</UL>

<P><STRONG><a name="[1b2]"></a>aci_gatt_indication_event_push</STRONG> (Thumb, 138 bytes, Stack size unknown bytes, gatt_server.o(i.aci_gatt_indication_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = aci_gatt_indication_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
</UL>

<P><STRONG><a name="[1b3]"></a>aci_gatt_notification_event_push</STRONG> (Thumb, 138 bytes, Stack size unknown bytes, gatt_server.o(i.aci_gatt_notification_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = aci_gatt_notification_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
</UL>

<P><STRONG><a name="[14a]"></a>aci_hal_fw_error_event_push</STRONG> (Thumb, 86 bytes, Stack size unknown bytes, gatt_server.o(i.aci_hal_fw_error_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = aci_hal_fw_error_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[13d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Process_Peer_Server_Data
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
</UL>

<P><STRONG><a name="[200]"></a>TimerCallback</STRONG> (Thumb, 124 bytes, Stack size unknown bytes, host_timer.o(i.TimerCallback))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = TimerCallback &rArr; SMP_repeated_attacks_timer_cb &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[104]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__ARM_common_switch8
<LI><a href="#[202]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_VTimerTimeoutCallback
<LI><a href="#[1e0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_repeated_attacks_timer_cb
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Protocol_Timer_cb
<LI><a href="#[174]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_SigChan_Req_TimeOut_Handler
<LI><a href="#[11f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_PrivateAddrTimercb
<LI><a href="#[12c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GATT_TimeOut_Handler
<LI><a href="#[201]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_DiscProcTimeoutcb_ucfg
<LI><a href="#[111]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GAP_LimDiscTimeoutcb
</UL>
<BR>[Called By]<UL><LI><a href="#[ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_ProcessQ
</UL>

<P><STRONG><a name="[15e]"></a>L2C_Get_Connection_Info</STRONG> (Thumb, 46 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Get_Connection_Info))
<BR><BR>[Called By]<UL><LI><a href="#[163]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Connection_Complete_Signal_Handler
<LI><a href="#[15d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Build_Command_Reject_Pdu
<LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Data
</UL>

<P><STRONG><a name="[173]"></a>L2C_Get_Connection_Info_Index</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Get_Connection_Info_Index))
<BR><BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
<LI><a href="#[172]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Reset_To_Closed_State
</UL>

<P><STRONG><a name="[164]"></a>L2C_Mux_Acl_Packet</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Mux_Acl_Packet))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = L2C_Mux_Acl_Packet &rArr; SMP_acl_data_hndl &rArr; smp_Keys_Distribution_Complete &rArr; smp_pairing_completed &rArr; smp_add_pairing_record_to_bonding_database &rArr; SDB_Add_Record &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_acl_data_hndl
<LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
<LI><a href="#[148]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Server_L2C_Handler
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Data
<LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler
</UL>

<P><STRONG><a name="[167]"></a>L2C_Rcv_Data</STRONG> (Thumb, 204 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Rcv_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = L2C_Rcv_Data &rArr; L2C_Mux_Acl_Packet &rArr; SMP_acl_data_hndl &rArr; smp_Keys_Distribution_Complete &rArr; smp_pairing_completed &rArr; smp_add_pairing_record_to_bonding_database &rArr; SDB_Add_Record &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[168]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Extract_Pdu_MBuff
<LI><a href="#[16a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Compact
<LI><a href="#[169]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Mem_Buff_Append
<LI><a href="#[16b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Get_PDU_Len
<LI><a href="#[16c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_discard_accumulated_acl_data
<LI><a href="#[164]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Mux_Acl_Packet
<LI><a href="#[15e]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Get_Connection_Info
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[16d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Event_Handler
</UL>

<P><STRONG><a name="[172]"></a>L2C_Reset_To_Closed_State</STRONG> (Thumb, 118 bytes, Stack size unknown bytes, l2cap.o(i.L2C_Reset_To_Closed_State))
<BR><BR>[Calls]<UL><LI><a href="#[173]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Get_Connection_Info_Index
<LI><a href="#[11d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Timer_StopOneShot
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[162]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler_ISR
</UL>

<P><STRONG><a name="[16c]"></a>L2C_discard_accumulated_acl_data</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, l2cap.o(i.L2C_discard_accumulated_acl_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = L2C_discard_accumulated_acl_data &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[167]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Rcv_Data
</UL>

<P><STRONG><a name="[175]"></a>aci_l2cap_connection_update_req_event_push</STRONG> (Thumb, 146 bytes, Stack size unknown bytes, l2cap.o(i.aci_l2cap_connection_update_req_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[165]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;L2C_Signal_Channel_Handler
</UL>

<P><STRONG><a name="[286]"></a>hci_encryption_change_event_push</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, ll_routines_master.o(i.hci_encryption_change_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
</UL>

<P><STRONG><a name="[287]"></a>hci_encryption_key_refresh_complete_event_push</STRONG> (Thumb, 84 bytes, Stack size unknown bytes, ll_routines_master.o(i.hci_encryption_key_refresh_complete_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
</UL>

<P><STRONG><a name="[288]"></a>hci_le_connection_complete_event_push</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, ll_routines_master.o(i.hci_le_connection_complete_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = hci_le_connection_complete_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
</UL>

<P><STRONG><a name="[289]"></a>hci_le_connection_update_complete_event_push</STRONG> (Thumb, 102 bytes, Stack size unknown bytes, ll_routines_master.o(i.hci_le_connection_update_complete_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[1b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_event_handler
</UL>

<P><STRONG><a name="[ee]"></a>Mem_assign</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, mem_alloc.o(i.Mem_assign))
<BR><BR>[Called By]<UL><LI><a href="#[ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Dynamic_allocator
</UL>

<P><STRONG><a name="[226]"></a>adapt_slot</STRONG> (Thumb, 598 bytes, Stack size unknown bytes, multi_master_time.o(i.adapt_slot))
<BR><BR>[Stack]<UL><LI>Max Depth = 12 + Unknown Stack Size
<LI>Call Chain = adapt_slot &rArr; __aeabi_uidivmod
</UL>
<BR>[Calls]<UL><LI><a href="#[227]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nsar_updateSlotListEntry
<LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nsar_searchBestFreeSlot
<LI><a href="#[228]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nsar_insertSlotListEntry
<LI><a href="#[143]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uidivmod
</UL>
<BR>[Called By]<UL><LI><a href="#[181]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;schedule_advertise_slot
</UL>

<P><STRONG><a name="[228]"></a>nsar_insertSlotListEntry</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, multi_master_time.o(i.nsar_insertSlotListEntry))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adapt_slot
</UL>

<P><STRONG><a name="[229]"></a>nsar_searchBestFreeSlot</STRONG> (Thumb, 188 bytes, Stack size unknown bytes, multi_master_time.o(i.nsar_searchBestFreeSlot))
<BR><BR>[Calls]<UL><LI><a href="#[2ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nsar_updateBestFreeSlot
</UL>
<BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adapt_slot
</UL>

<P><STRONG><a name="[2ae]"></a>nsar_updateBestFreeSlot</STRONG> (Thumb, 34 bytes, Stack size unknown bytes, multi_master_time.o(i.nsar_updateBestFreeSlot))
<BR><BR>[Called By]<UL><LI><a href="#[229]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;nsar_searchBestFreeSlot
</UL>

<P><STRONG><a name="[227]"></a>nsar_updateSlotListEntry</STRONG> (Thumb, 102 bytes, Stack size unknown bytes, multi_master_time.o(i.nsar_updateSlotListEntry))
<BR><BR>[Called By]<UL><LI><a href="#[226]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;adapt_slot
</UL>

<P><STRONG><a name="[23d]"></a>swap_u16</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, multi_master_time.o(i.swap_u16))
<BR><BR>[Called By]<UL><LI><a href="#[23c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;cancel_current_master
</UL>

<P><STRONG><a name="[1a0]"></a>PM_Check_And_Set</STRONG> (Thumb, 76 bytes, Stack size unknown bytes, pm.o(i.PM_Check_And_Set))
<BR><BR>[Called By]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Resize_Pckt_Pdu_Size
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
</UL>

<P><STRONG><a name="[2a2]"></a>wait_for_aes_ready</STRONG> (Thumb, 36 bytes, Stack size unknown bytes, rom_ll_isr_postproc.o(i.wait_for_aes_ready))
<BR><BR>[Called By]<UL><LI><a href="#[29c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;isr_postproc1
</UL>

<P><STRONG><a name="[22a]"></a>addr_u32_from_u8</STRONG> (Thumb, 30 bytes, Stack size unknown bytes, rom_ll_isr_routines.o(i.addr_u32_from_u8))
<BR><BR>[Calls]<UL><LI><a href="#[22b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le4ByteToInt32
<LI><a href="#[22c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le2ByteToInt16
</UL>
<BR>[Called By]<UL><LI><a href="#[280]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_scan_addr
<LI><a href="#[27f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;get_adv_addr
</UL>

<P><STRONG><a name="[22c]"></a>le2ByteToInt16</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, rom_ll_isr_routines.o(i.le2ByteToInt16))
<BR><BR>[Called By]<UL><LI><a href="#[299]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_update_request
<LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_channel_map
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_u32_from_u8
</UL>

<P><STRONG><a name="[22b]"></a>le4ByteToInt32</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, rom_ll_isr_routines.o(i.le4ByteToInt32))
<BR><BR>[Called By]<UL><LI><a href="#[29a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;unpack_channel_map
<LI><a href="#[281]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;go_to_connect
<LI><a href="#[22a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_u32_from_u8
</UL>

<P><STRONG><a name="[17b]"></a>LL_Set_DirectAddress</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.LL_Set_DirectAddress))
<BR><BR>[Calls]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_u32_from_u8
</UL>
<BR>[Called By]<UL><LI><a href="#[177]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Check_And_Set_Addresses
</UL>

<P><STRONG><a name="[18c]"></a>addr_u32_from_u8</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.addr_u32_from_u8))
<BR><BR>[Calls]<UL><LI><a href="#[22d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;le4ByteToInt32
</UL>
<BR>[Called By]<UL><LI><a href="#[17c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_OwnAddress
<LI><a href="#[17b]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Set_DirectAddress
</UL>

<P><STRONG><a name="[185]"></a>int32ToLe4Byte</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.int32ToLe4Byte))
<BR><BR>[Called By]<UL><LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Address
</UL>

<P><STRONG><a name="[22d]"></a>le4ByteToInt32</STRONG> (Thumb, 22 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.le4ByteToInt32))
<BR><BR>[Called By]<UL><LI><a href="#[18c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;addr_u32_from_u8
</UL>

<P><STRONG><a name="[182]"></a>wait_for_prescheduled_slot_cancellation</STRONG> (Thumb, 110 bytes, Stack size unknown bytes, rom_ll_ll_routines.o(i.wait_for_prescheduled_slot_cancellation))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = wait_for_prescheduled_slot_cancellation &rArr; advance_wakeup_timer &rArr; cancel_master &rArr; isr_event_handler &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;machine_time_trans
<LI><a href="#[93]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;advance_wakeup_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[112]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Enable_Disable_Adv
</UL>

<P><STRONG><a name="[187]"></a>convert_power</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, rom_ll_routines_support.o(i.convert_power))
<BR><BR>[Called By]<UL><LI><a href="#[186]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Adv_Tx_Power_Level
</UL>

<P><STRONG><a name="[2e2]"></a>swap_u16</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, routines_support.o(i.swap_u16))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_slaves
</UL>

<P><STRONG><a name="[2e1]"></a>swap_u32</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, routines_support.o(i.swap_u32))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_slaves
</UL>

<P><STRONG><a name="[2e0]"></a>swap_u8</STRONG> (Thumb, 10 bytes, Stack size unknown bytes, routines_support.o(i.swap_u8))
<BR><BR>[Called By]<UL><LI><a href="#[233]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;swap_slaves
</UL>

<P><STRONG><a name="[ef]"></a>Erase_Sector</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, sdb.o(i.Erase_Sector))
<BR><BR>[Stack]<UL><LI>Max Depth = 4 + Unknown Stack Size
<LI>Call Chain = Erase_Sector &rArr; FLASH_ErasePage
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
</UL>
<BR>[Called By]<UL><LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_delete
</UL>

<P><STRONG><a name="[1c9]"></a>Write_Client_Data</STRONG> (Thumb, 424 bytes, Stack size unknown bytes, sdb.o(i.Write_Client_Data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = Write_Client_Data &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_read_record_validity
<LI><a href="#[1c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_invalidate_record
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_get_gatt_db_start_address
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32ToLe4Byte
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Flagged
<LI><a href="#[17d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uread4
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_flash_write_client_data
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_delete
</UL>

<P><STRONG><a name="[209]"></a>int32ToLe4Byte</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, sdb.o(i.int32ToLe4Byte))
<BR><BR>[Called By]<UL><LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_read_record
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_find_client_data
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
</UL>

<P><STRONG><a name="[1c0]"></a>sdb_delete</STRONG> (Thumb, 352 bytes, Stack size unknown bytes, sdb.o(i.sdb_delete))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = sdb_delete &rArr; sdb_find_client_data &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ErasePage
<LI><a href="#[1c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_write_record
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_read_record_validity
<LI><a href="#[1bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_read_record
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_find_client_data
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
<LI><a href="#[ef]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Erase_Sector
</UL>
<BR>[Called By]<UL><LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_flash_write_client_data
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Add_Record
</UL>

<P><STRONG><a name="[1ca]"></a>sdb_find_client_data</STRONG> (Thumb, 196 bytes, Stack size unknown bytes, sdb.o(i.sdb_find_client_data))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = sdb_find_client_data &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[1be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_read_record_validity
<LI><a href="#[208]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_get_gatt_db_start_address
<LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32ToLe4Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_read_peer_bonded_data
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_delete
</UL>

<P><STRONG><a name="[208]"></a>sdb_get_gatt_db_start_address</STRONG> (Thumb, 18 bytes, Stack size unknown bytes, sdb.o(i.sdb_get_gatt_db_start_address))
<BR><BR>[Called By]<UL><LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_find_client_data
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
</UL>

<P><STRONG><a name="[1c1]"></a>sdb_invalidate_record</STRONG> (Thumb, 26 bytes, Stack size unknown bytes, sdb.o(i.sdb_invalidate_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 4 + Unknown Stack Size
<LI>Call Chain = sdb_invalidate_record &rArr; FLASH_ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[fe]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;FLASH_ProgramWord
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Add_Record
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
</UL>

<P><STRONG><a name="[1bf]"></a>sdb_read_record</STRONG> (Thumb, 32 bytes, Stack size unknown bytes, sdb.o(i.sdb_read_record))
<BR><BR>[Calls]<UL><LI><a href="#[209]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32ToLe4Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_flash_write_client_data
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Add_Record
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_delete
</UL>

<P><STRONG><a name="[1be]"></a>sdb_read_record_validity</STRONG> (Thumb, 12 bytes, Stack size unknown bytes, sdb.o(i.sdb_read_record_validity))
<BR><BR>[Called By]<UL><LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record
<LI><a href="#[150]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_flash_write_client_data
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
<LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Add_Record
<LI><a href="#[1ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_find_client_data
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_delete
<LI><a href="#[1c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Client_Data
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Get_Number_Of_Valid_Records
</UL>

<P><STRONG><a name="[1c2]"></a>sdb_write_record</STRONG> (Thumb, 120 bytes, Stack size unknown bytes, sdb.o(i.sdb_write_record))
<BR><BR>[Stack]<UL><LI>Max Depth = 4 + Unknown Stack Size
<LI>Call Chain = sdb_write_record &rArr; Flash_Write_Flagged &rArr; FLASH_ProgramWord
</UL>
<BR>[Calls]<UL><LI><a href="#[204]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;system_time_trans
<LI><a href="#[2b5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Delay_With_NOP_Cycles
<LI><a href="#[103]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Flash_Write_Flagged
</UL>
<BR>[Called By]<UL><LI><a href="#[1bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Add_Record
<LI><a href="#[1c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sdb_delete
</UL>

<P><STRONG><a name="[2c6]"></a>int32ToLe4Byte</STRONG> (Thumb, 16 bytes, Stack size unknown bytes, securitymgr.o(i.int32ToLe4Byte))
<BR><BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_LP_SR_Compute_c1_Confirm_Value
</UL>

<P><STRONG><a name="[2d3]"></a>smp_Build_AuthReq_Field</STRONG> (Thumb, 24 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Build_AuthReq_Field))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
</UL>

<P><STRONG><a name="[2d7]"></a>smp_Build_Pairing_ReqResp_Packet</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Build_Pairing_ReqResp_Packet))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
</UL>

<P><STRONG><a name="[2d2]"></a>smp_Check_Incoming_Pairing_Parameters</STRONG> (Thumb, 48 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Check_Incoming_Pairing_Parameters))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
</UL>

<P><STRONG><a name="[2b9]"></a>smp_Determine_Key_Association_Method</STRONG> (Thumb, 148 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Determine_Key_Association_Method))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = smp_Determine_Key_Association_Method &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[e6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_memcpy4
</UL>
<BR>[Called By]<UL><LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Set_Key_Association_Method
</UL>

<P><STRONG><a name="[1d6]"></a>smp_Execute_Actions_wrt_Current_State</STRONG> (Thumb, 390 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Execute_Actions_wrt_Current_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = smp_Execute_Actions_wrt_Current_State &rArr; SDB_Find_Record &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Generate_Random_Bytes_To
<LI><a href="#[1c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Record
<LI><a href="#[2bc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;GapIsPrivacySupported
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[2c0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sc_SR_Pairing_Phase_2AS1_Start_sc_excerpt_ucfg
<LI><a href="#[2bf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State_sc_excerpt_phase_1_to_2_ucfg
<LI><a href="#[2bb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State_sc_excerpt_phase2as2_ucfg
<LI><a href="#[2ba]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State_MI_excerpt_ucfg
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_completed
<LI><a href="#[2c1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_keys_distribution_start
<LI><a href="#[2bd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Keys_Distribution_Send
<LI><a href="#[1c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_get_security_data_record
<LI><a href="#[116]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Get_Number_Of_Valid_Records
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
</UL>

<P><STRONG><a name="[1d1]"></a>smp_Get_Long_Term_Key</STRONG> (Thumb, 122 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Get_Long_Term_Key))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = smp_Get_Long_Term_Key &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_generate_EDIV_recovery_DIV
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Diversify
<LI><a href="#[1c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SDB_Find_Matching_LTK
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
</UL>

<P><STRONG><a name="[2d6]"></a>smp_Get_Pairing_Parameters_From_Peer_Packet</STRONG> (Thumb, 132 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Get_Pairing_Parameters_From_Peer_Packet))
<BR><BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
</UL>

<P><STRONG><a name="[2bd]"></a>smp_Keys_Distribution_Send</STRONG> (Thumb, 280 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Keys_Distribution_Send))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = smp_Keys_Distribution_Send &rArr; PM_Write_Pckt_Data &rArr; Mem_Buff_Write &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[158]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;HAL_Generate_Random_Bytes_To
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[2c3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_get_local_identity_address
<LI><a href="#[1cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Generate_CSRK
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_send_packet
<LI><a href="#[1c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_generate_EDIV_recovery_DIV
<LI><a href="#[1c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Diversify
<LI><a href="#[1cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_Generate_IRK
</UL>
<BR>[Called By]<UL><LI><a href="#[1d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Execute_Actions_wrt_Current_State
</UL>

<P><STRONG><a name="[2c5]"></a>smp_LP_SR_Compute_c1_Confirm_Value</STRONG> (Thumb, 332 bytes, Stack size unknown bytes, securitymgr.o(i.smp_LP_SR_Compute_c1_Confirm_Value))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = smp_LP_SR_Compute_c1_Confirm_Value &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_encrypt
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32ToLe4Byte
<LI><a href="#[176]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;LL_Get_Address
</UL>
<BR>[Called By]<UL><LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingConfirm_Receive
</UL>

<P><STRONG><a name="[1d7]"></a>smp_Process_Rx_Packet_wrt_Current_State</STRONG> (Thumb, 296 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Process_Rx_Packet_wrt_Current_State))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = smp_Process_Rx_Packet_wrt_Current_State &rArr; smp_pairing_failed_send &rArr; smp_pairing_process_abort &rArr; smp_repeated_attacks_protection &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[2c7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State_sc_excerpt_ucfg
<LI><a href="#[2cd]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State_MI_excerpt_ucfg
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_failed_send
<LI><a href="#[2c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_keys_receiving
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_find_remote_device_index
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_reset_timer
<LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
<LI><a href="#[2cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRandom_Receive
<LI><a href="#[2ca]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingConfirm_Receive
</UL>
<BR>[Called By]<UL><LI><a href="#[b4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Process_Q
</UL>

<P><STRONG><a name="[2ce]"></a>smp_Set_Key_Association_Method</STRONG> (Thumb, 112 bytes, Stack size unknown bytes, securitymgr.o(i.smp_Set_Key_Association_Method))
<BR><BR>[Stack]<UL><LI>Max Depth = 8 + Unknown Stack Size
<LI>Call Chain = smp_Set_Key_Association_Method &rArr; smp_Determine_Key_Association_Method &rArr; __aeabi_memcpy4
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[2b9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Determine_Key_Association_Method
</UL>
<BR>[Called By]<UL><LI><a href="#[2c9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp____SR_PairingRequest_Receive
</UL>

<P><STRONG><a name="[2ca]"></a>smp____SR_PairingConfirm_Receive</STRONG> (Thumb, 122 bytes, Stack size unknown bytes, securitymgr.o(i.smp____SR_PairingConfirm_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = smp____SR_PairingConfirm_Receive &rArr; PM_Write_Pckt_Data &rArr; Mem_Buff_Write &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[2cf]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sc_SR_PairingConfirm_Receive_sc_excerpt_ucfg
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_send_packet
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_LP_SR_Compute_c1_Confirm_Value
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
</UL>

<P><STRONG><a name="[2cb]"></a>smp____SR_PairingRandom_Receive</STRONG> (Thumb, 282 bytes, Stack size unknown bytes, securitymgr.o(i.smp____SR_PairingRandom_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = smp____SR_PairingRandom_Receive &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[8a]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCmp
<LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
<LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
<LI><a href="#[2d0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sc_SR_PairingRandom_Receive_sc_excerpt_ucfg
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_failed_send
<LI><a href="#[1ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMA_LP_s1_Generate_STK
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_send_packet
<LI><a href="#[2c5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_LP_SR_Compute_c1_Confirm_Value
<LI><a href="#[2c6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;int32ToLe4Byte
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
</UL>

<P><STRONG><a name="[2c9]"></a>smp____SR_PairingRequest_Receive</STRONG> (Thumb, 376 bytes, Stack size unknown bytes, securitymgr.o(i.smp____SR_PairingRequest_Receive))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = smp____SR_PairingRequest_Receive &rArr; smp_pairing_failed_send &rArr; smp_pairing_process_abort &rArr; smp_repeated_attacks_protection &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[14c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Get_Pckt
<LI><a href="#[2d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sc_continue_on_exclusive_sc_pairing_ucfg
<LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_failed_send
<LI><a href="#[2d5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_oob_check_is_remote_data_present
<LI><a href="#[2d1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_add_pairing_record_to_bonding_database
<LI><a href="#[2c4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_send_packet
<LI><a href="#[2ce]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Set_Key_Association_Method
<LI><a href="#[2d6]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Get_Pairing_Parameters_From_Peer_Packet
<LI><a href="#[2d2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Check_Incoming_Pairing_Parameters
<LI><a href="#[2d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Build_Pairing_ReqResp_Packet
<LI><a href="#[2d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Build_AuthReq_Field
</UL>
<BR>[Called By]<UL><LI><a href="#[1d7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_Process_Rx_Packet_wrt_Current_State
</UL>

<P><STRONG><a name="[1de]"></a>SMP_connection_complete_handler</STRONG> (Thumb, 138 bytes, Stack size unknown bytes, smp_common.o(i.SMP_connection_complete_handler))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = SMP_connection_complete_handler &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
</UL>
<BR>[Called By]<UL><LI><a href="#[161]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_le_enhanced_connection_complete_evt_hndl
<LI><a href="#[160]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_le_connection_complete_evt_hndl
</UL>

<P><STRONG><a name="[223]"></a>aci_gap_authorization_req_event_push</STRONG> (Thumb, 80 bytes, Stack size unknown bytes, smp_common.o(i.aci_gap_authorization_req_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_completed
</UL>

<P><STRONG><a name="[1db]"></a>aci_gap_pairing_complete_event_push</STRONG> (Thumb, 88 bytes, Stack size unknown bytes, smp_common.o(i.aci_gap_pairing_complete_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[171]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_encryption_change_evt_hndl
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Protocol_Timer_cb
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_process_abort
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_completed
</UL>

<P><STRONG><a name="[1dd]"></a>smp_Keys_Distribution_Complete</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, smp_common.o(i.smp_Keys_Distribution_Complete))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = smp_Keys_Distribution_Complete &rArr; smp_pairing_completed &rArr; smp_add_pairing_record_to_bonding_database &rArr; SDB_Add_Record &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[2c2]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_MI_Start_Encryption_ucfg
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_completed
</UL>
<BR>[Called By]<UL><LI><a href="#[166]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_acl_data_hndl
</UL>

<P><STRONG><a name="[1df]"></a>smp_flush_rx_queues</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, smp_common.o(i.smp_flush_rx_queues))
<BR><BR>[Calls]<UL><LI><a href="#[f9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_remove
<LI><a href="#[f8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;acl_list_first
<LI><a href="#[fc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Release_Acl_Pckt
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_disconnection_complete_evt_hndl
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_process_abort
</UL>

<P><STRONG><a name="[2d9]"></a>smp_pairing_process_abort</STRONG> (Thumb, 96 bytes, Stack size unknown bytes, smp_common.o(i.smp_pairing_process_abort))
<BR><BR>[Stack]<UL><LI>Max Depth = 20 + Unknown Stack Size
<LI>Call Chain = smp_pairing_process_abort &rArr; smp_repeated_attacks_protection &rArr; Osal_MemCmp &rArr; memcmp
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[2da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_repeated_attacks_protection
<LI><a href="#[1dc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_update_statistics_on_pairing_complete
<LI><a href="#[1df]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_flush_rx_queues
<LI><a href="#[1db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_gap_pairing_complete_event_push
<LI><a href="#[1d3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_find_remote_device_index
<LI><a href="#[1d4]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_reset_timer
</UL>
<BR>[Called By]<UL><LI><a href="#[2cc]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_failed_send
<LI><a href="#[1d8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_failed_receive
</UL>

<P><STRONG><a name="[1dc]"></a>smp_update_statistics_on_pairing_complete</STRONG> (Thumb, 50 bytes, Stack size unknown bytes, smp_common.o(i.smp_update_statistics_on_pairing_complete))
<BR><BR>[Calls]<UL><LI><a href="#[2db]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_sc_update_statistics_on_pairing_complete_ucfg
</UL>
<BR>[Called By]<UL><LI><a href="#[16f]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_hci_disconnection_complete_evt_hndl
<LI><a href="#[1da]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SMP_Protocol_Timer_cb
<LI><a href="#[2d9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_process_abort
<LI><a href="#[2be]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;smp_pairing_completed
</UL>

<P><STRONG><a name="[83]"></a>ATT_fill_type_val_entry</STRONG> (Thumb, 52 bytes, Stack size unknown bytes, att.o(i.ATT_fill_type_val_entry))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ATT_fill_type_val_entry &rArr; PM_Write_Pckt_Data &rArr; Mem_Buff_Write &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[84]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Write_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
</UL>

<P><STRONG><a name="[85]"></a>ATT_validate_prepare_req</STRONG> (Thumb, 162 bytes, Stack size unknown bytes, att.o(i.ATT_validate_prepare_req))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = ATT_validate_prepare_req &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[87]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_search_handle
<LI><a href="#[86]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Gatt_Find_Srv_Owner_Of_Handle
</UL>
<BR>[Called By]<UL><LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
</UL>

<P><STRONG><a name="[100]"></a>Pm_Resize_Host_Acl_Pckt</STRONG> (Thumb, 14 bytes, Stack size unknown bytes, att.o(i.Pm_Resize_Host_Acl_Pckt))
<BR><BR>[Calls]<UL><LI><a href="#[1a5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Resize_Pckt_Pdu_Size
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
<LI><a href="#[1af]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Grp_Type_Resp
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
<LI><a href="#[1a9]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Prepare_Write_Resp
<LI><a href="#[102]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_Info_Resp
<LI><a href="#[ff]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Find_By_Type_Val_Resp
</UL>

<P><STRONG><a name="[fb]"></a>aci_gatt_attribute_modified_event_push</STRONG> (Thumb, 116 bytes, Stack size unknown bytes, att.o(i.aci_gatt_attribute_modified_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = aci_gatt_attribute_modified_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
<LI><a href="#[f7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Exec_Write_Resp
</UL>

<P><STRONG><a name="[1bc]"></a>aci_gatt_read_multi_permit_req_event_push</STRONG> (Thumb, 98 bytes, Stack size unknown bytes, att.o(i.aci_gatt_read_multi_permit_req_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = aci_gatt_read_multi_permit_req_event_push &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[1ae]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Multi_Resp
<LI><a href="#[1ab]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_By_Type_Resp
</UL>

<P><STRONG><a name="[1ba]"></a>aci_gatt_read_permit_req_event_push</STRONG> (Thumb, 74 bytes, Stack size unknown bytes, att.o(i.aci_gatt_read_permit_req_event_push))
<BR><BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
</UL>
<BR>[Called By]<UL><LI><a href="#[1ac]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Resp
<LI><a href="#[1ad]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Read_Blob_Resp
</UL>

<P><STRONG><a name="[20a]"></a>aci_gatt_write_permit_req_event_push</STRONG> (Thumb, 104 bytes, Stack size unknown bytes, att.o(i.aci_gatt_write_permit_req_event_push))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = aci_gatt_write_permit_req_event_push &rArr; PM_Copy_Pckt_Data &rArr; Mem_Buff_Read &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[8c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push_header
<LI><a href="#[8d]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;aci_event_fifo_push
<LI><a href="#[fa]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;PM_Copy_Pckt_Data
</UL>
<BR>[Called By]<UL><LI><a href="#[1b0]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Resp
<LI><a href="#[1b1]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Write_Cmd
</UL>

<P><STRONG><a name="[1e4]"></a>sma_Calculate_Hash</STRONG> (Thumb, 54 bytes, Stack size unknown bytes, smp_algo_sap.o(i.sma_Calculate_Hash))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = sma_Calculate_Hash &rArr; Osal_MemSet &rArr; memset
</UL>
<BR>[Calls]<UL><LI><a href="#[f5]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemSet
<LI><a href="#[82]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;Osal_MemCpy
<LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_encrypt
</UL>
<BR>[Called By]<UL><LI><a href="#[1c8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Resolve_Private_Address
<LI><a href="#[11c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;SM_Generate_Resolvable_Private_Address
</UL>

<P><STRONG><a name="[2b7]"></a>sma_generate_subkeys</STRONG> (Thumb, 126 bytes, Stack size unknown bytes, smp_algo_sap.o(i.sma_generate_subkeys))
<BR><BR>[Stack]<UL><LI>Max Depth = 16 + Unknown Stack Size
<LI>Call Chain = sma_generate_subkeys &rArr; hci_le_encrypt &rArr; LL_Encrypt_Plain_Data_ucfg &rArr; Osal_MemCpy &rArr; memcpy
</UL>
<BR>[Calls]<UL><LI><a href="#[1cb]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;hci_le_encrypt
<LI><a href="#[2b8]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_left_shift
</UL>
<BR>[Called By]<UL><LI><a href="#[1e3]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_CMAC_generate_tag
</UL>

<P><STRONG><a name="[2b8]"></a>sma_left_shift</STRONG> (Thumb, 44 bytes, Stack size unknown bytes, smp_algo_sap.o(i.sma_left_shift))
<BR><BR>[Called By]<UL><LI><a href="#[2b7]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;sma_generate_subkeys
</UL>

<P><STRONG><a name="[212]"></a>_printf_core</STRONG> (Thumb, 1020 bytes, Stack size 104 bytes, printf8.o(i._printf_core), UNUSED)
<BR><BR>[Calls]<UL><LI><a href="#[7c]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__aeabi_uldivmod
<LI><a href="#[220]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_pre_padding
<LI><a href="#[221]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_post_padding
</UL>
<BR>[Called By]<UL><LI><a href="#[211]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;__0printf$8
</UL>

<P><STRONG><a name="[221]"></a>_printf_post_padding</STRONG> (Thumb, 32 bytes, Stack size 24 bytes, printf8.o(i._printf_post_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>

<P><STRONG><a name="[220]"></a>_printf_pre_padding</STRONG> (Thumb, 44 bytes, Stack size 40 bytes, printf8.o(i._printf_pre_padding), UNUSED)
<BR><BR>[Called By]<UL><LI><a href="#[212]">&gt;&gt;</a>&nbsp;&nbsp;&nbsp;_printf_core
</UL>
<P>
<H3>
Undefined Global Symbols
</H3><HR></body></html>
